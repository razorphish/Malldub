#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUsers_Account", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Account), "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Account_AccountStatus", "AccountStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AccountStatus), "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Account), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundActivity_Id", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Activity), "FundActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.FundActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserGatewayActivity_Activity", "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Activity), "AspNetUserGatewayActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AspNetUserGatewayActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Activity_ActivityType", "ActivityType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ActivityType), "Activity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Activity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Order_Billing_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Address), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Order), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Order_Shipping_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Address), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Order), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserAddress_Address", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Address), "UserAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserAddress), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "AspNetUserRoles", "AspNetRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetRole), "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUser))]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Account_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Account), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserClaims_AspNetUsers", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "AspNetUserClaim", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserClaim), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserLogins_AspNetUsers", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "AspNetUserLogin", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserLogin), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Bid_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Bid", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Bid), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUpdate_User", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "FundUpdate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUpdate), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUser_Member", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "FundUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Item_User", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Item), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Mall_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Mall", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Mall), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Order_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Order), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserAddress_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "UserAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserAddress), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserEmail_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "UserEmail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserEmail), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserPhone_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "UserPhone", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserPhone), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserUpload_Users", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "UserUpload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserUpload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserGateway_AspNetUsers", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "AspNetUserGateway", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserGateway), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundShare_User", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AspNetUser), "FundShare", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundShare), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundNote_AspNetUsers", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "FundNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundNote), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeamMember_AspNetUser", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "FundTeamMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeamMember), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_DonorUser", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUser), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_MemberUser", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AspNetUser), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Comment_AspNetUser", "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AspNetUser), "Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Comment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserGatewayActivity_AspNetUserGateway", "AspNetUserGateway", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUserGateway), "AspNetUserGatewayActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserGatewayActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserGatewayActivity_AspNetUserGatewayType", "AspNetUserGatewayActivityType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AspNetUserGatewayActivityType), "AspNetUserGatewayActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserGatewayActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AuctionInvoice_Auction", "Auction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Auction), "AuctionInvoice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AuctionInvoice), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Bid_Auction", "Auction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Auction), "Bid", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Bid), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AuctionInvoice_AuctionInvoiceBillToType", "AuctionInvoiceBillToType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AuctionInvoiceBillToType), "AuctionInvoice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AuctionInvoice), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AuctionInvoice_AuctionInvoiceType", "AuctionInvoiceType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AuctionInvoiceType), "AuctionInvoice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AuctionInvoice), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Auction_AuctionStatus", "AuctionStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.AuctionStatus), "Auction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Auction), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Auction_AuctionType", "AuctionType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.AuctionType), "Auction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Auction), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ItemCategory_Category", "Category", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Category), "ItemCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemCategory), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundComment_Comment", "Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Comment), "FundComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundComment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_DonationNote_Donation", "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Donation), "DonationNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.DonationNote), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundComment_Donation", "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Donation), "FundComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundComment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_DonationFeeType", "DonationFeeType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.DonationFeeType), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_DonationStatus", "DonationStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.DonationStatus), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_DonationType", "DonationSubscriptionType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.DonationSubscriptionType), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserEmail_Email", "Email", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Email), "UserEmail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserEmail), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUpdate_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundUpdate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUpdate), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUser_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundShare_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundShare", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundShare), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundNote_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundNote), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundSettings_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundSetting", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.FundSetting), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundActivity_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeam_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeam), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeam_TeamFund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeam), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeamMember_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Fund), "FundTeamMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeamMember), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundComment_Fund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Fund), "FundComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundComment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FundDefault", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Fund), "Default", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Default))]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUser_FundUserFund", "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Fund), "FundUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundActivity_FundActivityType", "FundActivityType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundActivityType), "FundActivity", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundActivity), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Fund_FundCategory", "FundCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.FundCategory), "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Fund), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundComment_FundCommentOrigin", "FundCommentOrigin", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundCommentOrigin), "FundComment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundComment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundNote_FundNoteType", "FundNoteType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundNoteType), "FundNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundNote), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundShare_FundShareType", "FundShareType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundShareType), "FundShare", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundShare), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeamMember_FundTeam", "FundTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundTeam), "FundTeamMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeamMember), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeamMember_FundTeamMemberRole", "FundTeamMemberRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundTeamMemberRole), "FundTeamMember", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeamMember), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Fund_FundType", "FundType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundType), "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Fund), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUpdate_FundUpdateStatus", "FundUpdateStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundUpdateStatus), "FundUpdate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUpdate), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundUser_FundUserType", "FundUserType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.FundUserType), "FundUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUserGateway_Gateway", "Gateway", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Gateway), "AspNetUserGateway", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUserGateway), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Comment_Geo", "Geo", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Geo), "Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Comment), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Order_Geo", "Geo", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Geo), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Order), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AuctionInvoice_Invoice", "Invoice", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Invoice), "AuctionInvoice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AuctionInvoice), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_InvoiceItem_Invoice", "Invoice", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Invoice), "InvoiceItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.InvoiceItem), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Invoice_InvoiceStatus", "InvoiceStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.InvoiceStatus), "Invoice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Invoice), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Auction_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "Auction", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Auction), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AuctionPaymentItem_PaymentItem", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "AuctionPaymentItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AuctionPaymentItem), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Fund_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "Fund", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Fund), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_InvoiceItem_PaymentItem", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "InvoiceItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.InvoiceItem), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ItemCategory_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "ItemCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemCategory), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ItemMeta_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "ItemMetum", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemMetum), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ItemUpload_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "ItemUpload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemUpload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_OrderItem_Item", "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Item), "OrderItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.OrderItem), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Item_ItemStatus", "ItemStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ItemStatus), "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Item), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Item_ItemTransactionType", "ItemTransactionType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.ItemTransactionType), "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Item), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Item_ItemType", "ItemType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ItemType), "Item", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Item), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_ListArea", "ListArea", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.ListArea), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_ListCategory", "ListCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.ListCategory), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPostAttribute_ListPost", "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ListPost), "ListPortalPostAttribute", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPortalPostAttribute), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_ListPostStatus", "ListPostStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ListPostStatus), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListArea_ListSite", "ListSite", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.ListSite), "ListArea", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListArea), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_ListSite", "ListSite", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ListSite), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListCategory_ListType", "ListType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ListType), "ListCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListCategory), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_ListType", "ListType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.ListType), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Portal_Mall", "Mall", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Mall), "Portal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Portal), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Note_MalldubApplication", "MalldubApplication", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.MalldubApplication), "Note", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Note), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Portal_MallPortalStatus", "MallPortalStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.MallPortalStatus), "Portal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Portal), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_MetaKey_MetaDataType", "MetaDataType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.MetaDataType), "MetaKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.MetaKey), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Meta_MetaKey", "MetaKey", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.MetaKey), "Metum", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Metum), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_RealEstateMeta_MetaKey", "MetaKey", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.MetaKey), "ItemMetum", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemMetum), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundNote_Note", "Note", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Note), "FundNote", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.FundNote), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Note_NoteType", "NoteType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.NoteType), "Note", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Note), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Donation_Order", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Order), "Donation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Donation), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_OrderItem_Order", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Order), "OrderItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.OrderItem), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserPhone_Phone", "Phone", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Phone), "UserPhone", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserPhone), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Phone_PhoneType", "PhoneType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.PhoneType), "Phone", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Phone), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Portal_PortalType", "PortalType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.PortalType), "Portal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Portal), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPortalPostAttribute_PostField", "PostField", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.PostField), "ListPortalPostAttribute", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPortalPostAttribute), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ListPost_PostReplyEmailType", "PostReplyEmailType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.PostReplyEmailType), "ListPost", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ListPost), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Address_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.State), "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Address), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_FundTeam_Team", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Team), "FundTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.FundTeam), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_AspNetUsers_Upload", "Upload", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.Upload), "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUser), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_ItemUpload_Upload", "Upload", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Upload), "ItemUpload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.ItemUpload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_UserUpload_Upload", "Upload", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.Upload), "UserUpload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.UserUpload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Upload_UploadCategory", "UploadCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.UploadCategory), "Upload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Upload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Upload_UploadType", "UploadType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Malldub.Data.UploadType), "Upload", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.Upload), true)]
[assembly: EdmRelationshipAttribute("Malldub.Data", "FK_Users_UserStatus", "UserStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Malldub.Data.UserStatus), "AspNetUser", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Malldub.Data.AspNetUser), true)]
namespace Malldub.Data
{
    public partial class MalldubDataContext : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initializes a new MalldubDataContext object using the connection string 'MalldubDataContext' found in the connection string section of the application configuration file.
        /// </summary>
        public MalldubDataContext() : base("name=MalldubDataContext", "MalldubDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new MalldubDataContext object.
        /// </summary>
        public MalldubDataContext(string connectionString) : base(connectionString, "MalldubDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new MalldubDataContext object.
        /// </summary>
        public MalldubDataContext(EntityConnection connection) : base(connection, "MalldubDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        private ObjectSet<Account> _account;
        public ObjectSet<Account> Account
        {
            get
            {
                if (_account == null)
                {
                    _account = base.CreateObjectSet<Account>("Account");
                }

                return _account;
            }
        }

        private ObjectSet<AccountStatus> _accountStatus;
        public ObjectSet<AccountStatus> AccountStatus
        {
            get
            {
                if (_accountStatus == null)
                {
                    _accountStatus = base.CreateObjectSet<AccountStatus>("AccountStatus");
                }

                return _accountStatus;
            }
        }

        private ObjectSet<Activity> _activity;
        public ObjectSet<Activity> Activity
        {
            get
            {
                if (_activity == null)
                {
                    _activity = base.CreateObjectSet<Activity>("Activity");
                }

                return _activity;
            }
        }

        private ObjectSet<ActivityType> _activityType;
        public ObjectSet<ActivityType> ActivityType
        {
            get
            {
                if (_activityType == null)
                {
                    _activityType = base.CreateObjectSet<ActivityType>("ActivityType");
                }

                return _activityType;
            }
        }

        private ObjectSet<Address> _address;
        public ObjectSet<Address> Address
        {
            get
            {
                if (_address == null)
                {
                    _address = base.CreateObjectSet<Address>("Address");
                }

                return _address;
            }
        }

        private ObjectSet<AspNetRole> _aspNetRole;
        public ObjectSet<AspNetRole> AspNetRole
        {
            get
            {
                if (_aspNetRole == null)
                {
                    _aspNetRole = base.CreateObjectSet<AspNetRole>("AspNetRole");
                }

                return _aspNetRole;
            }
        }

        private ObjectSet<AspNetUser> _aspNetUser;
        public ObjectSet<AspNetUser> AspNetUser
        {
            get
            {
                if (_aspNetUser == null)
                {
                    _aspNetUser = base.CreateObjectSet<AspNetUser>("AspNetUser");
                }

                return _aspNetUser;
            }
        }

        private ObjectSet<AspNetUserClaim> _aspNetUserClaim;
        public ObjectSet<AspNetUserClaim> AspNetUserClaim
        {
            get
            {
                if (_aspNetUserClaim == null)
                {
                    _aspNetUserClaim = base.CreateObjectSet<AspNetUserClaim>("AspNetUserClaim");
                }

                return _aspNetUserClaim;
            }
        }

        private ObjectSet<AspNetUserGateway> _aspNetUserGateway;
        public ObjectSet<AspNetUserGateway> AspNetUserGateway
        {
            get
            {
                if (_aspNetUserGateway == null)
                {
                    _aspNetUserGateway = base.CreateObjectSet<AspNetUserGateway>("AspNetUserGateway");
                }

                return _aspNetUserGateway;
            }
        }

        private ObjectSet<AspNetUserGatewayActivity> _aspNetUserGatewayActivity;
        public ObjectSet<AspNetUserGatewayActivity> AspNetUserGatewayActivity
        {
            get
            {
                if (_aspNetUserGatewayActivity == null)
                {
                    _aspNetUserGatewayActivity = base.CreateObjectSet<AspNetUserGatewayActivity>("AspNetUserGatewayActivity");
                }

                return _aspNetUserGatewayActivity;
            }
        }

        private ObjectSet<AspNetUserGatewayActivityType> _aspNetUserGatewayActivityType;
        public ObjectSet<AspNetUserGatewayActivityType> AspNetUserGatewayActivityType
        {
            get
            {
                if (_aspNetUserGatewayActivityType == null)
                {
                    _aspNetUserGatewayActivityType = base.CreateObjectSet<AspNetUserGatewayActivityType>("AspNetUserGatewayActivityType");
                }

                return _aspNetUserGatewayActivityType;
            }
        }

        private ObjectSet<AspNetUserLogin> _aspNetUserLogin;
        public ObjectSet<AspNetUserLogin> AspNetUserLogin
        {
            get
            {
                if (_aspNetUserLogin == null)
                {
                    _aspNetUserLogin = base.CreateObjectSet<AspNetUserLogin>("AspNetUserLogin");
                }

                return _aspNetUserLogin;
            }
        }

        private ObjectSet<AspNetUsersTemp> _aspNetUsersTemp;
        public ObjectSet<AspNetUsersTemp> AspNetUsersTemp
        {
            get
            {
                if (_aspNetUsersTemp == null)
                {
                    _aspNetUsersTemp = base.CreateObjectSet<AspNetUsersTemp>("AspNetUsersTemp");
                }

                return _aspNetUsersTemp;
            }
        }

        private ObjectSet<Auction> _auction;
        public ObjectSet<Auction> Auction
        {
            get
            {
                if (_auction == null)
                {
                    _auction = base.CreateObjectSet<Auction>("Auction");
                }

                return _auction;
            }
        }

        private ObjectSet<AuctionInvoice> _auctionInvoice;
        public ObjectSet<AuctionInvoice> AuctionInvoice
        {
            get
            {
                if (_auctionInvoice == null)
                {
                    _auctionInvoice = base.CreateObjectSet<AuctionInvoice>("AuctionInvoice");
                }

                return _auctionInvoice;
            }
        }

        private ObjectSet<AuctionInvoiceBillToType> _auctionInvoiceBillToType;
        public ObjectSet<AuctionInvoiceBillToType> AuctionInvoiceBillToType
        {
            get
            {
                if (_auctionInvoiceBillToType == null)
                {
                    _auctionInvoiceBillToType = base.CreateObjectSet<AuctionInvoiceBillToType>("AuctionInvoiceBillToType");
                }

                return _auctionInvoiceBillToType;
            }
        }

        private ObjectSet<AuctionInvoiceType> _auctionInvoiceType;
        public ObjectSet<AuctionInvoiceType> AuctionInvoiceType
        {
            get
            {
                if (_auctionInvoiceType == null)
                {
                    _auctionInvoiceType = base.CreateObjectSet<AuctionInvoiceType>("AuctionInvoiceType");
                }

                return _auctionInvoiceType;
            }
        }

        private ObjectSet<AuctionPaymentItem> _auctionPaymentItem;
        public ObjectSet<AuctionPaymentItem> AuctionPaymentItem
        {
            get
            {
                if (_auctionPaymentItem == null)
                {
                    _auctionPaymentItem = base.CreateObjectSet<AuctionPaymentItem>("AuctionPaymentItem");
                }

                return _auctionPaymentItem;
            }
        }

        private ObjectSet<AuctionStatus> _auctionStatus;
        public ObjectSet<AuctionStatus> AuctionStatus
        {
            get
            {
                if (_auctionStatus == null)
                {
                    _auctionStatus = base.CreateObjectSet<AuctionStatus>("AuctionStatus");
                }

                return _auctionStatus;
            }
        }

        private ObjectSet<AuctionType> _auctionType;
        public ObjectSet<AuctionType> AuctionType
        {
            get
            {
                if (_auctionType == null)
                {
                    _auctionType = base.CreateObjectSet<AuctionType>("AuctionType");
                }

                return _auctionType;
            }
        }

        private ObjectSet<Bid> _bid;
        public ObjectSet<Bid> Bid
        {
            get
            {
                if (_bid == null)
                {
                    _bid = base.CreateObjectSet<Bid>("Bid");
                }

                return _bid;
            }
        }

        private ObjectSet<Category> _category;
        public ObjectSet<Category> Category
        {
            get
            {
                if (_category == null)
                {
                    _category = base.CreateObjectSet<Category>("Category");
                }

                return _category;
            }
        }

        private ObjectSet<Comment> _comment;
        public ObjectSet<Comment> Comment
        {
            get
            {
                if (_comment == null)
                {
                    _comment = base.CreateObjectSet<Comment>("Comment");
                }

                return _comment;
            }
        }

        private ObjectSet<Default> _default;
        public ObjectSet<Default> Default
        {
            get
            {
                if (_default == null)
                {
                    _default = base.CreateObjectSet<Default>("Default");
                }

                return _default;
            }
        }

        private ObjectSet<Donation> _donation;
        public ObjectSet<Donation> Donation
        {
            get
            {
                if (_donation == null)
                {
                    _donation = base.CreateObjectSet<Donation>("Donation");
                }

                return _donation;
            }
        }

        private ObjectSet<DonationFeeType> _donationFeeType;
        public ObjectSet<DonationFeeType> DonationFeeType
        {
            get
            {
                if (_donationFeeType == null)
                {
                    _donationFeeType = base.CreateObjectSet<DonationFeeType>("DonationFeeType");
                }

                return _donationFeeType;
            }
        }

        private ObjectSet<DonationNote> _donationNote;
        public ObjectSet<DonationNote> DonationNote
        {
            get
            {
                if (_donationNote == null)
                {
                    _donationNote = base.CreateObjectSet<DonationNote>("DonationNote");
                }

                return _donationNote;
            }
        }

        private ObjectSet<DonationStatus> _donationStatus;
        public ObjectSet<DonationStatus> DonationStatus
        {
            get
            {
                if (_donationStatus == null)
                {
                    _donationStatus = base.CreateObjectSet<DonationStatus>("DonationStatus");
                }

                return _donationStatus;
            }
        }

        private ObjectSet<DonationSubscriptionType> _donationSubscriptionType;
        public ObjectSet<DonationSubscriptionType> DonationSubscriptionType
        {
            get
            {
                if (_donationSubscriptionType == null)
                {
                    _donationSubscriptionType = base.CreateObjectSet<DonationSubscriptionType>("DonationSubscriptionType");
                }

                return _donationSubscriptionType;
            }
        }

        private ObjectSet<Email> _email;
        public ObjectSet<Email> Email
        {
            get
            {
                if (_email == null)
                {
                    _email = base.CreateObjectSet<Email>("Email");
                }

                return _email;
            }
        }

        private ObjectSet<Fund> _fund;
        public ObjectSet<Fund> Fund
        {
            get
            {
                if (_fund == null)
                {
                    _fund = base.CreateObjectSet<Fund>("Fund");
                }

                return _fund;
            }
        }

        private ObjectSet<FundActivity> _fundActivity;
        public ObjectSet<FundActivity> FundActivity
        {
            get
            {
                if (_fundActivity == null)
                {
                    _fundActivity = base.CreateObjectSet<FundActivity>("FundActivity");
                }

                return _fundActivity;
            }
        }

        private ObjectSet<FundActivityType> _fundActivityType;
        public ObjectSet<FundActivityType> FundActivityType
        {
            get
            {
                if (_fundActivityType == null)
                {
                    _fundActivityType = base.CreateObjectSet<FundActivityType>("FundActivityType");
                }

                return _fundActivityType;
            }
        }

        private ObjectSet<FundCategory> _fundCategory;
        public ObjectSet<FundCategory> FundCategory
        {
            get
            {
                if (_fundCategory == null)
                {
                    _fundCategory = base.CreateObjectSet<FundCategory>("FundCategory");
                }

                return _fundCategory;
            }
        }

        private ObjectSet<FundComment> _fundComment;
        public ObjectSet<FundComment> FundComment
        {
            get
            {
                if (_fundComment == null)
                {
                    _fundComment = base.CreateObjectSet<FundComment>("FundComment");
                }

                return _fundComment;
            }
        }

        private ObjectSet<FundCommentOrigin> _fundCommentOrigin;
        public ObjectSet<FundCommentOrigin> FundCommentOrigin
        {
            get
            {
                if (_fundCommentOrigin == null)
                {
                    _fundCommentOrigin = base.CreateObjectSet<FundCommentOrigin>("FundCommentOrigin");
                }

                return _fundCommentOrigin;
            }
        }

        private ObjectSet<FundNote> _fundNote;
        public ObjectSet<FundNote> FundNote
        {
            get
            {
                if (_fundNote == null)
                {
                    _fundNote = base.CreateObjectSet<FundNote>("FundNote");
                }

                return _fundNote;
            }
        }

        private ObjectSet<FundNoteType> _fundNoteType;
        public ObjectSet<FundNoteType> FundNoteType
        {
            get
            {
                if (_fundNoteType == null)
                {
                    _fundNoteType = base.CreateObjectSet<FundNoteType>("FundNoteType");
                }

                return _fundNoteType;
            }
        }

        private ObjectSet<FundSetting> _fundSetting;
        public ObjectSet<FundSetting> FundSetting
        {
            get
            {
                if (_fundSetting == null)
                {
                    _fundSetting = base.CreateObjectSet<FundSetting>("FundSetting");
                }

                return _fundSetting;
            }
        }

        private ObjectSet<FundShare> _fundShare;
        public ObjectSet<FundShare> FundShare
        {
            get
            {
                if (_fundShare == null)
                {
                    _fundShare = base.CreateObjectSet<FundShare>("FundShare");
                }

                return _fundShare;
            }
        }

        private ObjectSet<FundShareType> _fundShareType;
        public ObjectSet<FundShareType> FundShareType
        {
            get
            {
                if (_fundShareType == null)
                {
                    _fundShareType = base.CreateObjectSet<FundShareType>("FundShareType");
                }

                return _fundShareType;
            }
        }

        private ObjectSet<FundTeam> _fundTeam;
        public ObjectSet<FundTeam> FundTeam
        {
            get
            {
                if (_fundTeam == null)
                {
                    _fundTeam = base.CreateObjectSet<FundTeam>("FundTeam");
                }

                return _fundTeam;
            }
        }

        private ObjectSet<FundTeamMember> _fundTeamMember;
        public ObjectSet<FundTeamMember> FundTeamMember
        {
            get
            {
                if (_fundTeamMember == null)
                {
                    _fundTeamMember = base.CreateObjectSet<FundTeamMember>("FundTeamMember");
                }

                return _fundTeamMember;
            }
        }

        private ObjectSet<FundTeamMemberRole> _fundTeamMemberRole;
        public ObjectSet<FundTeamMemberRole> FundTeamMemberRole
        {
            get
            {
                if (_fundTeamMemberRole == null)
                {
                    _fundTeamMemberRole = base.CreateObjectSet<FundTeamMemberRole>("FundTeamMemberRole");
                }

                return _fundTeamMemberRole;
            }
        }

        private ObjectSet<FundType> _fundType;
        public ObjectSet<FundType> FundType
        {
            get
            {
                if (_fundType == null)
                {
                    _fundType = base.CreateObjectSet<FundType>("FundType");
                }

                return _fundType;
            }
        }

        private ObjectSet<FundUpdate> _fundUpdate;
        public ObjectSet<FundUpdate> FundUpdate
        {
            get
            {
                if (_fundUpdate == null)
                {
                    _fundUpdate = base.CreateObjectSet<FundUpdate>("FundUpdate");
                }

                return _fundUpdate;
            }
        }

        private ObjectSet<FundUpdateStatus> _fundUpdateStatus;
        public ObjectSet<FundUpdateStatus> FundUpdateStatus
        {
            get
            {
                if (_fundUpdateStatus == null)
                {
                    _fundUpdateStatus = base.CreateObjectSet<FundUpdateStatus>("FundUpdateStatus");
                }

                return _fundUpdateStatus;
            }
        }

        private ObjectSet<FundUser> _fundUser;
        public ObjectSet<FundUser> FundUser
        {
            get
            {
                if (_fundUser == null)
                {
                    _fundUser = base.CreateObjectSet<FundUser>("FundUser");
                }

                return _fundUser;
            }
        }

        private ObjectSet<FundUserType> _fundUserType;
        public ObjectSet<FundUserType> FundUserType
        {
            get
            {
                if (_fundUserType == null)
                {
                    _fundUserType = base.CreateObjectSet<FundUserType>("FundUserType");
                }

                return _fundUserType;
            }
        }

        private ObjectSet<Gateway> _gateway;
        public ObjectSet<Gateway> Gateway
        {
            get
            {
                if (_gateway == null)
                {
                    _gateway = base.CreateObjectSet<Gateway>("Gateway");
                }

                return _gateway;
            }
        }

        private ObjectSet<Geo> _geo;
        public ObjectSet<Geo> Geo
        {
            get
            {
                if (_geo == null)
                {
                    _geo = base.CreateObjectSet<Geo>("Geo");
                }

                return _geo;
            }
        }

        private ObjectSet<Invoice> _invoice;
        public ObjectSet<Invoice> Invoice
        {
            get
            {
                if (_invoice == null)
                {
                    _invoice = base.CreateObjectSet<Invoice>("Invoice");
                }

                return _invoice;
            }
        }

        private ObjectSet<InvoiceItem> _invoiceItem;
        public ObjectSet<InvoiceItem> InvoiceItem
        {
            get
            {
                if (_invoiceItem == null)
                {
                    _invoiceItem = base.CreateObjectSet<InvoiceItem>("InvoiceItem");
                }

                return _invoiceItem;
            }
        }

        private ObjectSet<InvoiceStatus> _invoiceStatus;
        public ObjectSet<InvoiceStatus> InvoiceStatus
        {
            get
            {
                if (_invoiceStatus == null)
                {
                    _invoiceStatus = base.CreateObjectSet<InvoiceStatus>("InvoiceStatus");
                }

                return _invoiceStatus;
            }
        }

        private ObjectSet<Item> _item;
        public ObjectSet<Item> Item
        {
            get
            {
                if (_item == null)
                {
                    _item = base.CreateObjectSet<Item>("Item");
                }

                return _item;
            }
        }

        private ObjectSet<ItemCategory> _itemCategory;
        public ObjectSet<ItemCategory> ItemCategory
        {
            get
            {
                if (_itemCategory == null)
                {
                    _itemCategory = base.CreateObjectSet<ItemCategory>("ItemCategory");
                }

                return _itemCategory;
            }
        }

        private ObjectSet<ItemMetum> _itemMetum;
        public ObjectSet<ItemMetum> ItemMetum
        {
            get
            {
                if (_itemMetum == null)
                {
                    _itemMetum = base.CreateObjectSet<ItemMetum>("ItemMetum");
                }

                return _itemMetum;
            }
        }

        private ObjectSet<ItemStatus> _itemStatus;
        public ObjectSet<ItemStatus> ItemStatus
        {
            get
            {
                if (_itemStatus == null)
                {
                    _itemStatus = base.CreateObjectSet<ItemStatus>("ItemStatus");
                }

                return _itemStatus;
            }
        }

        private ObjectSet<ItemTransactionType> _itemTransactionType;
        public ObjectSet<ItemTransactionType> ItemTransactionType
        {
            get
            {
                if (_itemTransactionType == null)
                {
                    _itemTransactionType = base.CreateObjectSet<ItemTransactionType>("ItemTransactionType");
                }

                return _itemTransactionType;
            }
        }

        private ObjectSet<ItemType> _itemType;
        public ObjectSet<ItemType> ItemType
        {
            get
            {
                if (_itemType == null)
                {
                    _itemType = base.CreateObjectSet<ItemType>("ItemType");
                }

                return _itemType;
            }
        }

        private ObjectSet<ItemUpload> _itemUpload;
        public ObjectSet<ItemUpload> ItemUpload
        {
            get
            {
                if (_itemUpload == null)
                {
                    _itemUpload = base.CreateObjectSet<ItemUpload>("ItemUpload");
                }

                return _itemUpload;
            }
        }

        private ObjectSet<ListArea> _listArea;
        public ObjectSet<ListArea> ListArea
        {
            get
            {
                if (_listArea == null)
                {
                    _listArea = base.CreateObjectSet<ListArea>("ListArea");
                }

                return _listArea;
            }
        }

        private ObjectSet<ListCategory> _listCategory;
        public ObjectSet<ListCategory> ListCategory
        {
            get
            {
                if (_listCategory == null)
                {
                    _listCategory = base.CreateObjectSet<ListCategory>("ListCategory");
                }

                return _listCategory;
            }
        }

        private ObjectSet<ListPortalPostAttribute> _listPortalPostAttribute;
        public ObjectSet<ListPortalPostAttribute> ListPortalPostAttribute
        {
            get
            {
                if (_listPortalPostAttribute == null)
                {
                    _listPortalPostAttribute = base.CreateObjectSet<ListPortalPostAttribute>("ListPortalPostAttribute");
                }

                return _listPortalPostAttribute;
            }
        }

        private ObjectSet<ListPost> _listPost;
        public ObjectSet<ListPost> ListPost
        {
            get
            {
                if (_listPost == null)
                {
                    _listPost = base.CreateObjectSet<ListPost>("ListPost");
                }

                return _listPost;
            }
        }

        private ObjectSet<ListPostStatus> _listPostStatus;
        public ObjectSet<ListPostStatus> ListPostStatus
        {
            get
            {
                if (_listPostStatus == null)
                {
                    _listPostStatus = base.CreateObjectSet<ListPostStatus>("ListPostStatus");
                }

                return _listPostStatus;
            }
        }

        private ObjectSet<ListSite> _listSite;
        public ObjectSet<ListSite> ListSite
        {
            get
            {
                if (_listSite == null)
                {
                    _listSite = base.CreateObjectSet<ListSite>("ListSite");
                }

                return _listSite;
            }
        }

        private ObjectSet<ListType> _listType;
        public ObjectSet<ListType> ListType
        {
            get
            {
                if (_listType == null)
                {
                    _listType = base.CreateObjectSet<ListType>("ListType");
                }

                return _listType;
            }
        }

        private ObjectSet<Mall> _mall;
        public ObjectSet<Mall> Mall
        {
            get
            {
                if (_mall == null)
                {
                    _mall = base.CreateObjectSet<Mall>("Mall");
                }

                return _mall;
            }
        }

        private ObjectSet<MalldubApplication> _malldubApplication;
        public ObjectSet<MalldubApplication> MalldubApplication
        {
            get
            {
                if (_malldubApplication == null)
                {
                    _malldubApplication = base.CreateObjectSet<MalldubApplication>("MalldubApplication");
                }

                return _malldubApplication;
            }
        }

        private ObjectSet<MallPortalStatus> _mallPortalStatus;
        public ObjectSet<MallPortalStatus> MallPortalStatus
        {
            get
            {
                if (_mallPortalStatus == null)
                {
                    _mallPortalStatus = base.CreateObjectSet<MallPortalStatus>("MallPortalStatus");
                }

                return _mallPortalStatus;
            }
        }

        private ObjectSet<MetaDataType> _metaDataType;
        public ObjectSet<MetaDataType> MetaDataType
        {
            get
            {
                if (_metaDataType == null)
                {
                    _metaDataType = base.CreateObjectSet<MetaDataType>("MetaDataType");
                }

                return _metaDataType;
            }
        }

        private ObjectSet<MetaKey> _metaKey;
        public ObjectSet<MetaKey> MetaKey
        {
            get
            {
                if (_metaKey == null)
                {
                    _metaKey = base.CreateObjectSet<MetaKey>("MetaKey");
                }

                return _metaKey;
            }
        }

        private ObjectSet<Metum> _metum;
        public ObjectSet<Metum> Metum
        {
            get
            {
                if (_metum == null)
                {
                    _metum = base.CreateObjectSet<Metum>("Metum");
                }

                return _metum;
            }
        }

        private ObjectSet<Note> _note;
        public ObjectSet<Note> Note
        {
            get
            {
                if (_note == null)
                {
                    _note = base.CreateObjectSet<Note>("Note");
                }

                return _note;
            }
        }

        private ObjectSet<NoteType> _noteType;
        public ObjectSet<NoteType> NoteType
        {
            get
            {
                if (_noteType == null)
                {
                    _noteType = base.CreateObjectSet<NoteType>("NoteType");
                }

                return _noteType;
            }
        }

        private ObjectSet<Order> _order;
        public ObjectSet<Order> Order
        {
            get
            {
                if (_order == null)
                {
                    _order = base.CreateObjectSet<Order>("Order");
                }

                return _order;
            }
        }

        private ObjectSet<OrderItem> _orderItem;
        public ObjectSet<OrderItem> OrderItem
        {
            get
            {
                if (_orderItem == null)
                {
                    _orderItem = base.CreateObjectSet<OrderItem>("OrderItem");
                }

                return _orderItem;
            }
        }

        private ObjectSet<PaymentMethod> _paymentMethod;
        public ObjectSet<PaymentMethod> PaymentMethod
        {
            get
            {
                if (_paymentMethod == null)
                {
                    _paymentMethod = base.CreateObjectSet<PaymentMethod>("PaymentMethod");
                }

                return _paymentMethod;
            }
        }

        private ObjectSet<Phone> _phone;
        public ObjectSet<Phone> Phone
        {
            get
            {
                if (_phone == null)
                {
                    _phone = base.CreateObjectSet<Phone>("Phone");
                }

                return _phone;
            }
        }

        private ObjectSet<PhoneType> _phoneType;
        public ObjectSet<PhoneType> PhoneType
        {
            get
            {
                if (_phoneType == null)
                {
                    _phoneType = base.CreateObjectSet<PhoneType>("PhoneType");
                }

                return _phoneType;
            }
        }

        private ObjectSet<Portal> _portal;
        public ObjectSet<Portal> Portal
        {
            get
            {
                if (_portal == null)
                {
                    _portal = base.CreateObjectSet<Portal>("Portal");
                }

                return _portal;
            }
        }

        private ObjectSet<PortalType> _portalType;
        public ObjectSet<PortalType> PortalType
        {
            get
            {
                if (_portalType == null)
                {
                    _portalType = base.CreateObjectSet<PortalType>("PortalType");
                }

                return _portalType;
            }
        }

        private ObjectSet<PostField> _postField;
        public ObjectSet<PostField> PostField
        {
            get
            {
                if (_postField == null)
                {
                    _postField = base.CreateObjectSet<PostField>("PostField");
                }

                return _postField;
            }
        }

        private ObjectSet<PostReplyEmailType> _postReplyEmailType;
        public ObjectSet<PostReplyEmailType> PostReplyEmailType
        {
            get
            {
                if (_postReplyEmailType == null)
                {
                    _postReplyEmailType = base.CreateObjectSet<PostReplyEmailType>("PostReplyEmailType");
                }

                return _postReplyEmailType;
            }
        }

        private ObjectSet<RefactorLog> _refactorLog;
        public ObjectSet<RefactorLog> RefactorLog
        {
            get
            {
                if (_refactorLog == null)
                {
                    _refactorLog = base.CreateObjectSet<RefactorLog>("RefactorLog");
                }

                return _refactorLog;
            }
        }

        private ObjectSet<State> _state;
        public ObjectSet<State> State
        {
            get
            {
                if (_state == null)
                {
                    _state = base.CreateObjectSet<State>("State");
                }

                return _state;
            }
        }

        private ObjectSet<Team> _team;
        public ObjectSet<Team> Team
        {
            get
            {
                if (_team == null)
                {
                    _team = base.CreateObjectSet<Team>("Team");
                }

                return _team;
            }
        }

        private ObjectSet<Upload> _upload;
        public ObjectSet<Upload> Upload
        {
            get
            {
                if (_upload == null)
                {
                    _upload = base.CreateObjectSet<Upload>("Upload");
                }

                return _upload;
            }
        }

        private ObjectSet<UploadCategory> _uploadCategory;
        public ObjectSet<UploadCategory> UploadCategory
        {
            get
            {
                if (_uploadCategory == null)
                {
                    _uploadCategory = base.CreateObjectSet<UploadCategory>("UploadCategory");
                }

                return _uploadCategory;
            }
        }

        private ObjectSet<UploadType> _uploadType;
        public ObjectSet<UploadType> UploadType
        {
            get
            {
                if (_uploadType == null)
                {
                    _uploadType = base.CreateObjectSet<UploadType>("UploadType");
                }

                return _uploadType;
            }
        }

        private ObjectSet<UserAddress> _userAddress;
        public ObjectSet<UserAddress> UserAddress
        {
            get
            {
                if (_userAddress == null)
                {
                    _userAddress = base.CreateObjectSet<UserAddress>("UserAddress");
                }

                return _userAddress;
            }
        }

        private ObjectSet<UserEmail> _userEmail;
        public ObjectSet<UserEmail> UserEmail
        {
            get
            {
                if (_userEmail == null)
                {
                    _userEmail = base.CreateObjectSet<UserEmail>("UserEmail");
                }

                return _userEmail;
            }
        }

        private ObjectSet<UserPhone> _userPhone;
        public ObjectSet<UserPhone> UserPhone
        {
            get
            {
                if (_userPhone == null)
                {
                    _userPhone = base.CreateObjectSet<UserPhone>("UserPhone");
                }

                return _userPhone;
            }
        }

        private ObjectSet<UserStatus> _userStatus;
        public ObjectSet<UserStatus> UserStatus
        {
            get
            {
                if (_userStatus == null)
                {
                    _userStatus = base.CreateObjectSet<UserStatus>("UserStatus");
                }

                return _userStatus;
            }
        }

        private ObjectSet<UserUpload> _userUpload;
        public ObjectSet<UserUpload> UserUpload
        {
            get
            {
                if (_userUpload == null)
                {
                    _userUpload = base.CreateObjectSet<UserUpload>("UserUpload");
                }

                return _userUpload;
            }
        }
        #endregion
    }
}
#pragma warning restore 1591
#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Donation.
    /// </summary>
    public static partial class DonationExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Donation GetByKey(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(d => d.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Donation GetByIdentification(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Donation>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIdentification(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 identification)
        {
            return queryable.Where(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIdentification(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.Identification != identification);
                default:
                    return queryable.Where(d => d.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIdentification(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIdentification(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(d => values.Contains(d.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFundId(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 fundId)
        {
            return queryable.Where(d => d.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFundId(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.FundId != fundId);
                default:
                    return queryable.Where(d => d.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFundId(this IQueryable<Malldub.Data.Donation> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFundId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(d => values.Contains(d.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOrderId(this IQueryable<Malldub.Data.Donation> queryable, System.Int32? orderId)
        {
            // support nulls
            return orderId == null 
                ? queryable.Where(d => d.OrderId == null) 
                : queryable.Where(d => d.OrderId == orderId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOrderId(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Int32? orderId)
        {
            if (orderId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("orderId", "Parameter 'orderId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.OrderId > orderId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.OrderId >= orderId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.OrderId < orderId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.OrderId <= orderId);
                case ComparisonOperator.NotEquals:
                    return orderId == null 
                        ? queryable.Where(d => d.OrderId != null) 
                        : queryable.Where(d => d.OrderId != orderId);
                default:
                    return orderId == null 
                        ? queryable.Where(d => d.OrderId == null) 
                        : queryable.Where(d => d.OrderId == orderId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderId">OrderId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOrderId(this IQueryable<Malldub.Data.Donation> queryable, System.Int32? orderId, params System.Int32?[] additionalValues)
        {
            var orderIdList = new List<System.Int32?> { orderId };

            if (additionalValues != null)
                orderIdList.AddRange(additionalValues);
            else
                orderIdList.Add(null);

            if (orderIdList.Count == 1)
                return queryable.ByOrderId(orderIdList[0]);

            return queryable.ByOrderId(orderIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OrderId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOrderId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Donation, bool>("OrderId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FeeTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeTypeId">FeeTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFeeTypeId(this IQueryable<Malldub.Data.Donation> queryable, System.String feeTypeId)
        {
            return queryable.Where(d => d.FeeTypeId == feeTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FeeTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeTypeId">FeeTypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFeeTypeId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String feeTypeId)
        {
            if (feeTypeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("feeTypeId", "Parameter 'feeTypeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.FeeTypeId.Contains(feeTypeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.FeeTypeId.StartsWith(feeTypeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.FeeTypeId.EndsWith(feeTypeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.FeeTypeId.Contains(feeTypeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.FeeTypeId != feeTypeId);
                default:
                    return queryable.Where(d => d.FeeTypeId == feeTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FeeTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeTypeId">FeeTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFeeTypeId(this IQueryable<Malldub.Data.Donation> queryable, System.String feeTypeId, params System.String[] additionalValues)
        {
            var feeTypeIdList = new List<System.String> { feeTypeId };

            if (additionalValues != null)
                feeTypeIdList.AddRange(additionalValues);

            if (feeTypeIdList.Count == 1)
                return queryable.ByFeeTypeId(feeTypeIdList[0]);

            return queryable.ByFeeTypeId(feeTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.FeeTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByFeeTypeId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.FeeTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByStatusId(this IQueryable<Malldub.Data.Donation> queryable, System.String statusId)
        {
            return queryable.Where(d => d.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByStatusId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.StatusId != statusId);
                default:
                    return queryable.Where(d => d.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByStatusId(this IQueryable<Malldub.Data.Donation> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByStatusId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal amount)
        {
            return queryable.Where(d => d.Amount == amount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByAmount(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Decimal amount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.Amount > amount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.Amount >= amount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.Amount < amount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.Amount <= amount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.Amount != amount);
                default:
                    return queryable.Where(d => d.Amount == amount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal amount, params System.Decimal[] additionalValues)
        {
            var amountList = new List<System.Decimal> { amount };

            if (additionalValues != null)
                amountList.AddRange(additionalValues);

            if (amountList.Count == 1)
                return queryable.ByAmount(amountList[0]);

            return queryable.ByAmount(amountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByAmount(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(d => values.Contains(d.Amount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ProcessingFee"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="processingFee">ProcessingFee to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByProcessingFee(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal processingFee)
        {
            return queryable.Where(d => d.ProcessingFee == processingFee);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ProcessingFee"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="processingFee">ProcessingFee to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByProcessingFee(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Decimal processingFee)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.ProcessingFee > processingFee);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.ProcessingFee >= processingFee);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.ProcessingFee < processingFee);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.ProcessingFee <= processingFee);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.ProcessingFee != processingFee);
                default:
                    return queryable.Where(d => d.ProcessingFee == processingFee);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ProcessingFee"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="processingFee">ProcessingFee to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByProcessingFee(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal processingFee, params System.Decimal[] additionalValues)
        {
            var processingFeeList = new List<System.Decimal> { processingFee };

            if (additionalValues != null)
                processingFeeList.AddRange(additionalValues);

            if (processingFeeList.Count == 1)
                return queryable.ByProcessingFee(processingFeeList[0]);

            return queryable.ByProcessingFee(processingFeeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ProcessingFee"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByProcessingFee(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(d => values.Contains(d.ProcessingFee));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.BeneficiaryAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beneficiaryAmount">BeneficiaryAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByBeneficiaryAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal beneficiaryAmount)
        {
            return queryable.Where(d => d.BeneficiaryAmount == beneficiaryAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.BeneficiaryAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beneficiaryAmount">BeneficiaryAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByBeneficiaryAmount(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Decimal beneficiaryAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.BeneficiaryAmount > beneficiaryAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.BeneficiaryAmount >= beneficiaryAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.BeneficiaryAmount < beneficiaryAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.BeneficiaryAmount <= beneficiaryAmount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.BeneficiaryAmount != beneficiaryAmount);
                default:
                    return queryable.Where(d => d.BeneficiaryAmount == beneficiaryAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.BeneficiaryAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beneficiaryAmount">BeneficiaryAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByBeneficiaryAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal beneficiaryAmount, params System.Decimal[] additionalValues)
        {
            var beneficiaryAmountList = new List<System.Decimal> { beneficiaryAmount };

            if (additionalValues != null)
                beneficiaryAmountList.AddRange(additionalValues);

            if (beneficiaryAmountList.Count == 1)
                return queryable.ByBeneficiaryAmount(beneficiaryAmountList[0]);

            return queryable.ByBeneficiaryAmount(beneficiaryAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.BeneficiaryAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByBeneficiaryAmount(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(d => values.Contains(d.BeneficiaryAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SystemAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemAmount">SystemAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySystemAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal systemAmount)
        {
            return queryable.Where(d => d.SystemAmount == systemAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SystemAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemAmount">SystemAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySystemAmount(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Decimal systemAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.SystemAmount > systemAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.SystemAmount >= systemAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.SystemAmount < systemAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.SystemAmount <= systemAmount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.SystemAmount != systemAmount);
                default:
                    return queryable.Where(d => d.SystemAmount == systemAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SystemAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemAmount">SystemAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySystemAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Decimal systemAmount, params System.Decimal[] additionalValues)
        {
            var systemAmountList = new List<System.Decimal> { systemAmount };

            if (additionalValues != null)
                systemAmountList.AddRange(additionalValues);

            if (systemAmountList.Count == 1)
                return queryable.BySystemAmount(systemAmountList[0]);

            return queryable.BySystemAmount(systemAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SystemAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySystemAmount(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(d => values.Contains(d.SystemAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorName">DonorName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorName(this IQueryable<Malldub.Data.Donation> queryable, System.String donorName)
        {
            return queryable.Where(d => d.DonorName == donorName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorName">DonorName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorName(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String donorName)
        {
            if (donorName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("donorName", "Parameter 'donorName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.DonorName.Contains(donorName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.DonorName.StartsWith(donorName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.DonorName.EndsWith(donorName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.DonorName.Contains(donorName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.DonorName != donorName);
                default:
                    return queryable.Where(d => d.DonorName == donorName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorName">DonorName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorName(this IQueryable<Malldub.Data.Donation> queryable, System.String donorName, params System.String[] additionalValues)
        {
            var donorNameList = new List<System.String> { donorName };

            if (additionalValues != null)
                donorNameList.AddRange(additionalValues);

            if (donorNameList.Count == 1)
                return queryable.ByDonorName(donorNameList[0]);

            return queryable.ByDonorName(donorNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorName(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.DonorName));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByEmail(this IQueryable<Malldub.Data.Donation> queryable, System.String email)
        {
            return queryable.Where(d => d.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByEmail(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.Email != email);
                default:
                    return queryable.Where(d => d.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByEmail(this IQueryable<Malldub.Data.Donation> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByEmail(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMessage(this IQueryable<Malldub.Data.Donation> queryable, System.String message)
        {
            // support nulls
            return message == null 
                ? queryable.Where(d => d.Message == null) 
                : queryable.Where(d => d.Message == message);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMessage(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String message)
        {
            if (message == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("message", "Parameter 'message' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Message.Contains(message));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Message.StartsWith(message));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Message.EndsWith(message));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Message.Contains(message) == false);
                case ContainmentOperator.NotEquals:
                    return message == null 
                        ? queryable.Where(d => d.Message != null) 
                        : queryable.Where(d => d.Message != message);
                default:
                    return message == null 
                        ? queryable.Where(d => d.Message == null) 
                        : queryable.Where(d => d.Message == message);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMessage(this IQueryable<Malldub.Data.Donation> queryable, System.String message, params System.String[] additionalValues)
        {
            var messageList = new List<System.String> { message };

            if (additionalValues != null)
                messageList.AddRange(additionalValues);
            else
                messageList.Add(null);

            if (messageList.Count == 1)
                return queryable.ByMessage(messageList[0]);

            return queryable.ByMessage(messageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMessage(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Donation, bool>("Message", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OfflineDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="offlineDonation">OfflineDonation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOfflineDonation(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean offlineDonation)
        {
            return queryable.Where(d => d.OfflineDonation == offlineDonation);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OfflineDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="offlineDonation">OfflineDonation to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOfflineDonation(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Boolean offlineDonation)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.OfflineDonation != offlineDonation);
                default:
                    return queryable.Where(d => d.OfflineDonation == offlineDonation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OfflineDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="offlineDonation">OfflineDonation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOfflineDonation(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean offlineDonation, params System.Boolean[] additionalValues)
        {
            var offlineDonationList = new List<System.Boolean> { offlineDonation };

            if (additionalValues != null)
                offlineDonationList.AddRange(additionalValues);

            if (offlineDonationList.Count == 1)
                return queryable.ByOfflineDonation(offlineDonationList[0]);

            return queryable.ByOfflineDonation(offlineDonationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.OfflineDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByOfflineDonation(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.OfflineDonation));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ThankYouNoteSent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thankYouNoteSent">ThankYouNoteSent to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByThankYouNoteSent(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean thankYouNoteSent)
        {
            return queryable.Where(d => d.ThankYouNoteSent == thankYouNoteSent);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ThankYouNoteSent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thankYouNoteSent">ThankYouNoteSent to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByThankYouNoteSent(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Boolean thankYouNoteSent)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.ThankYouNoteSent != thankYouNoteSent);
                default:
                    return queryable.Where(d => d.ThankYouNoteSent == thankYouNoteSent);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ThankYouNoteSent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thankYouNoteSent">ThankYouNoteSent to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByThankYouNoteSent(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean thankYouNoteSent, params System.Boolean[] additionalValues)
        {
            var thankYouNoteSentList = new List<System.Boolean> { thankYouNoteSent };

            if (additionalValues != null)
                thankYouNoteSentList.AddRange(additionalValues);

            if (thankYouNoteSentList.Count == 1)
                return queryable.ByThankYouNoteSent(thankYouNoteSentList[0]);

            return queryable.ByThankYouNoteSent(thankYouNoteSentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.ThankYouNoteSent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByThankYouNoteSent(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.ThankYouNoteSent));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDateEntered(this IQueryable<Malldub.Data.Donation> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(d => d.DateEntered == null) 
                : queryable.Where(d => d.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDateEntered(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(d => d.DateEntered != null) 
                        : queryable.Where(d => d.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(d => d.DateEntered == null) 
                        : queryable.Where(d => d.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDateEntered(this IQueryable<Malldub.Data.Donation> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDateEntered(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Donation, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateAmount">IsPrivateAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean isPrivateAmount)
        {
            return queryable.Where(d => d.IsPrivateAmount == isPrivateAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateAmount">IsPrivateAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateAmount(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrivateAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IsPrivateAmount != isPrivateAmount);
                default:
                    return queryable.Where(d => d.IsPrivateAmount == isPrivateAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateAmount">IsPrivateAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateAmount(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean isPrivateAmount, params System.Boolean[] additionalValues)
        {
            var isPrivateAmountList = new List<System.Boolean> { isPrivateAmount };

            if (additionalValues != null)
                isPrivateAmountList.AddRange(additionalValues);

            if (isPrivateAmountList.Count == 1)
                return queryable.ByIsPrivateAmount(isPrivateAmountList[0]);

            return queryable.ByIsPrivateAmount(isPrivateAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateAmount(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.IsPrivateAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateDonorName">IsPrivateDonorName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateDonorName(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean isPrivateDonorName)
        {
            return queryable.Where(d => d.IsPrivateDonorName == isPrivateDonorName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateDonorName">IsPrivateDonorName to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateDonorName(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrivateDonorName)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IsPrivateDonorName != isPrivateDonorName);
                default:
                    return queryable.Where(d => d.IsPrivateDonorName == isPrivateDonorName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivateDonorName">IsPrivateDonorName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateDonorName(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean isPrivateDonorName, params System.Boolean[] additionalValues)
        {
            var isPrivateDonorNameList = new List<System.Boolean> { isPrivateDonorName };

            if (additionalValues != null)
                isPrivateDonorNameList.AddRange(additionalValues);

            if (isPrivateDonorNameList.Count == 1)
                return queryable.ByIsPrivateDonorName(isPrivateDonorNameList[0]);

            return queryable.ByIsPrivateDonorName(isPrivateDonorNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.IsPrivateDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByIsPrivateDonorName(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.IsPrivateDonorName));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.CostsCovered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="costsCovered">CostsCovered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByCostsCovered(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean costsCovered)
        {
            return queryable.Where(d => d.CostsCovered == costsCovered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.CostsCovered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="costsCovered">CostsCovered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByCostsCovered(this IQueryable<Malldub.Data.Donation> queryable, ComparisonOperator comparisonOperator, System.Boolean costsCovered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.CostsCovered != costsCovered);
                default:
                    return queryable.Where(d => d.CostsCovered == costsCovered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.CostsCovered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="costsCovered">CostsCovered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByCostsCovered(this IQueryable<Malldub.Data.Donation> queryable, System.Boolean costsCovered, params System.Boolean[] additionalValues)
        {
            var costsCoveredList = new List<System.Boolean> { costsCovered };

            if (additionalValues != null)
                costsCoveredList.AddRange(additionalValues);

            if (costsCoveredList.Count == 1)
                return queryable.ByCostsCovered(costsCoveredList[0]);

            return queryable.ByCostsCovered(costsCoveredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.CostsCovered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByCostsCovered(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.CostsCovered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorUserId">DonorUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorUserId(this IQueryable<Malldub.Data.Donation> queryable, System.String donorUserId)
        {
            return queryable.Where(d => d.DonorUserId == donorUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorUserId">DonorUserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorUserId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String donorUserId)
        {
            if (donorUserId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("donorUserId", "Parameter 'donorUserId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.DonorUserId.Contains(donorUserId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.DonorUserId.StartsWith(donorUserId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.DonorUserId.EndsWith(donorUserId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.DonorUserId.Contains(donorUserId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.DonorUserId != donorUserId);
                default:
                    return queryable.Where(d => d.DonorUserId == donorUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donorUserId">DonorUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorUserId(this IQueryable<Malldub.Data.Donation> queryable, System.String donorUserId, params System.String[] additionalValues)
        {
            var donorUserIdList = new List<System.String> { donorUserId };

            if (additionalValues != null)
                donorUserIdList.AddRange(additionalValues);

            if (donorUserIdList.Count == 1)
                return queryable.ByDonorUserId(donorUserIdList[0]);

            return queryable.ByDonorUserId(donorUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.DonorUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByDonorUserId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.DonorUserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.MemberUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="memberUserId">MemberUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMemberUserId(this IQueryable<Malldub.Data.Donation> queryable, System.String memberUserId)
        {
            // support nulls
            return memberUserId == null 
                ? queryable.Where(d => d.MemberUserId == null) 
                : queryable.Where(d => d.MemberUserId == memberUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.MemberUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="memberUserId">MemberUserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMemberUserId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String memberUserId)
        {
            if (memberUserId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("memberUserId", "Parameter 'memberUserId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.MemberUserId.Contains(memberUserId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.MemberUserId.StartsWith(memberUserId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.MemberUserId.EndsWith(memberUserId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.MemberUserId.Contains(memberUserId) == false);
                case ContainmentOperator.NotEquals:
                    return memberUserId == null 
                        ? queryable.Where(d => d.MemberUserId != null) 
                        : queryable.Where(d => d.MemberUserId != memberUserId);
                default:
                    return memberUserId == null 
                        ? queryable.Where(d => d.MemberUserId == null) 
                        : queryable.Where(d => d.MemberUserId == memberUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.MemberUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="memberUserId">MemberUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMemberUserId(this IQueryable<Malldub.Data.Donation> queryable, System.String memberUserId, params System.String[] additionalValues)
        {
            var memberUserIdList = new List<System.String> { memberUserId };

            if (additionalValues != null)
                memberUserIdList.AddRange(additionalValues);
            else
                memberUserIdList.Add(null);

            if (memberUserIdList.Count == 1)
                return queryable.ByMemberUserId(memberUserIdList[0]);

            return queryable.ByMemberUserId(memberUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.MemberUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> ByMemberUserId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Donation, bool>("MemberUserId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTypeId">SubscriptionTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionTypeId(this IQueryable<Malldub.Data.Donation> queryable, System.String subscriptionTypeId)
        {
            return queryable.Where(d => d.SubscriptionTypeId == subscriptionTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTypeId">SubscriptionTypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionTypeId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String subscriptionTypeId)
        {
            if (subscriptionTypeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subscriptionTypeId", "Parameter 'subscriptionTypeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.SubscriptionTypeId.Contains(subscriptionTypeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.SubscriptionTypeId.StartsWith(subscriptionTypeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.SubscriptionTypeId.EndsWith(subscriptionTypeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.SubscriptionTypeId.Contains(subscriptionTypeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.SubscriptionTypeId != subscriptionTypeId);
                default:
                    return queryable.Where(d => d.SubscriptionTypeId == subscriptionTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTypeId">SubscriptionTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionTypeId(this IQueryable<Malldub.Data.Donation> queryable, System.String subscriptionTypeId, params System.String[] additionalValues)
        {
            var subscriptionTypeIdList = new List<System.String> { subscriptionTypeId };

            if (additionalValues != null)
                subscriptionTypeIdList.AddRange(additionalValues);

            if (subscriptionTypeIdList.Count == 1)
                return queryable.BySubscriptionTypeId(subscriptionTypeIdList[0]);

            return queryable.BySubscriptionTypeId(subscriptionTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionTypeId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.SubscriptionTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionId">SubscriptionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionId(this IQueryable<Malldub.Data.Donation> queryable, System.String subscriptionId)
        {
            // support nulls
            return subscriptionId == null 
                ? queryable.Where(d => d.SubscriptionId == null) 
                : queryable.Where(d => d.SubscriptionId == subscriptionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionId">SubscriptionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionId(this IQueryable<Malldub.Data.Donation> queryable, ContainmentOperator containmentOperator, System.String subscriptionId)
        {
            if (subscriptionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subscriptionId", "Parameter 'subscriptionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.SubscriptionId.Contains(subscriptionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.SubscriptionId.StartsWith(subscriptionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.SubscriptionId.EndsWith(subscriptionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.SubscriptionId.Contains(subscriptionId) == false);
                case ContainmentOperator.NotEquals:
                    return subscriptionId == null 
                        ? queryable.Where(d => d.SubscriptionId != null) 
                        : queryable.Where(d => d.SubscriptionId != subscriptionId);
                default:
                    return subscriptionId == null 
                        ? queryable.Where(d => d.SubscriptionId == null) 
                        : queryable.Where(d => d.SubscriptionId == subscriptionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionId">SubscriptionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionId(this IQueryable<Malldub.Data.Donation> queryable, System.String subscriptionId, params System.String[] additionalValues)
        {
            var subscriptionIdList = new List<System.String> { subscriptionId };

            if (additionalValues != null)
                subscriptionIdList.AddRange(additionalValues);
            else
                subscriptionIdList.Add(null);

            if (subscriptionIdList.Count == 1)
                return queryable.BySubscriptionId(subscriptionIdList[0]);

            return queryable.BySubscriptionId(subscriptionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Donation.SubscriptionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Donation> BySubscriptionId(this IQueryable<Malldub.Data.Donation> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Donation, bool>("SubscriptionId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Donation> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Donation.FirstOrDefault(d => d.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Donation> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Donation.FirstOrDefault(d => d.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

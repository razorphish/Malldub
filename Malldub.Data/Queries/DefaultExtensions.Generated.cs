#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Default.
    /// </summary>
    public static partial class DefaultExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Default GetByKey(this IQueryable<Malldub.Data.Default> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Default>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(d => d.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Default GetByIdentification(this IQueryable<Malldub.Data.Default> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Default>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.IsPrimary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrimary">IsPrimary to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIsPrimary(this IQueryable<Malldub.Data.Default> queryable, System.Boolean isPrimary)
        {
            return queryable.Where(d => d.IsPrimary == isPrimary);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.IsPrimary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrimary">IsPrimary to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIsPrimary(this IQueryable<Malldub.Data.Default> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrimary)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.IsPrimary != isPrimary);
                default:
                    return queryable.Where(d => d.IsPrimary == isPrimary);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.IsPrimary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrimary">IsPrimary to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIsPrimary(this IQueryable<Malldub.Data.Default> queryable, System.Boolean isPrimary, params System.Boolean[] additionalValues)
        {
            var isPrimaryList = new List<System.Boolean> { isPrimary };

            if (additionalValues != null)
                isPrimaryList.AddRange(additionalValues);

            if (isPrimaryList.Count == 1)
                return queryable.ByIsPrimary(isPrimaryList[0]);

            return queryable.ByIsPrimary(isPrimaryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.IsPrimary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIsPrimary(this IQueryable<Malldub.Data.Default> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(d => values.Contains(d.IsPrimary));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByDateEntered(this IQueryable<Malldub.Data.Default> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(d => d.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByDateEntered(this IQueryable<Malldub.Data.Default> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.DateEntered != dateEntered);
                default:
                    return queryable.Where(d => d.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByDateEntered(this IQueryable<Malldub.Data.Default> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByDateEntered(this IQueryable<Malldub.Data.Default> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(d => values.Contains(d.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIdentification(this IQueryable<Malldub.Data.Default> queryable, System.Int32 identification)
        {
            return queryable.Where(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIdentification(this IQueryable<Malldub.Data.Default> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.Identification != identification);
                default:
                    return queryable.Where(d => d.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIdentification(this IQueryable<Malldub.Data.Default> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Default.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Default> ByIdentification(this IQueryable<Malldub.Data.Default> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(d => values.Contains(d.Identification));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Default> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Default.FirstOrDefault(d => d.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Default> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Default.FirstOrDefault(d => d.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

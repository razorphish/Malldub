#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Auction.
    /// </summary>
    public static partial class AuctionExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Auction GetByKey(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(a => a.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Auction GetByIdentification(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Auction>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIdentification(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 identification)
        {
            return queryable.Where(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIdentification(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Identification != identification);
                default:
                    return queryable.Where(a => a.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIdentification(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIdentification(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StartingPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startingPrice">StartingPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStartingPrice(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal startingPrice)
        {
            return queryable.Where(a => a.StartingPrice == startingPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StartingPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startingPrice">StartingPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStartingPrice(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Decimal startingPrice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.StartingPrice > startingPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.StartingPrice >= startingPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.StartingPrice < startingPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.StartingPrice <= startingPrice);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.StartingPrice != startingPrice);
                default:
                    return queryable.Where(a => a.StartingPrice == startingPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StartingPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startingPrice">StartingPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStartingPrice(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal startingPrice, params System.Decimal[] additionalValues)
        {
            var startingPriceList = new List<System.Decimal> { startingPrice };

            if (additionalValues != null)
                startingPriceList.AddRange(additionalValues);

            if (startingPriceList.Count == 1)
                return queryable.ByStartingPrice(startingPriceList[0]);

            return queryable.ByStartingPrice(startingPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StartingPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStartingPrice(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(a => values.Contains(a.StartingPrice));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Duration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="duration">Duration to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByDuration(this IQueryable<Malldub.Data.Auction> queryable, System.Byte duration)
        {
            return queryable.Where(a => a.Duration == duration);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Duration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="duration">Duration to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByDuration(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Byte duration)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Duration > duration);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Duration >= duration);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Duration < duration);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Duration <= duration);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Duration != duration);
                default:
                    return queryable.Where(a => a.Duration == duration);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Duration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="duration">Duration to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByDuration(this IQueryable<Malldub.Data.Auction> queryable, System.Byte duration, params System.Byte[] additionalValues)
        {
            var durationList = new List<System.Byte> { duration };

            if (additionalValues != null)
                durationList.AddRange(additionalValues);

            if (durationList.Count == 1)
                return queryable.ByDuration(durationList[0]);

            return queryable.ByDuration(durationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Duration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByDuration(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Byte> values)
        {
            return queryable.Where(a => values.Contains(a.Duration));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BuyItNowPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="buyItNowPrice">BuyItNowPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBuyItNowPrice(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? buyItNowPrice)
        {
            // support nulls
            return buyItNowPrice == null 
                ? queryable.Where(a => a.BuyItNowPrice == null) 
                : queryable.Where(a => a.BuyItNowPrice == buyItNowPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BuyItNowPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="buyItNowPrice">BuyItNowPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBuyItNowPrice(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Decimal? buyItNowPrice)
        {
            if (buyItNowPrice == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("buyItNowPrice", "Parameter 'buyItNowPrice' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.BuyItNowPrice > buyItNowPrice);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.BuyItNowPrice >= buyItNowPrice);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.BuyItNowPrice < buyItNowPrice);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.BuyItNowPrice <= buyItNowPrice);
                case ComparisonOperator.NotEquals:
                    return buyItNowPrice == null 
                        ? queryable.Where(a => a.BuyItNowPrice != null) 
                        : queryable.Where(a => a.BuyItNowPrice != buyItNowPrice);
                default:
                    return buyItNowPrice == null 
                        ? queryable.Where(a => a.BuyItNowPrice == null) 
                        : queryable.Where(a => a.BuyItNowPrice == buyItNowPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BuyItNowPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="buyItNowPrice">BuyItNowPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBuyItNowPrice(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? buyItNowPrice, params System.Decimal?[] additionalValues)
        {
            var buyItNowPriceList = new List<System.Decimal?> { buyItNowPrice };

            if (additionalValues != null)
                buyItNowPriceList.AddRange(additionalValues);
            else
                buyItNowPriceList.Add(null);

            if (buyItNowPriceList.Count == 1)
                return queryable.ByBuyItNowPrice(buyItNowPriceList[0]);

            return queryable.ByBuyItNowPrice(buyItNowPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BuyItNowPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBuyItNowPrice(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("BuyItNowPrice", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.ReserveAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reserveAmount">ReserveAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByReserveAmount(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? reserveAmount)
        {
            // support nulls
            return reserveAmount == null 
                ? queryable.Where(a => a.ReserveAmount == null) 
                : queryable.Where(a => a.ReserveAmount == reserveAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.ReserveAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reserveAmount">ReserveAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByReserveAmount(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Decimal? reserveAmount)
        {
            if (reserveAmount == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("reserveAmount", "Parameter 'reserveAmount' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ReserveAmount > reserveAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ReserveAmount >= reserveAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ReserveAmount < reserveAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ReserveAmount <= reserveAmount);
                case ComparisonOperator.NotEquals:
                    return reserveAmount == null 
                        ? queryable.Where(a => a.ReserveAmount != null) 
                        : queryable.Where(a => a.ReserveAmount != reserveAmount);
                default:
                    return reserveAmount == null 
                        ? queryable.Where(a => a.ReserveAmount == null) 
                        : queryable.Where(a => a.ReserveAmount == reserveAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.ReserveAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="reserveAmount">ReserveAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByReserveAmount(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? reserveAmount, params System.Decimal?[] additionalValues)
        {
            var reserveAmountList = new List<System.Decimal?> { reserveAmount };

            if (additionalValues != null)
                reserveAmountList.AddRange(additionalValues);
            else
                reserveAmountList.Add(null);

            if (reserveAmountList.Count == 1)
                return queryable.ByReserveAmount(reserveAmountList[0]);

            return queryable.ByReserveAmount(reserveAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.ReserveAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByReserveAmount(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("ReserveAmount", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.CurrentHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currentHighBid">CurrentHighBid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByCurrentHighBid(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? currentHighBid)
        {
            // support nulls
            return currentHighBid == null 
                ? queryable.Where(a => a.CurrentHighBid == null) 
                : queryable.Where(a => a.CurrentHighBid == currentHighBid);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.CurrentHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currentHighBid">CurrentHighBid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByCurrentHighBid(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Decimal? currentHighBid)
        {
            if (currentHighBid == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("currentHighBid", "Parameter 'currentHighBid' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.CurrentHighBid > currentHighBid);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.CurrentHighBid >= currentHighBid);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.CurrentHighBid < currentHighBid);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.CurrentHighBid <= currentHighBid);
                case ComparisonOperator.NotEquals:
                    return currentHighBid == null 
                        ? queryable.Where(a => a.CurrentHighBid != null) 
                        : queryable.Where(a => a.CurrentHighBid != currentHighBid);
                default:
                    return currentHighBid == null 
                        ? queryable.Where(a => a.CurrentHighBid == null) 
                        : queryable.Where(a => a.CurrentHighBid == currentHighBid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.CurrentHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currentHighBid">CurrentHighBid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByCurrentHighBid(this IQueryable<Malldub.Data.Auction> queryable, System.Decimal? currentHighBid, params System.Decimal?[] additionalValues)
        {
            var currentHighBidList = new List<System.Decimal?> { currentHighBid };

            if (additionalValues != null)
                currentHighBidList.AddRange(additionalValues);
            else
                currentHighBidList.Add(null);

            if (currentHighBidList.Count == 1)
                return queryable.ByCurrentHighBid(currentHighBidList[0]);

            return queryable.ByCurrentHighBid(currentHighBidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.CurrentHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByCurrentHighBid(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("CurrentHighBid", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BeginTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beginTime">BeginTime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBeginTime(this IQueryable<Malldub.Data.Auction> queryable, System.DateTime? beginTime)
        {
            // support nulls
            return beginTime == null 
                ? queryable.Where(a => a.BeginTime == null) 
                : queryable.Where(a => a.BeginTime == beginTime);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BeginTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beginTime">BeginTime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBeginTime(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.DateTime? beginTime)
        {
            if (beginTime == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("beginTime", "Parameter 'beginTime' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.BeginTime > beginTime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.BeginTime >= beginTime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.BeginTime < beginTime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.BeginTime <= beginTime);
                case ComparisonOperator.NotEquals:
                    return beginTime == null 
                        ? queryable.Where(a => a.BeginTime != null) 
                        : queryable.Where(a => a.BeginTime != beginTime);
                default:
                    return beginTime == null 
                        ? queryable.Where(a => a.BeginTime == null) 
                        : queryable.Where(a => a.BeginTime == beginTime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BeginTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="beginTime">BeginTime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBeginTime(this IQueryable<Malldub.Data.Auction> queryable, System.DateTime? beginTime, params System.DateTime?[] additionalValues)
        {
            var beginTimeList = new List<System.DateTime?> { beginTime };

            if (additionalValues != null)
                beginTimeList.AddRange(additionalValues);
            else
                beginTimeList.Add(null);

            if (beginTimeList.Count == 1)
                return queryable.ByBeginTime(beginTimeList[0]);

            return queryable.ByBeginTime(beginTimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.BeginTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByBeginTime(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("BeginTime", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.EndTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endTime">EndTime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByEndTime(this IQueryable<Malldub.Data.Auction> queryable, System.DateTime? endTime)
        {
            // support nulls
            return endTime == null 
                ? queryable.Where(a => a.EndTime == null) 
                : queryable.Where(a => a.EndTime == endTime);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.EndTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endTime">EndTime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByEndTime(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.DateTime? endTime)
        {
            if (endTime == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("endTime", "Parameter 'endTime' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.EndTime > endTime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.EndTime >= endTime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.EndTime < endTime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.EndTime <= endTime);
                case ComparisonOperator.NotEquals:
                    return endTime == null 
                        ? queryable.Where(a => a.EndTime != null) 
                        : queryable.Where(a => a.EndTime != endTime);
                default:
                    return endTime == null 
                        ? queryable.Where(a => a.EndTime == null) 
                        : queryable.Where(a => a.EndTime == endTime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.EndTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endTime">EndTime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByEndTime(this IQueryable<Malldub.Data.Auction> queryable, System.DateTime? endTime, params System.DateTime?[] additionalValues)
        {
            var endTimeList = new List<System.DateTime?> { endTime };

            if (additionalValues != null)
                endTimeList.AddRange(additionalValues);
            else
                endTimeList.Add(null);

            if (endTimeList.Count == 1)
                return queryable.ByEndTime(endTimeList[0]);

            return queryable.ByEndTime(endTimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.EndTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByEndTime(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("EndTime", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.HasEnded"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="hasEnded">HasEnded to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByHasEnded(this IQueryable<Malldub.Data.Auction> queryable, System.Boolean hasEnded)
        {
            return queryable.Where(a => a.HasEnded == hasEnded);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.HasEnded"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="hasEnded">HasEnded to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByHasEnded(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Boolean hasEnded)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.HasEnded != hasEnded);
                default:
                    return queryable.Where(a => a.HasEnded == hasEnded);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.HasEnded"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="hasEnded">HasEnded to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByHasEnded(this IQueryable<Malldub.Data.Auction> queryable, System.Boolean hasEnded, params System.Boolean[] additionalValues)
        {
            var hasEndedList = new List<System.Boolean> { hasEnded };

            if (additionalValues != null)
                hasEndedList.AddRange(additionalValues);

            if (hasEndedList.Count == 1)
                return queryable.ByHasEnded(hasEndedList[0]);

            return queryable.ByHasEnded(hasEndedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.HasEnded"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByHasEnded(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(a => values.Contains(a.HasEnded));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Increment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="increment">Increment to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIncrement(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 increment)
        {
            return queryable.Where(a => a.Increment == increment);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Increment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="increment">Increment to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIncrement(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Int32 increment)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Increment > increment);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Increment >= increment);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Increment < increment);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Increment <= increment);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Increment != increment);
                default:
                    return queryable.Where(a => a.Increment == increment);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Increment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="increment">Increment to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIncrement(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 increment, params System.Int32[] additionalValues)
        {
            var incrementList = new List<System.Int32> { increment };

            if (additionalValues != null)
                incrementList.AddRange(additionalValues);

            if (incrementList.Count == 1)
                return queryable.ByIncrement(incrementList[0]);

            return queryable.ByIncrement(incrementList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.Increment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByIncrement(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Increment));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStatusId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 statusId)
        {
            return queryable.Where(a => a.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStatusId(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Int32 statusId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.StatusId > statusId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.StatusId >= statusId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.StatusId < statusId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.StatusId <= statusId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.StatusId != statusId);
                default:
                    return queryable.Where(a => a.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStatusId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32 statusId, params System.Int32[] additionalValues)
        {
            var statusIdList = new List<System.Int32> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByStatusId(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.WinningBidderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="winningBidderUserId">WinningBidderUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByWinningBidderUserId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32? winningBidderUserId)
        {
            // support nulls
            return winningBidderUserId == null 
                ? queryable.Where(a => a.WinningBidderUserId == null) 
                : queryable.Where(a => a.WinningBidderUserId == winningBidderUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.WinningBidderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="winningBidderUserId">WinningBidderUserId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByWinningBidderUserId(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Int32? winningBidderUserId)
        {
            if (winningBidderUserId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("winningBidderUserId", "Parameter 'winningBidderUserId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.WinningBidderUserId > winningBidderUserId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.WinningBidderUserId >= winningBidderUserId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.WinningBidderUserId < winningBidderUserId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.WinningBidderUserId <= winningBidderUserId);
                case ComparisonOperator.NotEquals:
                    return winningBidderUserId == null 
                        ? queryable.Where(a => a.WinningBidderUserId != null) 
                        : queryable.Where(a => a.WinningBidderUserId != winningBidderUserId);
                default:
                    return winningBidderUserId == null 
                        ? queryable.Where(a => a.WinningBidderUserId == null) 
                        : queryable.Where(a => a.WinningBidderUserId == winningBidderUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.WinningBidderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="winningBidderUserId">WinningBidderUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByWinningBidderUserId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32? winningBidderUserId, params System.Int32?[] additionalValues)
        {
            var winningBidderUserIdList = new List<System.Int32?> { winningBidderUserId };

            if (additionalValues != null)
                winningBidderUserIdList.AddRange(additionalValues);
            else
                winningBidderUserIdList.Add(null);

            if (winningBidderUserIdList.Count == 1)
                return queryable.ByWinningBidderUserId(winningBidderUserIdList[0]);

            return queryable.ByWinningBidderUserId(winningBidderUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.WinningBidderUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByWinningBidderUserId(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("WinningBidderUserId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByTypeId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32? typeId)
        {
            // support nulls
            return typeId == null 
                ? queryable.Where(a => a.TypeId == null) 
                : queryable.Where(a => a.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByTypeId(this IQueryable<Malldub.Data.Auction> queryable, ComparisonOperator comparisonOperator, System.Int32? typeId)
        {
            if (typeId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.TypeId > typeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.TypeId >= typeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.TypeId < typeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.TypeId <= typeId);
                case ComparisonOperator.NotEquals:
                    return typeId == null 
                        ? queryable.Where(a => a.TypeId != null) 
                        : queryable.Where(a => a.TypeId != typeId);
                default:
                    return typeId == null 
                        ? queryable.Where(a => a.TypeId == null) 
                        : queryable.Where(a => a.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByTypeId(this IQueryable<Malldub.Data.Auction> queryable, System.Int32? typeId, params System.Int32?[] additionalValues)
        {
            var typeIdList = new List<System.Int32?> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);
            else
                typeIdList.Add(null);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Auction.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Auction> ByTypeId(this IQueryable<Malldub.Data.Auction> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Auction, bool>("TypeId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Auction> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Auction.FirstOrDefault(a => a.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Auction> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Auction.FirstOrDefault(a => a.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

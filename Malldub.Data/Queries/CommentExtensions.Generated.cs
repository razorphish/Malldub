#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Comment.
    /// </summary>
    public static partial class CommentExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Comment GetByKey(this IQueryable<Malldub.Data.Comment> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(c => c.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Comment GetByIdentification(this IQueryable<Malldub.Data.Comment> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Comment>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(c => c.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByIdentification(this IQueryable<Malldub.Data.Comment> queryable, System.Int32 identification)
        {
            return queryable.Where(c => c.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByIdentification(this IQueryable<Malldub.Data.Comment> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Identification != identification);
                default:
                    return queryable.Where(c => c.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByIdentification(this IQueryable<Malldub.Data.Comment> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByIdentification(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(c => values.Contains(c.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Post"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="post">Post to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPost(this IQueryable<Malldub.Data.Comment> queryable, System.String post)
        {
            // support nulls
            return post == null 
                ? queryable.Where(c => c.Post == null) 
                : queryable.Where(c => c.Post == post);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Post"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="post">Post to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPost(this IQueryable<Malldub.Data.Comment> queryable, ContainmentOperator containmentOperator, System.String post)
        {
            if (post == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("post", "Parameter 'post' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Post.Contains(post));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Post.StartsWith(post));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Post.EndsWith(post));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Post.Contains(post) == false);
                case ContainmentOperator.NotEquals:
                    return post == null 
                        ? queryable.Where(c => c.Post != null) 
                        : queryable.Where(c => c.Post != post);
                default:
                    return post == null 
                        ? queryable.Where(c => c.Post == null) 
                        : queryable.Where(c => c.Post == post);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Post"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="post">Post to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPost(this IQueryable<Malldub.Data.Comment> queryable, System.String post, params System.String[] additionalValues)
        {
            var postList = new List<System.String> { post };

            if (additionalValues != null)
                postList.AddRange(additionalValues);
            else
                postList.Add(null);

            if (postList.Count == 1)
                return queryable.ByPost(postList[0]);

            return queryable.ByPost(postList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Post"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPost(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("Post", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByUserId(this IQueryable<Malldub.Data.Comment> queryable, System.String userId)
        {
            // support nulls
            return userId == null 
                ? queryable.Where(c => c.UserId == null) 
                : queryable.Where(c => c.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByUserId(this IQueryable<Malldub.Data.Comment> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return userId == null 
                        ? queryable.Where(c => c.UserId != null) 
                        : queryable.Where(c => c.UserId != userId);
                default:
                    return userId == null 
                        ? queryable.Where(c => c.UserId == null) 
                        : queryable.Where(c => c.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByUserId(this IQueryable<Malldub.Data.Comment> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);
            else
                userIdList.Add(null);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByUserId(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("UserId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByGeoId(this IQueryable<Malldub.Data.Comment> queryable, System.Int32? geoId)
        {
            // support nulls
            return geoId == null 
                ? queryable.Where(c => c.GeoId == null) 
                : queryable.Where(c => c.GeoId == geoId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByGeoId(this IQueryable<Malldub.Data.Comment> queryable, ComparisonOperator comparisonOperator, System.Int32? geoId)
        {
            if (geoId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("geoId", "Parameter 'geoId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.GeoId > geoId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.GeoId >= geoId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.GeoId < geoId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.GeoId <= geoId);
                case ComparisonOperator.NotEquals:
                    return geoId == null 
                        ? queryable.Where(c => c.GeoId != null) 
                        : queryable.Where(c => c.GeoId != geoId);
                default:
                    return geoId == null 
                        ? queryable.Where(c => c.GeoId == null) 
                        : queryable.Where(c => c.GeoId == geoId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByGeoId(this IQueryable<Malldub.Data.Comment> queryable, System.Int32? geoId, params System.Int32?[] additionalValues)
        {
            var geoIdList = new List<System.Int32?> { geoId };

            if (additionalValues != null)
                geoIdList.AddRange(additionalValues);
            else
                geoIdList.Add(null);

            if (geoIdList.Count == 1)
                return queryable.ByGeoId(geoIdList[0]);

            return queryable.ByGeoId(geoIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByGeoId(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("GeoId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByDateEntered(this IQueryable<Malldub.Data.Comment> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(c => c.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByDateEntered(this IQueryable<Malldub.Data.Comment> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.DateEntered != dateEntered);
                default:
                    return queryable.Where(c => c.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByDateEntered(this IQueryable<Malldub.Data.Comment> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByDateEntered(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(c => values.Contains(c.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTitle(this IQueryable<Malldub.Data.Comment> queryable, System.String title)
        {
            // support nulls
            return title == null 
                ? queryable.Where(c => c.Title == null) 
                : queryable.Where(c => c.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTitle(this IQueryable<Malldub.Data.Comment> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return title == null 
                        ? queryable.Where(c => c.Title != null) 
                        : queryable.Where(c => c.Title != title);
                default:
                    return title == null 
                        ? queryable.Where(c => c.Title == null) 
                        : queryable.Where(c => c.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTitle(this IQueryable<Malldub.Data.Comment> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);
            else
                titleList.Add(null);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTitle(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("Title", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByName(this IQueryable<Malldub.Data.Comment> queryable, System.String name)
        {
            // support nulls
            return name == null 
                ? queryable.Where(c => c.Name == null) 
                : queryable.Where(c => c.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByName(this IQueryable<Malldub.Data.Comment> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return name == null 
                        ? queryable.Where(c => c.Name != null) 
                        : queryable.Where(c => c.Name != name);
                default:
                    return name == null 
                        ? queryable.Where(c => c.Name == null) 
                        : queryable.Where(c => c.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByName(this IQueryable<Malldub.Data.Comment> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);
            else
                nameList.Add(null);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByName(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("Name", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.TotalLikes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalLikes">TotalLikes to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTotalLikes(this IQueryable<Malldub.Data.Comment> queryable, System.Int32? totalLikes)
        {
            // support nulls
            return totalLikes == null 
                ? queryable.Where(c => c.TotalLikes == null) 
                : queryable.Where(c => c.TotalLikes == totalLikes);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.TotalLikes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalLikes">TotalLikes to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTotalLikes(this IQueryable<Malldub.Data.Comment> queryable, ComparisonOperator comparisonOperator, System.Int32? totalLikes)
        {
            if (totalLikes == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("totalLikes", "Parameter 'totalLikes' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.TotalLikes > totalLikes);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.TotalLikes >= totalLikes);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.TotalLikes < totalLikes);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.TotalLikes <= totalLikes);
                case ComparisonOperator.NotEquals:
                    return totalLikes == null 
                        ? queryable.Where(c => c.TotalLikes != null) 
                        : queryable.Where(c => c.TotalLikes != totalLikes);
                default:
                    return totalLikes == null 
                        ? queryable.Where(c => c.TotalLikes == null) 
                        : queryable.Where(c => c.TotalLikes == totalLikes);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.TotalLikes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalLikes">TotalLikes to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTotalLikes(this IQueryable<Malldub.Data.Comment> queryable, System.Int32? totalLikes, params System.Int32?[] additionalValues)
        {
            var totalLikesList = new List<System.Int32?> { totalLikes };

            if (additionalValues != null)
                totalLikesList.AddRange(additionalValues);
            else
                totalLikesList.Add(null);

            if (totalLikesList.Count == 1)
                return queryable.ByTotalLikes(totalLikesList[0]);

            return queryable.ByTotalLikes(totalLikesList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.TotalLikes"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByTotalLikes(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Comment, bool>("TotalLikes", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPostToFacebook(this IQueryable<Malldub.Data.Comment> queryable, System.Boolean postToFacebook)
        {
            return queryable.Where(c => c.PostToFacebook == postToFacebook);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPostToFacebook(this IQueryable<Malldub.Data.Comment> queryable, ComparisonOperator comparisonOperator, System.Boolean postToFacebook)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.PostToFacebook != postToFacebook);
                default:
                    return queryable.Where(c => c.PostToFacebook == postToFacebook);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPostToFacebook(this IQueryable<Malldub.Data.Comment> queryable, System.Boolean postToFacebook, params System.Boolean[] additionalValues)
        {
            var postToFacebookList = new List<System.Boolean> { postToFacebook };

            if (additionalValues != null)
                postToFacebookList.AddRange(additionalValues);

            if (postToFacebookList.Count == 1)
                return queryable.ByPostToFacebook(postToFacebookList[0]);

            return queryable.ByPostToFacebook(postToFacebookList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Comment.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Comment> ByPostToFacebook(this IQueryable<Malldub.Data.Comment> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(c => values.Contains(c.PostToFacebook));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Comment> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Comment.FirstOrDefault(c => c.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Comment> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Comment.FirstOrDefault(c => c.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

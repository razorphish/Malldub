#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for AspNetUser.
    /// </summary>
    public static partial class AspNetUserExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AspNetUser GetByKey(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String identification)
        {
            return queryable.FirstOrDefault(a => a.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AspNetUser GetByIdentification(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.AspNetUser>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByIdentification(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String identification)
        {
            return queryable.Where(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByIdentification(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String identification)
        {
            if (identification == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("identification", "Parameter 'identification' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Identification.Contains(identification));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Identification.StartsWith(identification));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Identification.EndsWith(identification));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Identification.Contains(identification) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Identification != identification);
                default:
                    return queryable.Where(a => a.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByIdentification(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String identification, params System.String[] additionalValues)
        {
            var identificationList = new List<System.String> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByIdentification(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByUserName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String userName)
        {
            return queryable.Where(a => a.UserName == userName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByUserName(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String userName)
        {
            if (userName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userName", "Parameter 'userName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.UserName.Contains(userName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.UserName.StartsWith(userName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.UserName.EndsWith(userName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.UserName.Contains(userName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.UserName != userName);
                default:
                    return queryable.Where(a => a.UserName == userName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByUserName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String userName, params System.String[] additionalValues)
        {
            var userNameList = new List<System.String> { userName };

            if (additionalValues != null)
                userNameList.AddRange(additionalValues);

            if (userNameList.Count == 1)
                return queryable.ByUserName(userNameList[0]);

            return queryable.ByUserName(userNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByUserName(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.UserName));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByPasswordHash(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String passwordHash)
        {
            // support nulls
            return passwordHash == null 
                ? queryable.Where(a => a.PasswordHash == null) 
                : queryable.Where(a => a.PasswordHash == passwordHash);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByPasswordHash(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String passwordHash)
        {
            if (passwordHash == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("passwordHash", "Parameter 'passwordHash' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.PasswordHash.Contains(passwordHash));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.PasswordHash.StartsWith(passwordHash));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.PasswordHash.EndsWith(passwordHash));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.PasswordHash.Contains(passwordHash) == false);
                case ContainmentOperator.NotEquals:
                    return passwordHash == null 
                        ? queryable.Where(a => a.PasswordHash != null) 
                        : queryable.Where(a => a.PasswordHash != passwordHash);
                default:
                    return passwordHash == null 
                        ? queryable.Where(a => a.PasswordHash == null) 
                        : queryable.Where(a => a.PasswordHash == passwordHash);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="passwordHash">PasswordHash to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByPasswordHash(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String passwordHash, params System.String[] additionalValues)
        {
            var passwordHashList = new List<System.String> { passwordHash };

            if (additionalValues != null)
                passwordHashList.AddRange(additionalValues);
            else
                passwordHashList.Add(null);

            if (passwordHashList.Count == 1)
                return queryable.ByPasswordHash(passwordHashList[0]);

            return queryable.ByPasswordHash(passwordHashList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.PasswordHash"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByPasswordHash(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("PasswordHash", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> BySecurityStamp(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String securityStamp)
        {
            // support nulls
            return securityStamp == null 
                ? queryable.Where(a => a.SecurityStamp == null) 
                : queryable.Where(a => a.SecurityStamp == securityStamp);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> BySecurityStamp(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String securityStamp)
        {
            if (securityStamp == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("securityStamp", "Parameter 'securityStamp' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.SecurityStamp.Contains(securityStamp));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.SecurityStamp.StartsWith(securityStamp));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.SecurityStamp.EndsWith(securityStamp));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.SecurityStamp.Contains(securityStamp) == false);
                case ContainmentOperator.NotEquals:
                    return securityStamp == null 
                        ? queryable.Where(a => a.SecurityStamp != null) 
                        : queryable.Where(a => a.SecurityStamp != securityStamp);
                default:
                    return securityStamp == null 
                        ? queryable.Where(a => a.SecurityStamp == null) 
                        : queryable.Where(a => a.SecurityStamp == securityStamp);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="securityStamp">SecurityStamp to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> BySecurityStamp(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String securityStamp, params System.String[] additionalValues)
        {
            var securityStampList = new List<System.String> { securityStamp };

            if (additionalValues != null)
                securityStampList.AddRange(additionalValues);
            else
                securityStampList.Add(null);

            if (securityStampList.Count == 1)
                return queryable.BySecurityStamp(securityStampList[0]);

            return queryable.BySecurityStamp(securityStampList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.SecurityStamp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> BySecurityStamp(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("SecurityStamp", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Discriminator"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discriminator">Discriminator to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDiscriminator(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String discriminator)
        {
            return queryable.Where(a => a.Discriminator == discriminator);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Discriminator"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discriminator">Discriminator to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDiscriminator(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String discriminator)
        {
            if (discriminator == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("discriminator", "Parameter 'discriminator' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Discriminator.Contains(discriminator));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Discriminator.StartsWith(discriminator));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Discriminator.EndsWith(discriminator));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Discriminator.Contains(discriminator) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Discriminator != discriminator);
                default:
                    return queryable.Where(a => a.Discriminator == discriminator);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Discriminator"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discriminator">Discriminator to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDiscriminator(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String discriminator, params System.String[] additionalValues)
        {
            var discriminatorList = new List<System.String> { discriminator };

            if (additionalValues != null)
                discriminatorList.AddRange(additionalValues);

            if (discriminatorList.Count == 1)
                return queryable.ByDiscriminator(discriminatorList[0]);

            return queryable.ByDiscriminator(discriminatorList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Discriminator"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDiscriminator(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Discriminator));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByFirstName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(a => a.FirstName == null) 
                : queryable.Where(a => a.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByFirstName(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName != null) 
                        : queryable.Where(a => a.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName == null) 
                        : queryable.Where(a => a.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByFirstName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByFirstName(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByLastName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(a => a.LastName == null) 
                : queryable.Where(a => a.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByLastName(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName != null) 
                        : queryable.Where(a => a.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName == null) 
                        : queryable.Where(a => a.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByLastName(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByLastName(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("LastName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByEmail(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(a => a.Email == null) 
                : queryable.Where(a => a.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByEmail(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(a => a.Email != null) 
                        : queryable.Where(a => a.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(a => a.Email == null) 
                        : queryable.Where(a => a.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByEmail(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByEmail(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByStatusId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String statusId)
        {
            // support nulls
            return statusId == null 
                ? queryable.Where(a => a.StatusId == null) 
                : queryable.Where(a => a.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByStatusId(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return statusId == null 
                        ? queryable.Where(a => a.StatusId != null) 
                        : queryable.Where(a => a.StatusId != statusId);
                default:
                    return statusId == null 
                        ? queryable.Where(a => a.StatusId == null) 
                        : queryable.Where(a => a.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByStatusId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);
            else
                statusIdList.Add(null);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByStatusId(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("StatusId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadId">AvatarUploadId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.Int32? avatarUploadId)
        {
            // support nulls
            return avatarUploadId == null 
                ? queryable.Where(a => a.AvatarUploadId == null) 
                : queryable.Where(a => a.AvatarUploadId == avatarUploadId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadId">AvatarUploadId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadId(this IQueryable<Malldub.Data.AspNetUser> queryable, ComparisonOperator comparisonOperator, System.Int32? avatarUploadId)
        {
            if (avatarUploadId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("avatarUploadId", "Parameter 'avatarUploadId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AvatarUploadId > avatarUploadId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AvatarUploadId >= avatarUploadId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AvatarUploadId < avatarUploadId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AvatarUploadId <= avatarUploadId);
                case ComparisonOperator.NotEquals:
                    return avatarUploadId == null 
                        ? queryable.Where(a => a.AvatarUploadId != null) 
                        : queryable.Where(a => a.AvatarUploadId != avatarUploadId);
                default:
                    return avatarUploadId == null 
                        ? queryable.Where(a => a.AvatarUploadId == null) 
                        : queryable.Where(a => a.AvatarUploadId == avatarUploadId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadId">AvatarUploadId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.Int32? avatarUploadId, params System.Int32?[] additionalValues)
        {
            var avatarUploadIdList = new List<System.Int32?> { avatarUploadId };

            if (additionalValues != null)
                avatarUploadIdList.AddRange(additionalValues);
            else
                avatarUploadIdList.Add(null);

            if (avatarUploadIdList.Count == 1)
                return queryable.ByAvatarUploadId(avatarUploadIdList[0]);

            return queryable.ByAvatarUploadId(avatarUploadIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadId(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("AvatarUploadId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadTempLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadTempLocation">AvatarUploadTempLocation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadTempLocation(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String avatarUploadTempLocation)
        {
            // support nulls
            return avatarUploadTempLocation == null 
                ? queryable.Where(a => a.AvatarUploadTempLocation == null) 
                : queryable.Where(a => a.AvatarUploadTempLocation == avatarUploadTempLocation);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadTempLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadTempLocation">AvatarUploadTempLocation to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadTempLocation(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String avatarUploadTempLocation)
        {
            if (avatarUploadTempLocation == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("avatarUploadTempLocation", "Parameter 'avatarUploadTempLocation' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AvatarUploadTempLocation.Contains(avatarUploadTempLocation));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AvatarUploadTempLocation.StartsWith(avatarUploadTempLocation));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AvatarUploadTempLocation.EndsWith(avatarUploadTempLocation));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AvatarUploadTempLocation.Contains(avatarUploadTempLocation) == false);
                case ContainmentOperator.NotEquals:
                    return avatarUploadTempLocation == null 
                        ? queryable.Where(a => a.AvatarUploadTempLocation != null) 
                        : queryable.Where(a => a.AvatarUploadTempLocation != avatarUploadTempLocation);
                default:
                    return avatarUploadTempLocation == null 
                        ? queryable.Where(a => a.AvatarUploadTempLocation == null) 
                        : queryable.Where(a => a.AvatarUploadTempLocation == avatarUploadTempLocation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadTempLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="avatarUploadTempLocation">AvatarUploadTempLocation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadTempLocation(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String avatarUploadTempLocation, params System.String[] additionalValues)
        {
            var avatarUploadTempLocationList = new List<System.String> { avatarUploadTempLocation };

            if (additionalValues != null)
                avatarUploadTempLocationList.AddRange(additionalValues);
            else
                avatarUploadTempLocationList.Add(null);

            if (avatarUploadTempLocationList.Count == 1)
                return queryable.ByAvatarUploadTempLocation(avatarUploadTempLocationList[0]);

            return queryable.ByAvatarUploadTempLocation(avatarUploadTempLocationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AvatarUploadTempLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAvatarUploadTempLocation(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("AvatarUploadTempLocation", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAccountId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String accountId)
        {
            // support nulls
            return accountId == null 
                ? queryable.Where(a => a.AccountId == null) 
                : queryable.Where(a => a.AccountId == accountId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAccountId(this IQueryable<Malldub.Data.AspNetUser> queryable, ContainmentOperator containmentOperator, System.String accountId)
        {
            if (accountId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("accountId", "Parameter 'accountId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AccountId.Contains(accountId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AccountId.StartsWith(accountId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AccountId.EndsWith(accountId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AccountId.Contains(accountId) == false);
                case ContainmentOperator.NotEquals:
                    return accountId == null 
                        ? queryable.Where(a => a.AccountId != null) 
                        : queryable.Where(a => a.AccountId != accountId);
                default:
                    return accountId == null 
                        ? queryable.Where(a => a.AccountId == null) 
                        : queryable.Where(a => a.AccountId == accountId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAccountId(this IQueryable<Malldub.Data.AspNetUser> queryable, System.String accountId, params System.String[] additionalValues)
        {
            var accountIdList = new List<System.String> { accountId };

            if (additionalValues != null)
                accountIdList.AddRange(additionalValues);
            else
                accountIdList.Add(null);

            if (accountIdList.Count == 1)
                return queryable.ByAccountId(accountIdList[0]);

            return queryable.ByAccountId(accountIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByAccountId(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUser, bool>("AccountId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateEntered(this IQueryable<Malldub.Data.AspNetUser> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(a => a.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateEntered(this IQueryable<Malldub.Data.AspNetUser> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.DateEntered != dateEntered);
                default:
                    return queryable.Where(a => a.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateEntered(this IQueryable<Malldub.Data.AspNetUser> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateEntered(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUser> queryable, System.DateTime dateUpdated)
        {
            return queryable.Where(a => a.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUser> queryable, ComparisonOperator comparisonOperator, System.DateTime dateUpdated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.DateUpdated != dateUpdated);
                default:
                    return queryable.Where(a => a.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUser> queryable, System.DateTime dateUpdated, params System.DateTime[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUser.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUser> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUser> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.DateUpdated));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, Malldub.Data.AspNetUser> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String identification) =>
                        db.AspNetUser.FirstOrDefault(a => a.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, Malldub.Data.AspNetUser> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String identification) =>
                        db.AspNetUser.FirstOrDefault(a => a.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

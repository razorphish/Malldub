#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundTeam.
    /// </summary>
    public static partial class FundTeamExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundTeam GetByKey(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(f => f.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundTeam GetByIdentification(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.FundTeam>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByIdentification(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByIdentification(this IQueryable<Malldub.Data.FundTeam> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByIdentification(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByIdentification(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByFundId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByFundId(this IQueryable<Malldub.Data.FundTeam> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByFundId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByFundId(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamId">TeamId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 teamId)
        {
            return queryable.Where(f => f.TeamId == teamId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamId">TeamId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamId(this IQueryable<Malldub.Data.FundTeam> queryable, ComparisonOperator comparisonOperator, System.Int32 teamId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.TeamId > teamId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.TeamId >= teamId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.TeamId < teamId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.TeamId <= teamId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.TeamId != teamId);
                default:
                    return queryable.Where(f => f.TeamId == teamId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamId">TeamId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 teamId, params System.Int32[] additionalValues)
        {
            var teamIdList = new List<System.Int32> { teamId };

            if (additionalValues != null)
                teamIdList.AddRange(additionalValues);

            if (teamIdList.Count == 1)
                return queryable.ByTeamId(teamIdList[0]);

            return queryable.ByTeamId(teamIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamId(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.TeamId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByGoalAmount(this IQueryable<Malldub.Data.FundTeam> queryable, System.Decimal goalAmount)
        {
            return queryable.Where(f => f.GoalAmount == goalAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByGoalAmount(this IQueryable<Malldub.Data.FundTeam> queryable, ComparisonOperator comparisonOperator, System.Decimal goalAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.GoalAmount > goalAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.GoalAmount >= goalAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.GoalAmount < goalAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.GoalAmount <= goalAmount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.GoalAmount != goalAmount);
                default:
                    return queryable.Where(f => f.GoalAmount == goalAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByGoalAmount(this IQueryable<Malldub.Data.FundTeam> queryable, System.Decimal goalAmount, params System.Decimal[] additionalValues)
        {
            var goalAmountList = new List<System.Decimal> { goalAmount };

            if (additionalValues != null)
                goalAmountList.AddRange(additionalValues);

            if (goalAmountList.Count == 1)
                return queryable.ByGoalAmount(goalAmountList[0]);

            return queryable.ByGoalAmount(goalAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByGoalAmount(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(f => values.Contains(f.GoalAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamFundId">TeamFundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamFundId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 teamFundId)
        {
            return queryable.Where(f => f.TeamFundId == teamFundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamFundId">TeamFundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamFundId(this IQueryable<Malldub.Data.FundTeam> queryable, ComparisonOperator comparisonOperator, System.Int32 teamFundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.TeamFundId > teamFundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.TeamFundId >= teamFundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.TeamFundId < teamFundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.TeamFundId <= teamFundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.TeamFundId != teamFundId);
                default:
                    return queryable.Where(f => f.TeamFundId == teamFundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="teamFundId">TeamFundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamFundId(this IQueryable<Malldub.Data.FundTeam> queryable, System.Int32 teamFundId, params System.Int32[] additionalValues)
        {
            var teamFundIdList = new List<System.Int32> { teamFundId };

            if (additionalValues != null)
                teamFundIdList.AddRange(additionalValues);

            if (teamFundIdList.Count == 1)
                return queryable.ByTeamFundId(teamFundIdList[0]);

            return queryable.ByTeamFundId(teamFundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.TeamFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByTeamFundId(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.TeamFundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.CaptainEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captainEmail">CaptainEmail to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByCaptainEmail(this IQueryable<Malldub.Data.FundTeam> queryable, System.String captainEmail)
        {
            // support nulls
            return captainEmail == null 
                ? queryable.Where(f => f.CaptainEmail == null) 
                : queryable.Where(f => f.CaptainEmail == captainEmail);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.CaptainEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captainEmail">CaptainEmail to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByCaptainEmail(this IQueryable<Malldub.Data.FundTeam> queryable, ContainmentOperator containmentOperator, System.String captainEmail)
        {
            if (captainEmail == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("captainEmail", "Parameter 'captainEmail' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.CaptainEmail.Contains(captainEmail));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.CaptainEmail.StartsWith(captainEmail));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.CaptainEmail.EndsWith(captainEmail));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.CaptainEmail.Contains(captainEmail) == false);
                case ContainmentOperator.NotEquals:
                    return captainEmail == null 
                        ? queryable.Where(f => f.CaptainEmail != null) 
                        : queryable.Where(f => f.CaptainEmail != captainEmail);
                default:
                    return captainEmail == null 
                        ? queryable.Where(f => f.CaptainEmail == null) 
                        : queryable.Where(f => f.CaptainEmail == captainEmail);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.CaptainEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captainEmail">CaptainEmail to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByCaptainEmail(this IQueryable<Malldub.Data.FundTeam> queryable, System.String captainEmail, params System.String[] additionalValues)
        {
            var captainEmailList = new List<System.String> { captainEmail };

            if (additionalValues != null)
                captainEmailList.AddRange(additionalValues);
            else
                captainEmailList.Add(null);

            if (captainEmailList.Count == 1)
                return queryable.ByCaptainEmail(captainEmailList[0]);

            return queryable.ByCaptainEmail(captainEmailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeam.CaptainEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeam> ByCaptainEmail(this IQueryable<Malldub.Data.FundTeam> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundTeam, bool>("CaptainEmail", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundTeam> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundTeam.FirstOrDefault(f => f.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundTeam> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundTeam.FirstOrDefault(f => f.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

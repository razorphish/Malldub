#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for AspNetUserGateway.
    /// </summary>
    public static partial class AspNetUserGatewayExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AspNetUserGateway GetByKey(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(a => a.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AspNetUserGateway GetByIdentification(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.AspNetUserGateway>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByIdentification(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.Int32 identification)
        {
            return queryable.Where(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByIdentification(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Identification != identification);
                default:
                    return queryable.Where(a => a.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByIdentification(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByIdentification(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayId">GatewayId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String gatewayId)
        {
            return queryable.Where(a => a.GatewayId == gatewayId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayId">GatewayId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String gatewayId)
        {
            if (gatewayId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("gatewayId", "Parameter 'gatewayId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.GatewayId.Contains(gatewayId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.GatewayId.StartsWith(gatewayId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.GatewayId.EndsWith(gatewayId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.GatewayId.Contains(gatewayId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.GatewayId != gatewayId);
                default:
                    return queryable.Where(a => a.GatewayId == gatewayId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayId">GatewayId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String gatewayId, params System.String[] additionalValues)
        {
            var gatewayIdList = new List<System.String> { gatewayId };

            if (additionalValues != null)
                gatewayIdList.AddRange(additionalValues);

            if (gatewayIdList.Count == 1)
                return queryable.ByGatewayId(gatewayIdList[0]);

            return queryable.ByGatewayId(gatewayIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.GatewayId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AspNetUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="aspNetUserId">AspNetUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAspNetUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String aspNetUserId)
        {
            return queryable.Where(a => a.AspNetUserId == aspNetUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AspNetUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="aspNetUserId">AspNetUserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAspNetUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String aspNetUserId)
        {
            if (aspNetUserId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("aspNetUserId", "Parameter 'aspNetUserId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AspNetUserId.Contains(aspNetUserId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AspNetUserId.StartsWith(aspNetUserId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AspNetUserId.EndsWith(aspNetUserId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AspNetUserId.Contains(aspNetUserId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.AspNetUserId != aspNetUserId);
                default:
                    return queryable.Where(a => a.AspNetUserId == aspNetUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AspNetUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="aspNetUserId">AspNetUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAspNetUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String aspNetUserId, params System.String[] additionalValues)
        {
            var aspNetUserIdList = new List<System.String> { aspNetUserId };

            if (additionalValues != null)
                aspNetUserIdList.AddRange(additionalValues);

            if (aspNetUserIdList.Count == 1)
                return queryable.ByAspNetUserId(aspNetUserIdList[0]);

            return queryable.ByAspNetUserId(aspNetUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AspNetUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAspNetUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.AspNetUserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayUserId">GatewayUserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String gatewayUserId)
        {
            return queryable.Where(a => a.GatewayUserId == gatewayUserId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayUserId">GatewayUserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String gatewayUserId)
        {
            if (gatewayUserId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("gatewayUserId", "Parameter 'gatewayUserId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.GatewayUserId.Contains(gatewayUserId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.GatewayUserId.StartsWith(gatewayUserId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.GatewayUserId.EndsWith(gatewayUserId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.GatewayUserId.Contains(gatewayUserId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.GatewayUserId != gatewayUserId);
                default:
                    return queryable.Where(a => a.GatewayUserId == gatewayUserId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gatewayUserId">GatewayUserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String gatewayUserId, params System.String[] additionalValues)
        {
            var gatewayUserIdList = new List<System.String> { gatewayUserId };

            if (additionalValues != null)
                gatewayUserIdList.AddRange(additionalValues);

            if (gatewayUserIdList.Count == 1)
                return queryable.ByGatewayUserId(gatewayUserIdList[0]);

            return queryable.ByGatewayUserId(gatewayUserIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.GatewayUserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByGatewayUserId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.GatewayUserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByFirstName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(a => a.FirstName == null) 
                : queryable.Where(a => a.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByFirstName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName != null) 
                        : queryable.Where(a => a.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(a => a.FirstName == null) 
                        : queryable.Where(a => a.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByFirstName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByFirstName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByLastName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(a => a.LastName == null) 
                : queryable.Where(a => a.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByLastName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName != null) 
                        : queryable.Where(a => a.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(a => a.LastName == null) 
                        : queryable.Where(a => a.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByLastName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByLastName(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("LastName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByEmail(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(a => a.Email == null) 
                : queryable.Where(a => a.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByEmail(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(a => a.Email != null) 
                        : queryable.Where(a => a.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(a => a.Email == null) 
                        : queryable.Where(a => a.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByEmail(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByEmail(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccessToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessToken">AccessToken to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccessToken(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accessToken)
        {
            // support nulls
            return accessToken == null 
                ? queryable.Where(a => a.AccessToken == null) 
                : queryable.Where(a => a.AccessToken == accessToken);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccessToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessToken">AccessToken to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccessToken(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String accessToken)
        {
            if (accessToken == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("accessToken", "Parameter 'accessToken' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AccessToken.Contains(accessToken));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AccessToken.StartsWith(accessToken));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AccessToken.EndsWith(accessToken));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AccessToken.Contains(accessToken) == false);
                case ContainmentOperator.NotEquals:
                    return accessToken == null 
                        ? queryable.Where(a => a.AccessToken != null) 
                        : queryable.Where(a => a.AccessToken != accessToken);
                default:
                    return accessToken == null 
                        ? queryable.Where(a => a.AccessToken == null) 
                        : queryable.Where(a => a.AccessToken == accessToken);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccessToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accessToken">AccessToken to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccessToken(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accessToken, params System.String[] additionalValues)
        {
            var accessTokenList = new List<System.String> { accessToken };

            if (additionalValues != null)
                accessTokenList.AddRange(additionalValues);
            else
                accessTokenList.Add(null);

            if (accessTokenList.Count == 1)
                return queryable.ByAccessToken(accessTokenList[0]);

            return queryable.ByAccessToken(accessTokenList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccessToken"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccessToken(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("AccessToken", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenType">TokenType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenType(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String tokenType)
        {
            // support nulls
            return tokenType == null 
                ? queryable.Where(a => a.TokenType == null) 
                : queryable.Where(a => a.TokenType == tokenType);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenType">TokenType to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenType(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String tokenType)
        {
            if (tokenType == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tokenType", "Parameter 'tokenType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.TokenType.Contains(tokenType));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.TokenType.StartsWith(tokenType));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.TokenType.EndsWith(tokenType));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.TokenType.Contains(tokenType) == false);
                case ContainmentOperator.NotEquals:
                    return tokenType == null 
                        ? queryable.Where(a => a.TokenType != null) 
                        : queryable.Where(a => a.TokenType != tokenType);
                default:
                    return tokenType == null 
                        ? queryable.Where(a => a.TokenType == null) 
                        : queryable.Where(a => a.TokenType == tokenType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenType">TokenType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenType(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String tokenType, params System.String[] additionalValues)
        {
            var tokenTypeList = new List<System.String> { tokenType };

            if (additionalValues != null)
                tokenTypeList.AddRange(additionalValues);
            else
                tokenTypeList.Add(null);

            if (tokenTypeList.Count == 1)
                return queryable.ByTokenType(tokenTypeList[0]);

            return queryable.ByTokenType(tokenTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenType(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("TokenType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenExpiration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenExpiration">TokenExpiration to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenExpiration(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String tokenExpiration)
        {
            // support nulls
            return tokenExpiration == null 
                ? queryable.Where(a => a.TokenExpiration == null) 
                : queryable.Where(a => a.TokenExpiration == tokenExpiration);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenExpiration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenExpiration">TokenExpiration to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenExpiration(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String tokenExpiration)
        {
            if (tokenExpiration == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tokenExpiration", "Parameter 'tokenExpiration' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.TokenExpiration.Contains(tokenExpiration));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.TokenExpiration.StartsWith(tokenExpiration));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.TokenExpiration.EndsWith(tokenExpiration));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.TokenExpiration.Contains(tokenExpiration) == false);
                case ContainmentOperator.NotEquals:
                    return tokenExpiration == null 
                        ? queryable.Where(a => a.TokenExpiration != null) 
                        : queryable.Where(a => a.TokenExpiration != tokenExpiration);
                default:
                    return tokenExpiration == null 
                        ? queryable.Where(a => a.TokenExpiration == null) 
                        : queryable.Where(a => a.TokenExpiration == tokenExpiration);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenExpiration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tokenExpiration">TokenExpiration to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenExpiration(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String tokenExpiration, params System.String[] additionalValues)
        {
            var tokenExpirationList = new List<System.String> { tokenExpiration };

            if (additionalValues != null)
                tokenExpirationList.AddRange(additionalValues);
            else
                tokenExpirationList.Add(null);

            if (tokenExpirationList.Count == 1)
                return queryable.ByTokenExpiration(tokenExpirationList[0]);

            return queryable.ByTokenExpiration(tokenExpirationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.TokenExpiration"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByTokenExpiration(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("TokenExpiration", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateEntered(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(a => a.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateEntered(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.DateEntered != dateEntered);
                default:
                    return queryable.Where(a => a.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateEntered(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateEntered(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.DateTime dateUpdated)
        {
            return queryable.Where(a => a.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ComparisonOperator comparisonOperator, System.DateTime dateUpdated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.DateUpdated != dateUpdated);
                default:
                    return queryable.Where(a => a.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.DateTime dateUpdated, params System.DateTime[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByDateUpdated(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(a => values.Contains(a.DateUpdated));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountId)
        {
            // support nulls
            return accountId == null 
                ? queryable.Where(a => a.AccountId == null) 
                : queryable.Where(a => a.AccountId == accountId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String accountId)
        {
            if (accountId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("accountId", "Parameter 'accountId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AccountId.Contains(accountId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AccountId.StartsWith(accountId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AccountId.EndsWith(accountId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AccountId.Contains(accountId) == false);
                case ContainmentOperator.NotEquals:
                    return accountId == null 
                        ? queryable.Where(a => a.AccountId != null) 
                        : queryable.Where(a => a.AccountId != accountId);
                default:
                    return accountId == null 
                        ? queryable.Where(a => a.AccountId == null) 
                        : queryable.Where(a => a.AccountId == accountId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountId">AccountId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountId, params System.String[] additionalValues)
        {
            var accountIdList = new List<System.String> { accountId };

            if (additionalValues != null)
                accountIdList.AddRange(additionalValues);
            else
                accountIdList.Add(null);

            if (accountIdList.Count == 1)
                return queryable.ByAccountId(accountIdList[0]);

            return queryable.ByAccountId(accountIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("AccountId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountReferenceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountReferenceId">AccountReferenceId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountReferenceId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountReferenceId)
        {
            // support nulls
            return accountReferenceId == null 
                ? queryable.Where(a => a.AccountReferenceId == null) 
                : queryable.Where(a => a.AccountReferenceId == accountReferenceId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountReferenceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountReferenceId">AccountReferenceId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountReferenceId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String accountReferenceId)
        {
            if (accountReferenceId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("accountReferenceId", "Parameter 'accountReferenceId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AccountReferenceId.Contains(accountReferenceId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AccountReferenceId.StartsWith(accountReferenceId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AccountReferenceId.EndsWith(accountReferenceId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AccountReferenceId.Contains(accountReferenceId) == false);
                case ContainmentOperator.NotEquals:
                    return accountReferenceId == null 
                        ? queryable.Where(a => a.AccountReferenceId != null) 
                        : queryable.Where(a => a.AccountReferenceId != accountReferenceId);
                default:
                    return accountReferenceId == null 
                        ? queryable.Where(a => a.AccountReferenceId == null) 
                        : queryable.Where(a => a.AccountReferenceId == accountReferenceId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountReferenceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountReferenceId">AccountReferenceId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountReferenceId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountReferenceId, params System.String[] additionalValues)
        {
            var accountReferenceIdList = new List<System.String> { accountReferenceId };

            if (additionalValues != null)
                accountReferenceIdList.AddRange(additionalValues);
            else
                accountReferenceIdList.Add(null);

            if (accountReferenceIdList.Count == 1)
                return queryable.ByAccountReferenceId(accountReferenceIdList[0]);

            return queryable.ByAccountReferenceId(accountReferenceIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountReferenceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountReferenceId(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("AccountReferenceId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.UserState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userState">UserState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByUserState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String userState)
        {
            // support nulls
            return userState == null 
                ? queryable.Where(a => a.UserState == null) 
                : queryable.Where(a => a.UserState == userState);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.UserState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userState">UserState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByUserState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String userState)
        {
            if (userState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userState", "Parameter 'userState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.UserState.Contains(userState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.UserState.StartsWith(userState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.UserState.EndsWith(userState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.UserState.Contains(userState) == false);
                case ContainmentOperator.NotEquals:
                    return userState == null 
                        ? queryable.Where(a => a.UserState != null) 
                        : queryable.Where(a => a.UserState != userState);
                default:
                    return userState == null 
                        ? queryable.Where(a => a.UserState == null) 
                        : queryable.Where(a => a.UserState == userState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.UserState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userState">UserState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByUserState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String userState, params System.String[] additionalValues)
        {
            var userStateList = new List<System.String> { userState };

            if (additionalValues != null)
                userStateList.AddRange(additionalValues);
            else
                userStateList.Add(null);

            if (userStateList.Count == 1)
                return queryable.ByUserState(userStateList[0]);

            return queryable.ByUserState(userStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.UserState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByUserState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("UserState", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountState">AccountState to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountState)
        {
            // support nulls
            return accountState == null 
                ? queryable.Where(a => a.AccountState == null) 
                : queryable.Where(a => a.AccountState == accountState);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountState">AccountState to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, ContainmentOperator containmentOperator, System.String accountState)
        {
            if (accountState == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("accountState", "Parameter 'accountState' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.AccountState.Contains(accountState));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.AccountState.StartsWith(accountState));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.AccountState.EndsWith(accountState));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.AccountState.Contains(accountState) == false);
                case ContainmentOperator.NotEquals:
                    return accountState == null 
                        ? queryable.Where(a => a.AccountState != null) 
                        : queryable.Where(a => a.AccountState != accountState);
                default:
                    return accountState == null 
                        ? queryable.Where(a => a.AccountState == null) 
                        : queryable.Where(a => a.AccountState == accountState);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="accountState">AccountState to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, System.String accountState, params System.String[] additionalValues)
        {
            var accountStateList = new List<System.String> { accountState };

            if (additionalValues != null)
                accountStateList.AddRange(additionalValues);
            else
                accountStateList.Add(null);

            if (accountStateList.Count == 1)
                return queryable.ByAccountState(accountStateList[0]);

            return queryable.ByAccountState(accountStateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AspNetUserGateway.AccountState"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AspNetUserGateway> ByAccountState(this IQueryable<Malldub.Data.AspNetUserGateway> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AspNetUserGateway, bool>("AccountState", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.AspNetUserGateway> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.AspNetUserGateway.FirstOrDefault(a => a.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.AspNetUserGateway> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.AspNetUserGateway.FirstOrDefault(a => a.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for AuctionStatus.
    /// </summary>
    public static partial class AuctionStatusExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AuctionStatus GetByKey(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.AuctionStatus>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AuctionStatus GetByIdentification(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.AuctionStatus>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByIdentification(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.Int32 identification)
        {
            return queryable.Where(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByIdentification(this IQueryable<Malldub.Data.AuctionStatus> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Identification != identification);
                default:
                    return queryable.Where(a => a.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByIdentification(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByIdentification(this IQueryable<Malldub.Data.AuctionStatus> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDescription(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.String description)
        {
            return queryable.Where(a => a.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDescription(this IQueryable<Malldub.Data.AuctionStatus> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Description != description);
                default:
                    return queryable.Where(a => a.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDescription(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDescription(this IQueryable<Malldub.Data.AuctionStatus> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Description));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Detail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detail">Detail to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDetail(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.String detail)
        {
            // support nulls
            return detail == null 
                ? queryable.Where(a => a.Detail == null) 
                : queryable.Where(a => a.Detail == detail);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Detail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detail">Detail to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDetail(this IQueryable<Malldub.Data.AuctionStatus> queryable, ContainmentOperator containmentOperator, System.String detail)
        {
            if (detail == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("detail", "Parameter 'detail' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Detail.Contains(detail));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Detail.StartsWith(detail));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Detail.EndsWith(detail));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Detail.Contains(detail) == false);
                case ContainmentOperator.NotEquals:
                    return detail == null 
                        ? queryable.Where(a => a.Detail != null) 
                        : queryable.Where(a => a.Detail != detail);
                default:
                    return detail == null 
                        ? queryable.Where(a => a.Detail == null) 
                        : queryable.Where(a => a.Detail == detail);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Detail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detail">Detail to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDetail(this IQueryable<Malldub.Data.AuctionStatus> queryable, System.String detail, params System.String[] additionalValues)
        {
            var detailList = new List<System.String> { detail };

            if (additionalValues != null)
                detailList.AddRange(additionalValues);
            else
                detailList.Add(null);

            if (detailList.Count == 1)
                return queryable.ByDetail(detailList[0]);

            return queryable.ByDetail(detailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionStatus.Detail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionStatus> ByDetail(this IQueryable<Malldub.Data.AuctionStatus> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AuctionStatus, bool>("Detail", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.AuctionStatus> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.AuctionStatus.FirstOrDefault(a => a.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.AuctionStatus> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.AuctionStatus.FirstOrDefault(a => a.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

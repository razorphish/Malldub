#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for MalldubApplication.
    /// </summary>
    public static partial class MalldubApplicationExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.MalldubApplication GetByKey(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.MalldubApplication>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(m => m.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.MalldubApplication GetByIdentification(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.MalldubApplication>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(m => m.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.MalldubApplication GetByName(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String name)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.MalldubApplication>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByName.Invoke((Malldub.Data.MalldubDataContext)entity.Context, name);

            return queryable.FirstOrDefault(m => m.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByIdentification(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String identification)
        {
            return queryable.Where(m => m.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByIdentification(this IQueryable<Malldub.Data.MalldubApplication> queryable, ContainmentOperator containmentOperator, System.String identification)
        {
            if (identification == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("identification", "Parameter 'identification' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Identification.Contains(identification));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Identification.StartsWith(identification));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Identification.EndsWith(identification));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Identification.Contains(identification) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(m => m.Identification != identification);
                default:
                    return queryable.Where(m => m.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByIdentification(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String identification, params System.String[] additionalValues)
        {
            var identificationList = new List<System.String> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByIdentification(this IQueryable<Malldub.Data.MalldubApplication> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(m => values.Contains(m.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByName(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String name)
        {
            return queryable.Where(m => m.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByName(this IQueryable<Malldub.Data.MalldubApplication> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(m => m.Name != name);
                default:
                    return queryable.Where(m => m.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByName(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByName(this IQueryable<Malldub.Data.MalldubApplication> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(m => values.Contains(m.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByDescription(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String description)
        {
            return queryable.Where(m => m.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByDescription(this IQueryable<Malldub.Data.MalldubApplication> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(m => m.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(m => m.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(m => m.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(m => m.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(m => m.Description != description);
                default:
                    return queryable.Where(m => m.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByDescription(this IQueryable<Malldub.Data.MalldubApplication> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.MalldubApplication.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.MalldubApplication> ByDescription(this IQueryable<Malldub.Data.MalldubApplication> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(m => values.Contains(m.Description));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, Malldub.Data.MalldubApplication> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String identification) =>
                        db.MalldubApplication.FirstOrDefault(m => m.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, Malldub.Data.MalldubApplication> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String identification) =>
                        db.MalldubApplication.FirstOrDefault(m => m.Identification == identification));


            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, Malldub.Data.MalldubApplication> GetByName =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String name) =>
                        db.MalldubApplication.FirstOrDefault(m => m.Name == name));

        }
        #endregion
    }
}
#pragma warning restore 1591

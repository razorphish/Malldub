#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Bid.
    /// </summary>
    public static partial class BidExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Bid GetByKey(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(b => b.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Bid GetByIdentification(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Bid>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(b => b.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIdentification(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 identification)
        {
            return queryable.Where(b => b.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIdentification(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.Identification != identification);
                default:
                    return queryable.Where(b => b.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIdentification(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIdentification(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(b => values.Contains(b.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByAuctionId(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 auctionId)
        {
            return queryable.Where(b => b.AuctionId == auctionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByAuctionId(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.Int32 auctionId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.AuctionId > auctionId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.AuctionId >= auctionId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.AuctionId < auctionId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.AuctionId <= auctionId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.AuctionId != auctionId);
                default:
                    return queryable.Where(b => b.AuctionId == auctionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByAuctionId(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 auctionId, params System.Int32[] additionalValues)
        {
            var auctionIdList = new List<System.Int32> { auctionId };

            if (additionalValues != null)
                auctionIdList.AddRange(additionalValues);

            if (auctionIdList.Count == 1)
                return queryable.ByAuctionId(auctionIdList[0]);

            return queryable.ByAuctionId(auctionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByAuctionId(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(b => values.Contains(b.AuctionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByUserId(this IQueryable<Malldub.Data.Bid> queryable, System.String userId)
        {
            return queryable.Where(b => b.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByUserId(this IQueryable<Malldub.Data.Bid> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(b => b.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(b => b.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(b => b.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(b => b.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(b => b.UserId != userId);
                default:
                    return queryable.Where(b => b.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByUserId(this IQueryable<Malldub.Data.Bid> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByUserId(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(b => values.Contains(b.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.OrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderNumber">OrderNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByOrderNumber(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 orderNumber)
        {
            return queryable.Where(b => b.OrderNumber == orderNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.OrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderNumber">OrderNumber to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByOrderNumber(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.Int32 orderNumber)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.OrderNumber > orderNumber);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.OrderNumber >= orderNumber);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.OrderNumber < orderNumber);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.OrderNumber <= orderNumber);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.OrderNumber != orderNumber);
                default:
                    return queryable.Where(b => b.OrderNumber == orderNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.OrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orderNumber">OrderNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByOrderNumber(this IQueryable<Malldub.Data.Bid> queryable, System.Int32 orderNumber, params System.Int32[] additionalValues)
        {
            var orderNumberList = new List<System.Int32> { orderNumber };

            if (additionalValues != null)
                orderNumberList.AddRange(additionalValues);

            if (orderNumberList.Count == 1)
                return queryable.ByOrderNumber(orderNumberList[0]);

            return queryable.ByOrderNumber(orderNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.OrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByOrderNumber(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(b => values.Contains(b.OrderNumber));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.MaxBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maxBid">MaxBid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByMaxBid(this IQueryable<Malldub.Data.Bid> queryable, System.Decimal maxBid)
        {
            return queryable.Where(b => b.MaxBid == maxBid);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.MaxBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maxBid">MaxBid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByMaxBid(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.Decimal maxBid)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.MaxBid > maxBid);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.MaxBid >= maxBid);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.MaxBid < maxBid);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.MaxBid <= maxBid);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.MaxBid != maxBid);
                default:
                    return queryable.Where(b => b.MaxBid == maxBid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.MaxBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maxBid">MaxBid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByMaxBid(this IQueryable<Malldub.Data.Bid> queryable, System.Decimal maxBid, params System.Decimal[] additionalValues)
        {
            var maxBidList = new List<System.Decimal> { maxBid };

            if (additionalValues != null)
                maxBidList.AddRange(additionalValues);

            if (maxBidList.Count == 1)
                return queryable.ByMaxBid(maxBidList[0]);

            return queryable.ByMaxBid(maxBidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.MaxBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByMaxBid(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(b => values.Contains(b.MaxBid));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.IsHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isHighBid">IsHighBid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIsHighBid(this IQueryable<Malldub.Data.Bid> queryable, System.Boolean isHighBid)
        {
            return queryable.Where(b => b.IsHighBid == isHighBid);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.IsHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isHighBid">IsHighBid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIsHighBid(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.Boolean isHighBid)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.IsHighBid != isHighBid);
                default:
                    return queryable.Where(b => b.IsHighBid == isHighBid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.IsHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isHighBid">IsHighBid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIsHighBid(this IQueryable<Malldub.Data.Bid> queryable, System.Boolean isHighBid, params System.Boolean[] additionalValues)
        {
            var isHighBidList = new List<System.Boolean> { isHighBid };

            if (additionalValues != null)
                isHighBidList.AddRange(additionalValues);

            if (isHighBidList.Count == 1)
                return queryable.ByIsHighBid(isHighBidList[0]);

            return queryable.ByIsHighBid(isHighBidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.IsHighBid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByIsHighBid(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(b => values.Contains(b.IsHighBid));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateEntered(this IQueryable<Malldub.Data.Bid> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(b => b.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateEntered(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.DateEntered != dateEntered);
                default:
                    return queryable.Where(b => b.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateEntered(this IQueryable<Malldub.Data.Bid> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateEntered(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(b => values.Contains(b.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateUpdated(this IQueryable<Malldub.Data.Bid> queryable, System.DateTime dateUpdated)
        {
            return queryable.Where(b => b.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateUpdated(this IQueryable<Malldub.Data.Bid> queryable, ComparisonOperator comparisonOperator, System.DateTime dateUpdated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(b => b.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(b => b.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(b => b.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(b => b.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(b => b.DateUpdated != dateUpdated);
                default:
                    return queryable.Where(b => b.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateUpdated(this IQueryable<Malldub.Data.Bid> queryable, System.DateTime dateUpdated, params System.DateTime[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Bid.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Bid> ByDateUpdated(this IQueryable<Malldub.Data.Bid> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(b => values.Contains(b.DateUpdated));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Bid> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Bid.FirstOrDefault(b => b.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Bid> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Bid.FirstOrDefault(b => b.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

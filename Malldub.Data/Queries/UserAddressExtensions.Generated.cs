#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for UserAddress.
    /// </summary>
    public static partial class UserAddressExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.UserAddress GetByKey(this IQueryable<Malldub.Data.UserAddress> queryable, System.String userId, System.Int32 addressId)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.UserAddress>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, userId, addressId);

            return queryable.FirstOrDefault(u => u.UserId == userId 
					&& u.AddressId == addressId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByUserId(this IQueryable<Malldub.Data.UserAddress> queryable, System.String userId)
        {
            return queryable.Where(u => u.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByUserId(this IQueryable<Malldub.Data.UserAddress> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.UserId != userId);
                default:
                    return queryable.Where(u => u.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByUserId(this IQueryable<Malldub.Data.UserAddress> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByUserId(this IQueryable<Malldub.Data.UserAddress> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByAddressId(this IQueryable<Malldub.Data.UserAddress> queryable, System.Int32 addressId)
        {
            return queryable.Where(u => u.AddressId == addressId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByAddressId(this IQueryable<Malldub.Data.UserAddress> queryable, ComparisonOperator comparisonOperator, System.Int32 addressId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.AddressId > addressId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.AddressId >= addressId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.AddressId < addressId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.AddressId <= addressId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.AddressId != addressId);
                default:
                    return queryable.Where(u => u.AddressId == addressId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="addressId">AddressId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByAddressId(this IQueryable<Malldub.Data.UserAddress> queryable, System.Int32 addressId, params System.Int32[] additionalValues)
        {
            var addressIdList = new List<System.Int32> { addressId };

            if (additionalValues != null)
                addressIdList.AddRange(additionalValues);

            if (addressIdList.Count == 1)
                return queryable.ByAddressId(addressIdList[0]);

            return queryable.ByAddressId(addressIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.AddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByAddressId(this IQueryable<Malldub.Data.UserAddress> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(u => values.Contains(u.AddressId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByIsDefault(this IQueryable<Malldub.Data.UserAddress> queryable, System.Boolean isDefault)
        {
            return queryable.Where(u => u.IsDefault == isDefault);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByIsDefault(this IQueryable<Malldub.Data.UserAddress> queryable, ComparisonOperator comparisonOperator, System.Boolean isDefault)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.IsDefault != isDefault);
                default:
                    return queryable.Where(u => u.IsDefault == isDefault);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByIsDefault(this IQueryable<Malldub.Data.UserAddress> queryable, System.Boolean isDefault, params System.Boolean[] additionalValues)
        {
            var isDefaultList = new List<System.Boolean> { isDefault };

            if (additionalValues != null)
                isDefaultList.AddRange(additionalValues);

            if (isDefaultList.Count == 1)
                return queryable.ByIsDefault(isDefaultList[0]);

            return queryable.ByIsDefault(isDefaultList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserAddress.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserAddress> ByIsDefault(this IQueryable<Malldub.Data.UserAddress> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(u => values.Contains(u.IsDefault));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, System.Int32, Malldub.Data.UserAddress> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String userId, System.Int32 addressId) =>
                        db.UserAddress.FirstOrDefault(u => u.UserId == userId 
							&& u.AddressId == addressId));
        }
        #endregion
    }
}
#pragma warning restore 1591

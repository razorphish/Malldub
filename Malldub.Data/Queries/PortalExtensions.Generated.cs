#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Portal.
    /// </summary>
    public static partial class PortalExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Portal GetByKey(this IQueryable<Malldub.Data.Portal> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(p => p.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Portal GetByIdentification(this IQueryable<Malldub.Data.Portal> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Portal>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(p => p.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByIdentification(this IQueryable<Malldub.Data.Portal> queryable, System.Int32 identification)
        {
            return queryable.Where(p => p.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByIdentification(this IQueryable<Malldub.Data.Portal> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.Identification != identification);
                default:
                    return queryable.Where(p => p.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByIdentification(this IQueryable<Malldub.Data.Portal> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByIdentification(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(p => values.Contains(p.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.MallId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mallId">MallId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByMallId(this IQueryable<Malldub.Data.Portal> queryable, System.String mallId)
        {
            return queryable.Where(p => p.MallId == mallId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.MallId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mallId">MallId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByMallId(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String mallId)
        {
            if (mallId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("mallId", "Parameter 'mallId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.MallId.Contains(mallId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.MallId.StartsWith(mallId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.MallId.EndsWith(mallId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.MallId.Contains(mallId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.MallId != mallId);
                default:
                    return queryable.Where(p => p.MallId == mallId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.MallId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="mallId">MallId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByMallId(this IQueryable<Malldub.Data.Portal> queryable, System.String mallId, params System.String[] additionalValues)
        {
            var mallIdList = new List<System.String> { mallId };

            if (additionalValues != null)
                mallIdList.AddRange(additionalValues);

            if (mallIdList.Count == 1)
                return queryable.ByMallId(mallIdList[0]);

            return queryable.ByMallId(mallIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.MallId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByMallId(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.MallId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByStatusId(this IQueryable<Malldub.Data.Portal> queryable, System.String statusId)
        {
            return queryable.Where(p => p.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByStatusId(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.StatusId != statusId);
                default:
                    return queryable.Where(p => p.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByStatusId(this IQueryable<Malldub.Data.Portal> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByStatusId(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTypeId(this IQueryable<Malldub.Data.Portal> queryable, System.String typeId)
        {
            return queryable.Where(p => p.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTypeId(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.TypeId != typeId);
                default:
                    return queryable.Where(p => p.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTypeId(this IQueryable<Malldub.Data.Portal> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTypeId(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByName(this IQueryable<Malldub.Data.Portal> queryable, System.String name)
        {
            return queryable.Where(p => p.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByName(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Name != name);
                default:
                    return queryable.Where(p => p.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByName(this IQueryable<Malldub.Data.Portal> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByName(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByContainerName(this IQueryable<Malldub.Data.Portal> queryable, System.String containerName)
        {
            return queryable.Where(p => p.ContainerName == containerName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByContainerName(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String containerName)
        {
            if (containerName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("containerName", "Parameter 'containerName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.ContainerName.Contains(containerName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.ContainerName.StartsWith(containerName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.ContainerName.EndsWith(containerName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.ContainerName.Contains(containerName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.ContainerName != containerName);
                default:
                    return queryable.Where(p => p.ContainerName == containerName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByContainerName(this IQueryable<Malldub.Data.Portal> queryable, System.String containerName, params System.String[] additionalValues)
        {
            var containerNameList = new List<System.String> { containerName };

            if (additionalValues != null)
                containerNameList.AddRange(additionalValues);

            if (containerNameList.Count == 1)
                return queryable.ByContainerName(containerNameList[0]);

            return queryable.ByContainerName(containerNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByContainerName(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.ContainerName));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTitle(this IQueryable<Malldub.Data.Portal> queryable, System.String title)
        {
            // support nulls
            return title == null 
                ? queryable.Where(p => p.Title == null) 
                : queryable.Where(p => p.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTitle(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return title == null 
                        ? queryable.Where(p => p.Title != null) 
                        : queryable.Where(p => p.Title != title);
                default:
                    return title == null 
                        ? queryable.Where(p => p.Title == null) 
                        : queryable.Where(p => p.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTitle(this IQueryable<Malldub.Data.Portal> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);
            else
                titleList.Add(null);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByTitle(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Portal, bool>("Title", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByKeywords(this IQueryable<Malldub.Data.Portal> queryable, System.String keywords)
        {
            // support nulls
            return keywords == null 
                ? queryable.Where(p => p.Keywords == null) 
                : queryable.Where(p => p.Keywords == keywords);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByKeywords(this IQueryable<Malldub.Data.Portal> queryable, ContainmentOperator containmentOperator, System.String keywords)
        {
            if (keywords == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("keywords", "Parameter 'keywords' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Keywords.Contains(keywords));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Keywords.StartsWith(keywords));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Keywords.EndsWith(keywords));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Keywords.Contains(keywords) == false);
                case ContainmentOperator.NotEquals:
                    return keywords == null 
                        ? queryable.Where(p => p.Keywords != null) 
                        : queryable.Where(p => p.Keywords != keywords);
                default:
                    return keywords == null 
                        ? queryable.Where(p => p.Keywords == null) 
                        : queryable.Where(p => p.Keywords == keywords);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="keywords">Keywords to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByKeywords(this IQueryable<Malldub.Data.Portal> queryable, System.String keywords, params System.String[] additionalValues)
        {
            var keywordsList = new List<System.String> { keywords };

            if (additionalValues != null)
                keywordsList.AddRange(additionalValues);
            else
                keywordsList.Add(null);

            if (keywordsList.Count == 1)
                return queryable.ByKeywords(keywordsList[0]);

            return queryable.ByKeywords(keywordsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.Keywords"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByKeywords(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Portal, bool>("Keywords", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateEntered(this IQueryable<Malldub.Data.Portal> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(p => p.DateEntered == null) 
                : queryable.Where(p => p.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateEntered(this IQueryable<Malldub.Data.Portal> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(p => p.DateEntered != null) 
                        : queryable.Where(p => p.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(p => p.DateEntered == null) 
                        : queryable.Where(p => p.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateEntered(this IQueryable<Malldub.Data.Portal> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateEntered(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Portal, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateUpdated(this IQueryable<Malldub.Data.Portal> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(p => p.DateUpdated == null) 
                : queryable.Where(p => p.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateUpdated(this IQueryable<Malldub.Data.Portal> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(p => p.DateUpdated != null) 
                        : queryable.Where(p => p.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(p => p.DateUpdated == null) 
                        : queryable.Where(p => p.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateUpdated(this IQueryable<Malldub.Data.Portal> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Portal.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Portal> ByDateUpdated(this IQueryable<Malldub.Data.Portal> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Portal, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Portal> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Portal.FirstOrDefault(p => p.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Portal> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Portal.FirstOrDefault(p => p.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundUpdate.
    /// </summary>
    public static partial class FundUpdateExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundUpdate GetByKey(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(f => f.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundUpdate GetByIdentification(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.FundUpdate>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByIdentification(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByIdentification(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByIdentification(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByIdentification(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByFundId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByFundId(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByFundId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByFundId(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByUserId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String userId)
        {
            return queryable.Where(f => f.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByUserId(this IQueryable<Malldub.Data.FundUpdate> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.UserId != userId);
                default:
                    return queryable.Where(f => f.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByUserId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByUserId(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByTitle(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String title)
        {
            return queryable.Where(f => f.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByTitle(this IQueryable<Malldub.Data.FundUpdate> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Title != title);
                default:
                    return queryable.Where(f => f.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByTitle(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByTitle(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Title));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByContent(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String content)
        {
            return queryable.Where(f => f.Content == content);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByContent(this IQueryable<Malldub.Data.FundUpdate> queryable, ContainmentOperator containmentOperator, System.String content)
        {
            if (content == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("content", "Parameter 'content' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Content.Contains(content));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Content.StartsWith(content));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Content.EndsWith(content));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Content.Contains(content) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.Content != content);
                default:
                    return queryable.Where(f => f.Content == content);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="content">Content to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByContent(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String content, params System.String[] additionalValues)
        {
            var contentList = new List<System.String> { content };

            if (additionalValues != null)
                contentList.AddRange(additionalValues);

            if (contentList.Count == 1)
                return queryable.ByContent(contentList[0]);

            return queryable.ByContent(contentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.Content"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByContent(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.Content));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByStatusId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String statusId)
        {
            return queryable.Where(f => f.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByStatusId(this IQueryable<Malldub.Data.FundUpdate> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.StatusId != statusId);
                default:
                    return queryable.Where(f => f.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByStatusId(this IQueryable<Malldub.Data.FundUpdate> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByStatusId(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByDateEntered(this IQueryable<Malldub.Data.FundUpdate> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(f => f.DateEntered == null) 
                : queryable.Where(f => f.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByDateEntered(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(f => f.DateEntered != null) 
                        : queryable.Where(f => f.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(f => f.DateEntered == null) 
                        : queryable.Where(f => f.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByDateEntered(this IQueryable<Malldub.Data.FundUpdate> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByDateEntered(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundUpdate, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToFacebook">PostedToFacebook to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToFacebook(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToFacebook)
        {
            return queryable.Where(f => f.PostedToFacebook == postedToFacebook);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToFacebook">PostedToFacebook to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToFacebook(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.Boolean postedToFacebook)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.PostedToFacebook != postedToFacebook);
                default:
                    return queryable.Where(f => f.PostedToFacebook == postedToFacebook);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToFacebook">PostedToFacebook to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToFacebook(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToFacebook, params System.Boolean[] additionalValues)
        {
            var postedToFacebookList = new List<System.Boolean> { postedToFacebook };

            if (additionalValues != null)
                postedToFacebookList.AddRange(additionalValues);

            if (postedToFacebookList.Count == 1)
                return queryable.ByPostedToFacebook(postedToFacebookList[0]);

            return queryable.ByPostedToFacebook(postedToFacebookList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToFacebook(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.PostedToFacebook));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToEmail">PostedToEmail to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToEmail(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToEmail)
        {
            return queryable.Where(f => f.PostedToEmail == postedToEmail);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToEmail">PostedToEmail to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToEmail(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.Boolean postedToEmail)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.PostedToEmail != postedToEmail);
                default:
                    return queryable.Where(f => f.PostedToEmail == postedToEmail);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToEmail">PostedToEmail to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToEmail(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToEmail, params System.Boolean[] additionalValues)
        {
            var postedToEmailList = new List<System.Boolean> { postedToEmail };

            if (additionalValues != null)
                postedToEmailList.AddRange(additionalValues);

            if (postedToEmailList.Count == 1)
                return queryable.ByPostedToEmail(postedToEmailList[0]);

            return queryable.ByPostedToEmail(postedToEmailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToEmail(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.PostedToEmail));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToTwitter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToTwitter">PostedToTwitter to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToTwitter(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToTwitter)
        {
            return queryable.Where(f => f.PostedToTwitter == postedToTwitter);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToTwitter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToTwitter">PostedToTwitter to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToTwitter(this IQueryable<Malldub.Data.FundUpdate> queryable, ComparisonOperator comparisonOperator, System.Boolean postedToTwitter)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.PostedToTwitter != postedToTwitter);
                default:
                    return queryable.Where(f => f.PostedToTwitter == postedToTwitter);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToTwitter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postedToTwitter">PostedToTwitter to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToTwitter(this IQueryable<Malldub.Data.FundUpdate> queryable, System.Boolean postedToTwitter, params System.Boolean[] additionalValues)
        {
            var postedToTwitterList = new List<System.Boolean> { postedToTwitter };

            if (additionalValues != null)
                postedToTwitterList.AddRange(additionalValues);

            if (postedToTwitterList.Count == 1)
                return queryable.ByPostedToTwitter(postedToTwitterList[0]);

            return queryable.ByPostedToTwitter(postedToTwitterList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUpdate.PostedToTwitter"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUpdate> ByPostedToTwitter(this IQueryable<Malldub.Data.FundUpdate> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.PostedToTwitter));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundUpdate> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundUpdate.FirstOrDefault(f => f.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundUpdate> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundUpdate.FirstOrDefault(f => f.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

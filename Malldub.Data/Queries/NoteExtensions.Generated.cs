#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Note.
    /// </summary>
    public static partial class NoteExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Note GetByKey(this IQueryable<Malldub.Data.Note> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(n => n.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Note GetByIdentification(this IQueryable<Malldub.Data.Note> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Note>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(n => n.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIdentification(this IQueryable<Malldub.Data.Note> queryable, System.Int32 identification)
        {
            return queryable.Where(n => n.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIdentification(this IQueryable<Malldub.Data.Note> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(n => n.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(n => n.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(n => n.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(n => n.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(n => n.Identification != identification);
                default:
                    return queryable.Where(n => n.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIdentification(this IQueryable<Malldub.Data.Note> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIdentification(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(n => values.Contains(n.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySubject(this IQueryable<Malldub.Data.Note> queryable, System.String subject)
        {
            return queryable.Where(n => n.Subject == subject);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySubject(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String subject)
        {
            if (subject == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subject", "Parameter 'subject' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.Subject.Contains(subject));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.Subject.StartsWith(subject));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.Subject.EndsWith(subject));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.Subject.Contains(subject) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(n => n.Subject != subject);
                default:
                    return queryable.Where(n => n.Subject == subject);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySubject(this IQueryable<Malldub.Data.Note> queryable, System.String subject, params System.String[] additionalValues)
        {
            var subjectList = new List<System.String> { subject };

            if (additionalValues != null)
                subjectList.AddRange(additionalValues);

            if (subjectList.Count == 1)
                return queryable.BySubject(subjectList[0]);

            return queryable.BySubject(subjectList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySubject(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(n => values.Contains(n.Subject));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByComments(this IQueryable<Malldub.Data.Note> queryable, System.String comments)
        {
            return queryable.Where(n => n.Comments == comments);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByComments(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String comments)
        {
            if (comments == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("comments", "Parameter 'comments' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.Comments.Contains(comments));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.Comments.StartsWith(comments));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.Comments.EndsWith(comments));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.Comments.Contains(comments) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(n => n.Comments != comments);
                default:
                    return queryable.Where(n => n.Comments == comments);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comments">Comments to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByComments(this IQueryable<Malldub.Data.Note> queryable, System.String comments, params System.String[] additionalValues)
        {
            var commentsList = new List<System.String> { comments };

            if (additionalValues != null)
                commentsList.AddRange(additionalValues);

            if (commentsList.Count == 1)
                return queryable.ByComments(commentsList[0]);

            return queryable.ByComments(commentsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Comments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByComments(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(n => values.Contains(n.Comments));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Sent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sent">Sent to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySent(this IQueryable<Malldub.Data.Note> queryable, System.Boolean sent)
        {
            return queryable.Where(n => n.Sent == sent);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Sent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sent">Sent to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySent(this IQueryable<Malldub.Data.Note> queryable, ComparisonOperator comparisonOperator, System.Boolean sent)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(n => n.Sent != sent);
                default:
                    return queryable.Where(n => n.Sent == sent);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Sent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sent">Sent to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySent(this IQueryable<Malldub.Data.Note> queryable, System.Boolean sent, params System.Boolean[] additionalValues)
        {
            var sentList = new List<System.Boolean> { sent };

            if (additionalValues != null)
                sentList.AddRange(additionalValues);

            if (sentList.Count == 1)
                return queryable.BySent(sentList[0]);

            return queryable.BySent(sentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Sent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> BySent(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(n => values.Contains(n.Sent));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIsPrivate(this IQueryable<Malldub.Data.Note> queryable, System.Boolean isPrivate)
        {
            return queryable.Where(n => n.IsPrivate == isPrivate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIsPrivate(this IQueryable<Malldub.Data.Note> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrivate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(n => n.IsPrivate != isPrivate);
                default:
                    return queryable.Where(n => n.IsPrivate == isPrivate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIsPrivate(this IQueryable<Malldub.Data.Note> queryable, System.Boolean isPrivate, params System.Boolean[] additionalValues)
        {
            var isPrivateList = new List<System.Boolean> { isPrivate };

            if (additionalValues != null)
                isPrivateList.AddRange(additionalValues);

            if (isPrivateList.Count == 1)
                return queryable.ByIsPrivate(isPrivateList[0]);

            return queryable.ByIsPrivate(isPrivateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByIsPrivate(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(n => values.Contains(n.IsPrivate));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByTypeId(this IQueryable<Malldub.Data.Note> queryable, System.String typeId)
        {
            return queryable.Where(n => n.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByTypeId(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(n => n.TypeId != typeId);
                default:
                    return queryable.Where(n => n.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByTypeId(this IQueryable<Malldub.Data.Note> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByTypeId(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(n => values.Contains(n.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByDateEntered(this IQueryable<Malldub.Data.Note> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(n => n.DateEntered == null) 
                : queryable.Where(n => n.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByDateEntered(this IQueryable<Malldub.Data.Note> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(n => n.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(n => n.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(n => n.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(n => n.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(n => n.DateEntered != null) 
                        : queryable.Where(n => n.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(n => n.DateEntered == null) 
                        : queryable.Where(n => n.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByDateEntered(this IQueryable<Malldub.Data.Note> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByDateEntered(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Note, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.ApplicationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationId">ApplicationId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByApplicationId(this IQueryable<Malldub.Data.Note> queryable, System.String applicationId)
        {
            return queryable.Where(n => n.ApplicationId == applicationId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.ApplicationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationId">ApplicationId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByApplicationId(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String applicationId)
        {
            if (applicationId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("applicationId", "Parameter 'applicationId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.ApplicationId.Contains(applicationId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.ApplicationId.StartsWith(applicationId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.ApplicationId.EndsWith(applicationId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.ApplicationId.Contains(applicationId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(n => n.ApplicationId != applicationId);
                default:
                    return queryable.Where(n => n.ApplicationId == applicationId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.ApplicationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applicationId">ApplicationId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByApplicationId(this IQueryable<Malldub.Data.Note> queryable, System.String applicationId, params System.String[] additionalValues)
        {
            var applicationIdList = new List<System.String> { applicationId };

            if (additionalValues != null)
                applicationIdList.AddRange(additionalValues);

            if (applicationIdList.Count == 1)
                return queryable.ByApplicationId(applicationIdList[0]);

            return queryable.ByApplicationId(applicationIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.ApplicationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByApplicationId(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(n => values.Contains(n.ApplicationId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Viewed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="viewed">Viewed to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByViewed(this IQueryable<Malldub.Data.Note> queryable, System.Boolean viewed)
        {
            return queryable.Where(n => n.Viewed == viewed);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Viewed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="viewed">Viewed to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByViewed(this IQueryable<Malldub.Data.Note> queryable, ComparisonOperator comparisonOperator, System.Boolean viewed)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(n => n.Viewed != viewed);
                default:
                    return queryable.Where(n => n.Viewed == viewed);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Viewed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="viewed">Viewed to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByViewed(this IQueryable<Malldub.Data.Note> queryable, System.Boolean viewed, params System.Boolean[] additionalValues)
        {
            var viewedList = new List<System.Boolean> { viewed };

            if (additionalValues != null)
                viewedList.AddRange(additionalValues);

            if (viewedList.Count == 1)
                return queryable.ByViewed(viewedList[0]);

            return queryable.ByViewed(viewedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Viewed"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByViewed(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(n => values.Contains(n.Viewed));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByEmail(this IQueryable<Malldub.Data.Note> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(n => n.Email == null) 
                : queryable.Where(n => n.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByEmail(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(n => n.Email != null) 
                        : queryable.Where(n => n.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(n => n.Email == null) 
                        : queryable.Where(n => n.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByEmail(this IQueryable<Malldub.Data.Note> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByEmail(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Note, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByFirstName(this IQueryable<Malldub.Data.Note> queryable, System.String firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(n => n.FirstName == null) 
                : queryable.Where(n => n.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByFirstName(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(n => n.FirstName != null) 
                        : queryable.Where(n => n.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(n => n.FirstName == null) 
                        : queryable.Where(n => n.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByFirstName(this IQueryable<Malldub.Data.Note> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByFirstName(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Note, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByLastName(this IQueryable<Malldub.Data.Note> queryable, System.String lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(n => n.LastName == null) 
                : queryable.Where(n => n.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByLastName(this IQueryable<Malldub.Data.Note> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(n => n.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(n => n.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(n => n.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(n => n.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(n => n.LastName != null) 
                        : queryable.Where(n => n.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(n => n.LastName == null) 
                        : queryable.Where(n => n.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByLastName(this IQueryable<Malldub.Data.Note> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Note.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Note> ByLastName(this IQueryable<Malldub.Data.Note> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Note, bool>("LastName", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Note> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Note.FirstOrDefault(n => n.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Note> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Note.FirstOrDefault(n => n.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

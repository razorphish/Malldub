#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for ListPortalPostAttribute.
    /// </summary>
    public static partial class ListPortalPostAttributeExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.ListPortalPostAttribute GetByKey(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.Int32 postFieldId, System.Int32 listPortalPostId)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.ListPortalPostAttribute>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, postFieldId, listPortalPostId);

            return queryable.FirstOrDefault(l => l.PostFieldId == postFieldId 
					&& l.ListPortalPostId == listPortalPostId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.PostFieldId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postFieldId">PostFieldId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByPostFieldId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.Int32 postFieldId)
        {
            return queryable.Where(l => l.PostFieldId == postFieldId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.PostFieldId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postFieldId">PostFieldId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByPostFieldId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, ComparisonOperator comparisonOperator, System.Int32 postFieldId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.PostFieldId > postFieldId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.PostFieldId >= postFieldId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.PostFieldId < postFieldId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.PostFieldId <= postFieldId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.PostFieldId != postFieldId);
                default:
                    return queryable.Where(l => l.PostFieldId == postFieldId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.PostFieldId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postFieldId">PostFieldId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByPostFieldId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.Int32 postFieldId, params System.Int32[] additionalValues)
        {
            var postFieldIdList = new List<System.Int32> { postFieldId };

            if (additionalValues != null)
                postFieldIdList.AddRange(additionalValues);

            if (postFieldIdList.Count == 1)
                return queryable.ByPostFieldId(postFieldIdList[0]);

            return queryable.ByPostFieldId(postFieldIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.PostFieldId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByPostFieldId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.PostFieldId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.ListPortalPostId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalPostId">ListPortalPostId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByListPortalPostId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.Int32 listPortalPostId)
        {
            return queryable.Where(l => l.ListPortalPostId == listPortalPostId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.ListPortalPostId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalPostId">ListPortalPostId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByListPortalPostId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, ComparisonOperator comparisonOperator, System.Int32 listPortalPostId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.ListPortalPostId > listPortalPostId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.ListPortalPostId >= listPortalPostId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.ListPortalPostId < listPortalPostId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.ListPortalPostId <= listPortalPostId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.ListPortalPostId != listPortalPostId);
                default:
                    return queryable.Where(l => l.ListPortalPostId == listPortalPostId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.ListPortalPostId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalPostId">ListPortalPostId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByListPortalPostId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.Int32 listPortalPostId, params System.Int32[] additionalValues)
        {
            var listPortalPostIdList = new List<System.Int32> { listPortalPostId };

            if (additionalValues != null)
                listPortalPostIdList.AddRange(additionalValues);

            if (listPortalPostIdList.Count == 1)
                return queryable.ByListPortalPostId(listPortalPostIdList[0]);

            return queryable.ByListPortalPostId(listPortalPostIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.ListPortalPostId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByListPortalPostId(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.ListPortalPostId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.FieldContent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fieldContent">FieldContent to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByFieldContent(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.String fieldContent)
        {
            // support nulls
            return fieldContent == null 
                ? queryable.Where(l => l.FieldContent == null) 
                : queryable.Where(l => l.FieldContent == fieldContent);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.FieldContent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fieldContent">FieldContent to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByFieldContent(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, ContainmentOperator containmentOperator, System.String fieldContent)
        {
            if (fieldContent == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("fieldContent", "Parameter 'fieldContent' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.FieldContent.Contains(fieldContent));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.FieldContent.StartsWith(fieldContent));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.FieldContent.EndsWith(fieldContent));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.FieldContent.Contains(fieldContent) == false);
                case ContainmentOperator.NotEquals:
                    return fieldContent == null 
                        ? queryable.Where(l => l.FieldContent != null) 
                        : queryable.Where(l => l.FieldContent != fieldContent);
                default:
                    return fieldContent == null 
                        ? queryable.Where(l => l.FieldContent == null) 
                        : queryable.Where(l => l.FieldContent == fieldContent);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.FieldContent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fieldContent">FieldContent to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByFieldContent(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, System.String fieldContent, params System.String[] additionalValues)
        {
            var fieldContentList = new List<System.String> { fieldContent };

            if (additionalValues != null)
                fieldContentList.AddRange(additionalValues);
            else
                fieldContentList.Add(null);

            if (fieldContentList.Count == 1)
                return queryable.ByFieldContent(fieldContentList[0]);

            return queryable.ByFieldContent(fieldContentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPortalPostAttribute.FieldContent"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPortalPostAttribute> ByFieldContent(this IQueryable<Malldub.Data.ListPortalPostAttribute> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ListPortalPostAttribute, bool>("FieldContent", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.Int32, Malldub.Data.ListPortalPostAttribute> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 postFieldId, System.Int32 listPortalPostId) =>
                        db.ListPortalPostAttribute.FirstOrDefault(l => l.PostFieldId == postFieldId 
							&& l.ListPortalPostId == listPortalPostId));
        }
        #endregion
    }
}
#pragma warning restore 1591

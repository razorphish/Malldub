#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Fund.
    /// </summary>
    public static partial class FundExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Fund GetByKey(this IQueryable<Malldub.Data.Fund> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(f => f.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Fund GetByIdentification(this IQueryable<Malldub.Data.Fund> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Fund>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIdentification(this IQueryable<Malldub.Data.Fund> queryable, System.Int32 identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIdentification(this IQueryable<Malldub.Data.Fund> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIdentification(this IQueryable<Malldub.Data.Fund> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIdentification(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByGoalAmount(this IQueryable<Malldub.Data.Fund> queryable, System.Decimal goalAmount)
        {
            return queryable.Where(f => f.GoalAmount == goalAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByGoalAmount(this IQueryable<Malldub.Data.Fund> queryable, ComparisonOperator comparisonOperator, System.Decimal goalAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.GoalAmount > goalAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.GoalAmount >= goalAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.GoalAmount < goalAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.GoalAmount <= goalAmount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.GoalAmount != goalAmount);
                default:
                    return queryable.Where(f => f.GoalAmount == goalAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="goalAmount">GoalAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByGoalAmount(this IQueryable<Malldub.Data.Fund> queryable, System.Decimal goalAmount, params System.Decimal[] additionalValues)
        {
            var goalAmountList = new List<System.Decimal> { goalAmount };

            if (additionalValues != null)
                goalAmountList.AddRange(additionalValues);

            if (goalAmountList.Count == 1)
                return queryable.ByGoalAmount(goalAmountList[0]);

            return queryable.ByGoalAmount(goalAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.GoalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByGoalAmount(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(f => values.Contains(f.GoalAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByTypeId(this IQueryable<Malldub.Data.Fund> queryable, System.String typeId)
        {
            return queryable.Where(f => f.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByTypeId(this IQueryable<Malldub.Data.Fund> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.TypeId != typeId);
                default:
                    return queryable.Where(f => f.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByTypeId(this IQueryable<Malldub.Data.Fund> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByTypeId(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIsPrivate(this IQueryable<Malldub.Data.Fund> queryable, System.Boolean isPrivate)
        {
            return queryable.Where(f => f.IsPrivate == isPrivate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIsPrivate(this IQueryable<Malldub.Data.Fund> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrivate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.IsPrivate != isPrivate);
                default:
                    return queryable.Where(f => f.IsPrivate == isPrivate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIsPrivate(this IQueryable<Malldub.Data.Fund> queryable, System.Boolean isPrivate, params System.Boolean[] additionalValues)
        {
            var isPrivateList = new List<System.Boolean> { isPrivate };

            if (additionalValues != null)
                isPrivateList.AddRange(additionalValues);

            if (isPrivateList.Count == 1)
                return queryable.ByIsPrivate(isPrivateList[0]);

            return queryable.ByIsPrivate(isPrivateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByIsPrivate(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.IsPrivate));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.EnableSocialSharing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="enableSocialSharing">EnableSocialSharing to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByEnableSocialSharing(this IQueryable<Malldub.Data.Fund> queryable, System.Boolean enableSocialSharing)
        {
            return queryable.Where(f => f.EnableSocialSharing == enableSocialSharing);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.EnableSocialSharing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="enableSocialSharing">EnableSocialSharing to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByEnableSocialSharing(this IQueryable<Malldub.Data.Fund> queryable, ComparisonOperator comparisonOperator, System.Boolean enableSocialSharing)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EnableSocialSharing != enableSocialSharing);
                default:
                    return queryable.Where(f => f.EnableSocialSharing == enableSocialSharing);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.EnableSocialSharing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="enableSocialSharing">EnableSocialSharing to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByEnableSocialSharing(this IQueryable<Malldub.Data.Fund> queryable, System.Boolean enableSocialSharing, params System.Boolean[] additionalValues)
        {
            var enableSocialSharingList = new List<System.Boolean> { enableSocialSharing };

            if (additionalValues != null)
                enableSocialSharingList.AddRange(additionalValues);

            if (enableSocialSharingList.Count == 1)
                return queryable.ByEnableSocialSharing(enableSocialSharingList[0]);

            return queryable.ByEnableSocialSharing(enableSocialSharingList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.EnableSocialSharing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByEnableSocialSharing(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EnableSocialSharing));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageColor"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageColor">PageColor to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageColor(this IQueryable<Malldub.Data.Fund> queryable, System.String pageColor)
        {
            return queryable.Where(f => f.PageColor == pageColor);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageColor"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageColor">PageColor to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageColor(this IQueryable<Malldub.Data.Fund> queryable, ContainmentOperator containmentOperator, System.String pageColor)
        {
            if (pageColor == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("pageColor", "Parameter 'pageColor' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.PageColor.Contains(pageColor));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.PageColor.StartsWith(pageColor));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.PageColor.EndsWith(pageColor));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.PageColor.Contains(pageColor) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.PageColor != pageColor);
                default:
                    return queryable.Where(f => f.PageColor == pageColor);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageColor"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageColor">PageColor to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageColor(this IQueryable<Malldub.Data.Fund> queryable, System.String pageColor, params System.String[] additionalValues)
        {
            var pageColorList = new List<System.String> { pageColor };

            if (additionalValues != null)
                pageColorList.AddRange(additionalValues);

            if (pageColorList.Count == 1)
                return queryable.ByPageColor(pageColorList[0]);

            return queryable.ByPageColor(pageColorList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageColor"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageColor(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.PageColor));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByCategoryId(this IQueryable<Malldub.Data.Fund> queryable, System.String categoryId)
        {
            // support nulls
            return categoryId == null 
                ? queryable.Where(f => f.CategoryId == null) 
                : queryable.Where(f => f.CategoryId == categoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByCategoryId(this IQueryable<Malldub.Data.Fund> queryable, ContainmentOperator containmentOperator, System.String categoryId)
        {
            if (categoryId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryId", "Parameter 'categoryId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.CategoryId.Contains(categoryId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.CategoryId.StartsWith(categoryId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.CategoryId.EndsWith(categoryId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.CategoryId.Contains(categoryId) == false);
                case ContainmentOperator.NotEquals:
                    return categoryId == null 
                        ? queryable.Where(f => f.CategoryId != null) 
                        : queryable.Where(f => f.CategoryId != categoryId);
                default:
                    return categoryId == null 
                        ? queryable.Where(f => f.CategoryId == null) 
                        : queryable.Where(f => f.CategoryId == categoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByCategoryId(this IQueryable<Malldub.Data.Fund> queryable, System.String categoryId, params System.String[] additionalValues)
        {
            var categoryIdList = new List<System.String> { categoryId };

            if (additionalValues != null)
                categoryIdList.AddRange(additionalValues);
            else
                categoryIdList.Add(null);

            if (categoryIdList.Count == 1)
                return queryable.ByCategoryId(categoryIdList[0]);

            return queryable.ByCategoryId(categoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByCategoryId(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Fund, bool>("CategoryId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageSkin"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageSkin">PageSkin to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageSkin(this IQueryable<Malldub.Data.Fund> queryable, System.String pageSkin)
        {
            return queryable.Where(f => f.PageSkin == pageSkin);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageSkin"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageSkin">PageSkin to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageSkin(this IQueryable<Malldub.Data.Fund> queryable, ContainmentOperator containmentOperator, System.String pageSkin)
        {
            if (pageSkin == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("pageSkin", "Parameter 'pageSkin' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.PageSkin.Contains(pageSkin));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.PageSkin.StartsWith(pageSkin));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.PageSkin.EndsWith(pageSkin));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.PageSkin.Contains(pageSkin) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.PageSkin != pageSkin);
                default:
                    return queryable.Where(f => f.PageSkin == pageSkin);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageSkin"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageSkin">PageSkin to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageSkin(this IQueryable<Malldub.Data.Fund> queryable, System.String pageSkin, params System.String[] additionalValues)
        {
            var pageSkinList = new List<System.String> { pageSkin };

            if (additionalValues != null)
                pageSkinList.AddRange(additionalValues);

            if (pageSkinList.Count == 1)
                return queryable.ByPageSkin(pageSkinList[0]);

            return queryable.ByPageSkin(pageSkinList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageSkin"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageSkin(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.PageSkin));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageLayout"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageLayout">PageLayout to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageLayout(this IQueryable<Malldub.Data.Fund> queryable, System.String pageLayout)
        {
            return queryable.Where(f => f.PageLayout == pageLayout);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageLayout"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageLayout">PageLayout to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageLayout(this IQueryable<Malldub.Data.Fund> queryable, ContainmentOperator containmentOperator, System.String pageLayout)
        {
            if (pageLayout == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("pageLayout", "Parameter 'pageLayout' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.PageLayout.Contains(pageLayout));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.PageLayout.StartsWith(pageLayout));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.PageLayout.EndsWith(pageLayout));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.PageLayout.Contains(pageLayout) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.PageLayout != pageLayout);
                default:
                    return queryable.Where(f => f.PageLayout == pageLayout);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageLayout"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pageLayout">PageLayout to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageLayout(this IQueryable<Malldub.Data.Fund> queryable, System.String pageLayout, params System.String[] additionalValues)
        {
            var pageLayoutList = new List<System.String> { pageLayout };

            if (additionalValues != null)
                pageLayoutList.AddRange(additionalValues);

            if (pageLayoutList.Count == 1)
                return queryable.ByPageLayout(pageLayoutList[0]);

            return queryable.ByPageLayout(pageLayoutList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Fund.PageLayout"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Fund> ByPageLayout(this IQueryable<Malldub.Data.Fund> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.PageLayout));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Fund> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Fund.FirstOrDefault(f => f.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Fund> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Fund.FirstOrDefault(f => f.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

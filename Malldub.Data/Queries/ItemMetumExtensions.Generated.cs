#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for ItemMetum.
    /// </summary>
    public static partial class ItemMetumExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.ItemMetum GetByKey(this IQueryable<Malldub.Data.ItemMetum> queryable, System.Int32 itemId, System.String metaKeyId)
        {
            return queryable.FirstOrDefault(i => i.ItemId == itemId 
					&& i.MetaKeyId == metaKeyId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByItemId(this IQueryable<Malldub.Data.ItemMetum> queryable, System.Int32 itemId)
        {
            return queryable.Where(i => i.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByItemId(this IQueryable<Malldub.Data.ItemMetum> queryable, ComparisonOperator comparisonOperator, System.Int32 itemId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.ItemId > itemId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.ItemId >= itemId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.ItemId < itemId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.ItemId <= itemId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.ItemId != itemId);
                default:
                    return queryable.Where(i => i.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByItemId(this IQueryable<Malldub.Data.ItemMetum> queryable, System.Int32 itemId, params System.Int32[] additionalValues)
        {
            var itemIdList = new List<System.Int32> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByItemId(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.MetaKeyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="metaKeyId">MetaKeyId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByMetaKeyId(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String metaKeyId)
        {
            return queryable.Where(i => i.MetaKeyId == metaKeyId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.MetaKeyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="metaKeyId">MetaKeyId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByMetaKeyId(this IQueryable<Malldub.Data.ItemMetum> queryable, ContainmentOperator containmentOperator, System.String metaKeyId)
        {
            if (metaKeyId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("metaKeyId", "Parameter 'metaKeyId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.MetaKeyId.Contains(metaKeyId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.MetaKeyId.StartsWith(metaKeyId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.MetaKeyId.EndsWith(metaKeyId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.MetaKeyId.Contains(metaKeyId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.MetaKeyId != metaKeyId);
                default:
                    return queryable.Where(i => i.MetaKeyId == metaKeyId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.MetaKeyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="metaKeyId">MetaKeyId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByMetaKeyId(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String metaKeyId, params System.String[] additionalValues)
        {
            var metaKeyIdList = new List<System.String> { metaKeyId };

            if (additionalValues != null)
                metaKeyIdList.AddRange(additionalValues);

            if (metaKeyIdList.Count == 1)
                return queryable.ByMetaKeyId(metaKeyIdList[0]);

            return queryable.ByMetaKeyId(metaKeyIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.MetaKeyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByMetaKeyId(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.MetaKeyId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.StringValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="stringValue">StringValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByStringValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String stringValue)
        {
            // support nulls
            return stringValue == null 
                ? queryable.Where(i => i.StringValue == null) 
                : queryable.Where(i => i.StringValue == stringValue);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.StringValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="stringValue">StringValue to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByStringValue(this IQueryable<Malldub.Data.ItemMetum> queryable, ContainmentOperator containmentOperator, System.String stringValue)
        {
            if (stringValue == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("stringValue", "Parameter 'stringValue' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.StringValue.Contains(stringValue));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.StringValue.StartsWith(stringValue));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.StringValue.EndsWith(stringValue));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.StringValue.Contains(stringValue) == false);
                case ContainmentOperator.NotEquals:
                    return stringValue == null 
                        ? queryable.Where(i => i.StringValue != null) 
                        : queryable.Where(i => i.StringValue != stringValue);
                default:
                    return stringValue == null 
                        ? queryable.Where(i => i.StringValue == null) 
                        : queryable.Where(i => i.StringValue == stringValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.StringValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="stringValue">StringValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByStringValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String stringValue, params System.String[] additionalValues)
        {
            var stringValueList = new List<System.String> { stringValue };

            if (additionalValues != null)
                stringValueList.AddRange(additionalValues);
            else
                stringValueList.Add(null);

            if (stringValueList.Count == 1)
                return queryable.ByStringValue(stringValueList[0]);

            return queryable.ByStringValue(stringValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.StringValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByStringValue(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ItemMetum, bool>("StringValue", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.NumericValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numericValue">NumericValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByNumericValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.Decimal? numericValue)
        {
            // support nulls
            return numericValue == null 
                ? queryable.Where(i => i.NumericValue == null) 
                : queryable.Where(i => i.NumericValue == numericValue);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.NumericValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numericValue">NumericValue to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByNumericValue(this IQueryable<Malldub.Data.ItemMetum> queryable, ComparisonOperator comparisonOperator, System.Decimal? numericValue)
        {
            if (numericValue == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("numericValue", "Parameter 'numericValue' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.NumericValue > numericValue);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.NumericValue >= numericValue);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.NumericValue < numericValue);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.NumericValue <= numericValue);
                case ComparisonOperator.NotEquals:
                    return numericValue == null 
                        ? queryable.Where(i => i.NumericValue != null) 
                        : queryable.Where(i => i.NumericValue != numericValue);
                default:
                    return numericValue == null 
                        ? queryable.Where(i => i.NumericValue == null) 
                        : queryable.Where(i => i.NumericValue == numericValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.NumericValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="numericValue">NumericValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByNumericValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.Decimal? numericValue, params System.Decimal?[] additionalValues)
        {
            var numericValueList = new List<System.Decimal?> { numericValue };

            if (additionalValues != null)
                numericValueList.AddRange(additionalValues);
            else
                numericValueList.Add(null);

            if (numericValueList.Count == 1)
                return queryable.ByNumericValue(numericValueList[0]);

            return queryable.ByNumericValue(numericValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.NumericValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByNumericValue(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ItemMetum, bool>("NumericValue", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.DateValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateValue">DateValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByDateValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.DateTime? dateValue)
        {
            // support nulls
            return dateValue == null 
                ? queryable.Where(i => i.DateValue == null) 
                : queryable.Where(i => i.DateValue == dateValue);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.DateValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateValue">DateValue to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByDateValue(this IQueryable<Malldub.Data.ItemMetum> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateValue)
        {
            if (dateValue == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateValue", "Parameter 'dateValue' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateValue > dateValue);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateValue >= dateValue);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateValue < dateValue);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateValue <= dateValue);
                case ComparisonOperator.NotEquals:
                    return dateValue == null 
                        ? queryable.Where(i => i.DateValue != null) 
                        : queryable.Where(i => i.DateValue != dateValue);
                default:
                    return dateValue == null 
                        ? queryable.Where(i => i.DateValue == null) 
                        : queryable.Where(i => i.DateValue == dateValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.DateValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateValue">DateValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByDateValue(this IQueryable<Malldub.Data.ItemMetum> queryable, System.DateTime? dateValue, params System.DateTime?[] additionalValues)
        {
            var dateValueList = new List<System.DateTime?> { dateValue };

            if (additionalValues != null)
                dateValueList.AddRange(additionalValues);
            else
                dateValueList.Add(null);

            if (dateValueList.Count == 1)
                return queryable.ByDateValue(dateValueList[0]);

            return queryable.ByDateValue(dateValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.DateValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByDateValue(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ItemMetum, bool>("DateValue", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.XmlDom"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlDom">XmlDom to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByXmlDom(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String xmlDom)
        {
            // support nulls
            return xmlDom == null 
                ? queryable.Where(i => i.XmlDom == null) 
                : queryable.Where(i => i.XmlDom == xmlDom);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.XmlDom"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlDom">XmlDom to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByXmlDom(this IQueryable<Malldub.Data.ItemMetum> queryable, ContainmentOperator containmentOperator, System.String xmlDom)
        {
            if (xmlDom == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("xmlDom", "Parameter 'xmlDom' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.XmlDom.Contains(xmlDom));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.XmlDom.StartsWith(xmlDom));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.XmlDom.EndsWith(xmlDom));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.XmlDom.Contains(xmlDom) == false);
                case ContainmentOperator.NotEquals:
                    return xmlDom == null 
                        ? queryable.Where(i => i.XmlDom != null) 
                        : queryable.Where(i => i.XmlDom != xmlDom);
                default:
                    return xmlDom == null 
                        ? queryable.Where(i => i.XmlDom == null) 
                        : queryable.Where(i => i.XmlDom == xmlDom);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.XmlDom"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xmlDom">XmlDom to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByXmlDom(this IQueryable<Malldub.Data.ItemMetum> queryable, System.String xmlDom, params System.String[] additionalValues)
        {
            var xmlDomList = new List<System.String> { xmlDom };

            if (additionalValues != null)
                xmlDomList.AddRange(additionalValues);
            else
                xmlDomList.Add(null);

            if (xmlDomList.Count == 1)
                return queryable.ByXmlDom(xmlDomList[0]);

            return queryable.ByXmlDom(xmlDomList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ItemMetum.XmlDom"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ItemMetum> ByXmlDom(this IQueryable<Malldub.Data.ItemMetum> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ItemMetum, bool>("XmlDom", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.String, Malldub.Data.ItemMetum> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 itemId, System.String metaKeyId) =>
                        db.ItemMetum.FirstOrDefault(i => i.ItemId == itemId 
							&& i.MetaKeyId == metaKeyId));
        }
        #endregion
    }
}
#pragma warning restore 1591

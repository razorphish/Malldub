#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for InvoiceItem.
    /// </summary>
    public static partial class InvoiceItemExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.InvoiceItem GetByKey(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(i => i.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.InvoiceItem GetByIdentification(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.InvoiceItem>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByIdentification(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 identification)
        {
            return queryable.Where(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByIdentification(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Identification != identification);
                default:
                    return queryable.Where(i => i.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByIdentification(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByIdentification(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByInvoiceId(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 invoiceId)
        {
            return queryable.Where(i => i.InvoiceId == invoiceId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByInvoiceId(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Int32 invoiceId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.InvoiceId > invoiceId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.InvoiceId >= invoiceId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.InvoiceId < invoiceId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.InvoiceId <= invoiceId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.InvoiceId != invoiceId);
                default:
                    return queryable.Where(i => i.InvoiceId == invoiceId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByInvoiceId(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 invoiceId, params System.Int32[] additionalValues)
        {
            var invoiceIdList = new List<System.Int32> { invoiceId };

            if (additionalValues != null)
                invoiceIdList.AddRange(additionalValues);

            if (invoiceIdList.Count == 1)
                return queryable.ByInvoiceId(invoiceIdList[0]);

            return queryable.ByInvoiceId(invoiceIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByInvoiceId(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.InvoiceId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByPaymentItemId(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 paymentItemId)
        {
            return queryable.Where(i => i.PaymentItemId == paymentItemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByPaymentItemId(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Int32 paymentItemId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.PaymentItemId > paymentItemId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.PaymentItemId >= paymentItemId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.PaymentItemId < paymentItemId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.PaymentItemId <= paymentItemId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.PaymentItemId != paymentItemId);
                default:
                    return queryable.Where(i => i.PaymentItemId == paymentItemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByPaymentItemId(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Int32 paymentItemId, params System.Int32[] additionalValues)
        {
            var paymentItemIdList = new List<System.Int32> { paymentItemId };

            if (additionalValues != null)
                paymentItemIdList.AddRange(additionalValues);

            if (paymentItemIdList.Count == 1)
                return queryable.ByPaymentItemId(paymentItemIdList[0]);

            return queryable.ByPaymentItemId(paymentItemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByPaymentItemId(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.PaymentItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByQuantity(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Byte quantity)
        {
            return queryable.Where(i => i.Quantity == quantity);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByQuantity(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Byte quantity)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Quantity > quantity);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Quantity >= quantity);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Quantity < quantity);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Quantity <= quantity);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Quantity != quantity);
                default:
                    return queryable.Where(i => i.Quantity == quantity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="quantity">Quantity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByQuantity(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Byte quantity, params System.Byte[] additionalValues)
        {
            var quantityList = new List<System.Byte> { quantity };

            if (additionalValues != null)
                quantityList.AddRange(additionalValues);

            if (quantityList.Count == 1)
                return queryable.ByQuantity(quantityList[0]);

            return queryable.ByQuantity(quantityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Quantity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByQuantity(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Byte> values)
        {
            return queryable.Where(i => values.Contains(i.Quantity));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByAmount(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Decimal amount)
        {
            return queryable.Where(i => i.Amount == amount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByAmount(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Decimal amount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Amount > amount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Amount >= amount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Amount < amount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Amount <= amount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Amount != amount);
                default:
                    return queryable.Where(i => i.Amount == amount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="amount">Amount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByAmount(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Decimal amount, params System.Decimal[] additionalValues)
        {
            var amountList = new List<System.Decimal> { amount };

            if (additionalValues != null)
                amountList.AddRange(additionalValues);

            if (amountList.Count == 1)
                return queryable.ByAmount(amountList[0]);

            return queryable.ByAmount(amountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.Amount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByAmount(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(i => values.Contains(i.Amount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountValue">DiscountValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountValue(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Decimal? discountValue)
        {
            // support nulls
            return discountValue == null 
                ? queryable.Where(i => i.DiscountValue == null) 
                : queryable.Where(i => i.DiscountValue == discountValue);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountValue">DiscountValue to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountValue(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Decimal? discountValue)
        {
            if (discountValue == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("discountValue", "Parameter 'discountValue' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DiscountValue > discountValue);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DiscountValue >= discountValue);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DiscountValue < discountValue);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DiscountValue <= discountValue);
                case ComparisonOperator.NotEquals:
                    return discountValue == null 
                        ? queryable.Where(i => i.DiscountValue != null) 
                        : queryable.Where(i => i.DiscountValue != discountValue);
                default:
                    return discountValue == null 
                        ? queryable.Where(i => i.DiscountValue == null) 
                        : queryable.Where(i => i.DiscountValue == discountValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountValue">DiscountValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountValue(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Decimal? discountValue, params System.Decimal?[] additionalValues)
        {
            var discountValueList = new List<System.Decimal?> { discountValue };

            if (additionalValues != null)
                discountValueList.AddRange(additionalValues);
            else
                discountValueList.Add(null);

            if (discountValueList.Count == 1)
                return queryable.ByDiscountValue(discountValueList[0]);

            return queryable.ByDiscountValue(discountValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountValue(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.InvoiceItem, bool>("DiscountValue", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountPercentage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountPercentage">DiscountPercentage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountPercentage(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Byte? discountPercentage)
        {
            // support nulls
            return discountPercentage == null 
                ? queryable.Where(i => i.DiscountPercentage == null) 
                : queryable.Where(i => i.DiscountPercentage == discountPercentage);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountPercentage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountPercentage">DiscountPercentage to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountPercentage(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.Byte? discountPercentage)
        {
            if (discountPercentage == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("discountPercentage", "Parameter 'discountPercentage' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DiscountPercentage > discountPercentage);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DiscountPercentage >= discountPercentage);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DiscountPercentage < discountPercentage);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DiscountPercentage <= discountPercentage);
                case ComparisonOperator.NotEquals:
                    return discountPercentage == null 
                        ? queryable.Where(i => i.DiscountPercentage != null) 
                        : queryable.Where(i => i.DiscountPercentage != discountPercentage);
                default:
                    return discountPercentage == null 
                        ? queryable.Where(i => i.DiscountPercentage == null) 
                        : queryable.Where(i => i.DiscountPercentage == discountPercentage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountPercentage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="discountPercentage">DiscountPercentage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountPercentage(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.Byte? discountPercentage, params System.Byte?[] additionalValues)
        {
            var discountPercentageList = new List<System.Byte?> { discountPercentage };

            if (additionalValues != null)
                discountPercentageList.AddRange(additionalValues);
            else
                discountPercentageList.Add(null);

            if (discountPercentageList.Count == 1)
                return queryable.ByDiscountPercentage(discountPercentageList[0]);

            return queryable.ByDiscountPercentage(discountPercentageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DiscountPercentage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDiscountPercentage(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.Byte?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.InvoiceItem, bool>("DiscountPercentage", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateEntered(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(i => i.DateEntered == null) 
                : queryable.Where(i => i.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateEntered(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered != null) 
                        : queryable.Where(i => i.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered == null) 
                        : queryable.Where(i => i.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateEntered(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateEntered(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.InvoiceItem, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateUpdated(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(i => i.DateUpdated == null) 
                : queryable.Where(i => i.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateUpdated(this IQueryable<Malldub.Data.InvoiceItem> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated != null) 
                        : queryable.Where(i => i.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated == null) 
                        : queryable.Where(i => i.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateUpdated(this IQueryable<Malldub.Data.InvoiceItem> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.InvoiceItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.InvoiceItem> ByDateUpdated(this IQueryable<Malldub.Data.InvoiceItem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.InvoiceItem, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.InvoiceItem> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.InvoiceItem.FirstOrDefault(i => i.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.InvoiceItem> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.InvoiceItem.FirstOrDefault(i => i.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

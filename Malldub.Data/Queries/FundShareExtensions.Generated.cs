#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundShare.
    /// </summary>
    public static partial class FundShareExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundShare GetByKey(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(f => f.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundShare GetByIdentification(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.FundShare>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByIdentification(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByIdentification(this IQueryable<Malldub.Data.FundShare> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByIdentification(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByIdentification(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFundId(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFundId(this IQueryable<Malldub.Data.FundShare> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFundId(this IQueryable<Malldub.Data.FundShare> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFundId(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByUserId(this IQueryable<Malldub.Data.FundShare> queryable, System.String userId)
        {
            // support nulls
            return userId == null 
                ? queryable.Where(f => f.UserId == null) 
                : queryable.Where(f => f.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByUserId(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return userId == null 
                        ? queryable.Where(f => f.UserId != null) 
                        : queryable.Where(f => f.UserId != userId);
                default:
                    return userId == null 
                        ? queryable.Where(f => f.UserId == null) 
                        : queryable.Where(f => f.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByUserId(this IQueryable<Malldub.Data.FundShare> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);
            else
                userIdList.Add(null);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByUserId(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("UserId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.SocialId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialId">SocialId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> BySocialId(this IQueryable<Malldub.Data.FundShare> queryable, System.String socialId)
        {
            // support nulls
            return socialId == null 
                ? queryable.Where(f => f.SocialId == null) 
                : queryable.Where(f => f.SocialId == socialId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.SocialId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialId">SocialId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> BySocialId(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String socialId)
        {
            if (socialId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("socialId", "Parameter 'socialId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.SocialId.Contains(socialId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.SocialId.StartsWith(socialId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.SocialId.EndsWith(socialId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.SocialId.Contains(socialId) == false);
                case ContainmentOperator.NotEquals:
                    return socialId == null 
                        ? queryable.Where(f => f.SocialId != null) 
                        : queryable.Where(f => f.SocialId != socialId);
                default:
                    return socialId == null 
                        ? queryable.Where(f => f.SocialId == null) 
                        : queryable.Where(f => f.SocialId == socialId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.SocialId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="socialId">SocialId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> BySocialId(this IQueryable<Malldub.Data.FundShare> queryable, System.String socialId, params System.String[] additionalValues)
        {
            var socialIdList = new List<System.String> { socialId };

            if (additionalValues != null)
                socialIdList.AddRange(additionalValues);
            else
                socialIdList.Add(null);

            if (socialIdList.Count == 1)
                return queryable.BySocialId(socialIdList[0]);

            return queryable.BySocialId(socialIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.SocialId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> BySocialId(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("SocialId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFirstName(this IQueryable<Malldub.Data.FundShare> queryable, System.String firstName)
        {
            // support nulls
            return firstName == null 
                ? queryable.Where(f => f.FirstName == null) 
                : queryable.Where(f => f.FirstName == firstName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFirstName(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String firstName)
        {
            if (firstName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("firstName", "Parameter 'firstName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.FirstName.Contains(firstName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.FirstName.StartsWith(firstName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.FirstName.EndsWith(firstName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.FirstName.Contains(firstName) == false);
                case ContainmentOperator.NotEquals:
                    return firstName == null 
                        ? queryable.Where(f => f.FirstName != null) 
                        : queryable.Where(f => f.FirstName != firstName);
                default:
                    return firstName == null 
                        ? queryable.Where(f => f.FirstName == null) 
                        : queryable.Where(f => f.FirstName == firstName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="firstName">FirstName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFirstName(this IQueryable<Malldub.Data.FundShare> queryable, System.String firstName, params System.String[] additionalValues)
        {
            var firstNameList = new List<System.String> { firstName };

            if (additionalValues != null)
                firstNameList.AddRange(additionalValues);
            else
                firstNameList.Add(null);

            if (firstNameList.Count == 1)
                return queryable.ByFirstName(firstNameList[0]);

            return queryable.ByFirstName(firstNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.FirstName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByFirstName(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("FirstName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByLastName(this IQueryable<Malldub.Data.FundShare> queryable, System.String lastName)
        {
            // support nulls
            return lastName == null 
                ? queryable.Where(f => f.LastName == null) 
                : queryable.Where(f => f.LastName == lastName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByLastName(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String lastName)
        {
            if (lastName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("lastName", "Parameter 'lastName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.LastName.Contains(lastName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.LastName.StartsWith(lastName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.LastName.EndsWith(lastName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.LastName.Contains(lastName) == false);
                case ContainmentOperator.NotEquals:
                    return lastName == null 
                        ? queryable.Where(f => f.LastName != null) 
                        : queryable.Where(f => f.LastName != lastName);
                default:
                    return lastName == null 
                        ? queryable.Where(f => f.LastName == null) 
                        : queryable.Where(f => f.LastName == lastName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="lastName">LastName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByLastName(this IQueryable<Malldub.Data.FundShare> queryable, System.String lastName, params System.String[] additionalValues)
        {
            var lastNameList = new List<System.String> { lastName };

            if (additionalValues != null)
                lastNameList.AddRange(additionalValues);
            else
                lastNameList.Add(null);

            if (lastNameList.Count == 1)
                return queryable.ByLastName(lastNameList[0]);

            return queryable.ByLastName(lastNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.LastName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByLastName(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("LastName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByEmail(this IQueryable<Malldub.Data.FundShare> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(f => f.Email == null) 
                : queryable.Where(f => f.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByEmail(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(f => f.Email != null) 
                        : queryable.Where(f => f.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(f => f.Email == null) 
                        : queryable.Where(f => f.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByEmail(this IQueryable<Malldub.Data.FundShare> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByEmail(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Recipients"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="recipients">Recipients to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByRecipients(this IQueryable<Malldub.Data.FundShare> queryable, System.String recipients)
        {
            // support nulls
            return recipients == null 
                ? queryable.Where(f => f.Recipients == null) 
                : queryable.Where(f => f.Recipients == recipients);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Recipients"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="recipients">Recipients to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByRecipients(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String recipients)
        {
            if (recipients == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("recipients", "Parameter 'recipients' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Recipients.Contains(recipients));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Recipients.StartsWith(recipients));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Recipients.EndsWith(recipients));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Recipients.Contains(recipients) == false);
                case ContainmentOperator.NotEquals:
                    return recipients == null 
                        ? queryable.Where(f => f.Recipients != null) 
                        : queryable.Where(f => f.Recipients != recipients);
                default:
                    return recipients == null 
                        ? queryable.Where(f => f.Recipients == null) 
                        : queryable.Where(f => f.Recipients == recipients);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Recipients"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="recipients">Recipients to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByRecipients(this IQueryable<Malldub.Data.FundShare> queryable, System.String recipients, params System.String[] additionalValues)
        {
            var recipientsList = new List<System.String> { recipients };

            if (additionalValues != null)
                recipientsList.AddRange(additionalValues);
            else
                recipientsList.Add(null);

            if (recipientsList.Count == 1)
                return queryable.ByRecipients(recipientsList[0]);

            return queryable.ByRecipients(recipientsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.Recipients"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByRecipients(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("Recipients", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.ShareTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shareTypeId">ShareTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByShareTypeId(this IQueryable<Malldub.Data.FundShare> queryable, System.String shareTypeId)
        {
            return queryable.Where(f => f.ShareTypeId == shareTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.ShareTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shareTypeId">ShareTypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByShareTypeId(this IQueryable<Malldub.Data.FundShare> queryable, ContainmentOperator containmentOperator, System.String shareTypeId)
        {
            if (shareTypeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shareTypeId", "Parameter 'shareTypeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.ShareTypeId.Contains(shareTypeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.ShareTypeId.StartsWith(shareTypeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.ShareTypeId.EndsWith(shareTypeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.ShareTypeId.Contains(shareTypeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.ShareTypeId != shareTypeId);
                default:
                    return queryable.Where(f => f.ShareTypeId == shareTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.ShareTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shareTypeId">ShareTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByShareTypeId(this IQueryable<Malldub.Data.FundShare> queryable, System.String shareTypeId, params System.String[] additionalValues)
        {
            var shareTypeIdList = new List<System.String> { shareTypeId };

            if (additionalValues != null)
                shareTypeIdList.AddRange(additionalValues);

            if (shareTypeIdList.Count == 1)
                return queryable.ByShareTypeId(shareTypeIdList[0]);

            return queryable.ByShareTypeId(shareTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.ShareTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByShareTypeId(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.ShareTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByDateEntered(this IQueryable<Malldub.Data.FundShare> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(f => f.DateEntered == null) 
                : queryable.Where(f => f.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByDateEntered(this IQueryable<Malldub.Data.FundShare> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(f => f.DateEntered != null) 
                        : queryable.Where(f => f.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(f => f.DateEntered == null) 
                        : queryable.Where(f => f.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByDateEntered(this IQueryable<Malldub.Data.FundShare> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundShare.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundShare> ByDateEntered(this IQueryable<Malldub.Data.FundShare> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundShare, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundShare> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundShare.FirstOrDefault(f => f.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundShare> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundShare.FirstOrDefault(f => f.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

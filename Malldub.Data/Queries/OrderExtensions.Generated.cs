#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Order.
    /// </summary>
    public static partial class OrderExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Order GetByKey(this IQueryable<Malldub.Data.Order> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(o => o.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Order GetByIdentification(this IQueryable<Malldub.Data.Order> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Order>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(o => o.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByIdentification(this IQueryable<Malldub.Data.Order> queryable, System.Int32 identification)
        {
            return queryable.Where(o => o.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByIdentification(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.Identification != identification);
                default:
                    return queryable.Where(o => o.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByIdentification(this IQueryable<Malldub.Data.Order> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByIdentification(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(o => values.Contains(o.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Guid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="guid">Guid to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGuid(this IQueryable<Malldub.Data.Order> queryable, System.Guid guid)
        {
            return queryable.Where(o => o.Guid == guid);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Guid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="guid">Guid to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGuid(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.Guid guid)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.Guid != guid);
                default:
                    return queryable.Where(o => o.Guid == guid);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Guid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="guid">Guid to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGuid(this IQueryable<Malldub.Data.Order> queryable, System.Guid guid, params System.Guid[] additionalValues)
        {
            var guidList = new List<System.Guid> { guid };

            if (additionalValues != null)
                guidList.AddRange(additionalValues);

            if (guidList.Count == 1)
                return queryable.ByGuid(guidList[0]);

            return queryable.ByGuid(guidList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.Guid"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGuid(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(o => values.Contains(o.Guid));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CustomerId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="customerId">CustomerId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCustomerId(this IQueryable<Malldub.Data.Order> queryable, System.String customerId)
        {
            return queryable.Where(o => o.CustomerId == customerId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CustomerId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="customerId">CustomerId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCustomerId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String customerId)
        {
            if (customerId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("customerId", "Parameter 'customerId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CustomerId.Contains(customerId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CustomerId.StartsWith(customerId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CustomerId.EndsWith(customerId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CustomerId.Contains(customerId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.CustomerId != customerId);
                default:
                    return queryable.Where(o => o.CustomerId == customerId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CustomerId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="customerId">CustomerId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCustomerId(this IQueryable<Malldub.Data.Order> queryable, System.String customerId, params System.String[] additionalValues)
        {
            var customerIdList = new List<System.String> { customerId };

            if (additionalValues != null)
                customerIdList.AddRange(additionalValues);

            if (customerIdList.Count == 1)
                return queryable.ByCustomerId(customerIdList[0]);

            return queryable.ByCustomerId(customerIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CustomerId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCustomerId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(o => values.Contains(o.CustomerId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.BillingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billingAddressId">BillingAddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByBillingAddressId(this IQueryable<Malldub.Data.Order> queryable, System.Int32 billingAddressId)
        {
            return queryable.Where(o => o.BillingAddressId == billingAddressId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.BillingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billingAddressId">BillingAddressId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByBillingAddressId(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.Int32 billingAddressId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.BillingAddressId > billingAddressId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.BillingAddressId >= billingAddressId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.BillingAddressId < billingAddressId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.BillingAddressId <= billingAddressId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.BillingAddressId != billingAddressId);
                default:
                    return queryable.Where(o => o.BillingAddressId == billingAddressId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.BillingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billingAddressId">BillingAddressId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByBillingAddressId(this IQueryable<Malldub.Data.Order> queryable, System.Int32 billingAddressId, params System.Int32[] additionalValues)
        {
            var billingAddressIdList = new List<System.Int32> { billingAddressId };

            if (additionalValues != null)
                billingAddressIdList.AddRange(additionalValues);

            if (billingAddressIdList.Count == 1)
                return queryable.ByBillingAddressId(billingAddressIdList[0]);

            return queryable.ByBillingAddressId(billingAddressIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.BillingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByBillingAddressId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(o => values.Contains(o.BillingAddressId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.ShippingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shippingAddressId">ShippingAddressId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByShippingAddressId(this IQueryable<Malldub.Data.Order> queryable, System.Int32? shippingAddressId)
        {
            // support nulls
            return shippingAddressId == null 
                ? queryable.Where(o => o.ShippingAddressId == null) 
                : queryable.Where(o => o.ShippingAddressId == shippingAddressId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.ShippingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shippingAddressId">ShippingAddressId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByShippingAddressId(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.Int32? shippingAddressId)
        {
            if (shippingAddressId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("shippingAddressId", "Parameter 'shippingAddressId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.ShippingAddressId > shippingAddressId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.ShippingAddressId >= shippingAddressId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.ShippingAddressId < shippingAddressId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.ShippingAddressId <= shippingAddressId);
                case ComparisonOperator.NotEquals:
                    return shippingAddressId == null 
                        ? queryable.Where(o => o.ShippingAddressId != null) 
                        : queryable.Where(o => o.ShippingAddressId != shippingAddressId);
                default:
                    return shippingAddressId == null 
                        ? queryable.Where(o => o.ShippingAddressId == null) 
                        : queryable.Where(o => o.ShippingAddressId == shippingAddressId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.ShippingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shippingAddressId">ShippingAddressId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByShippingAddressId(this IQueryable<Malldub.Data.Order> queryable, System.Int32? shippingAddressId, params System.Int32?[] additionalValues)
        {
            var shippingAddressIdList = new List<System.Int32?> { shippingAddressId };

            if (additionalValues != null)
                shippingAddressIdList.AddRange(additionalValues);
            else
                shippingAddressIdList.Add(null);

            if (shippingAddressIdList.Count == 1)
                return queryable.ByShippingAddressId(shippingAddressIdList[0]);

            return queryable.ByShippingAddressId(shippingAddressIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.ShippingAddressId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByShippingAddressId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("ShippingAddressId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByStatusId(this IQueryable<Malldub.Data.Order> queryable, System.String statusId)
        {
            return queryable.Where(o => o.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByStatusId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.StatusId != statusId);
                default:
                    return queryable.Where(o => o.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByStatusId(this IQueryable<Malldub.Data.Order> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByStatusId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(o => values.Contains(o.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentStatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentStatusId">PaymentStatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentStatusId(this IQueryable<Malldub.Data.Order> queryable, System.String paymentStatusId)
        {
            return queryable.Where(o => o.PaymentStatusId == paymentStatusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentStatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentStatusId">PaymentStatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentStatusId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String paymentStatusId)
        {
            if (paymentStatusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("paymentStatusId", "Parameter 'paymentStatusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.PaymentStatusId.Contains(paymentStatusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.PaymentStatusId.StartsWith(paymentStatusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.PaymentStatusId.EndsWith(paymentStatusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.PaymentStatusId.Contains(paymentStatusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(o => o.PaymentStatusId != paymentStatusId);
                default:
                    return queryable.Where(o => o.PaymentStatusId == paymentStatusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentStatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentStatusId">PaymentStatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentStatusId(this IQueryable<Malldub.Data.Order> queryable, System.String paymentStatusId, params System.String[] additionalValues)
        {
            var paymentStatusIdList = new List<System.String> { paymentStatusId };

            if (additionalValues != null)
                paymentStatusIdList.AddRange(additionalValues);

            if (paymentStatusIdList.Count == 1)
                return queryable.ByPaymentStatusId(paymentStatusIdList[0]);

            return queryable.ByPaymentStatusId(paymentStatusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentStatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentStatusId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(o => values.Contains(o.PaymentStatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentMethodSystemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentMethodSystemName">PaymentMethodSystemName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentMethodSystemName(this IQueryable<Malldub.Data.Order> queryable, System.String paymentMethodSystemName)
        {
            // support nulls
            return paymentMethodSystemName == null 
                ? queryable.Where(o => o.PaymentMethodSystemName == null) 
                : queryable.Where(o => o.PaymentMethodSystemName == paymentMethodSystemName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentMethodSystemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentMethodSystemName">PaymentMethodSystemName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentMethodSystemName(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String paymentMethodSystemName)
        {
            if (paymentMethodSystemName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("paymentMethodSystemName", "Parameter 'paymentMethodSystemName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.PaymentMethodSystemName.Contains(paymentMethodSystemName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.PaymentMethodSystemName.StartsWith(paymentMethodSystemName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.PaymentMethodSystemName.EndsWith(paymentMethodSystemName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.PaymentMethodSystemName.Contains(paymentMethodSystemName) == false);
                case ContainmentOperator.NotEquals:
                    return paymentMethodSystemName == null 
                        ? queryable.Where(o => o.PaymentMethodSystemName != null) 
                        : queryable.Where(o => o.PaymentMethodSystemName != paymentMethodSystemName);
                default:
                    return paymentMethodSystemName == null 
                        ? queryable.Where(o => o.PaymentMethodSystemName == null) 
                        : queryable.Where(o => o.PaymentMethodSystemName == paymentMethodSystemName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentMethodSystemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentMethodSystemName">PaymentMethodSystemName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentMethodSystemName(this IQueryable<Malldub.Data.Order> queryable, System.String paymentMethodSystemName, params System.String[] additionalValues)
        {
            var paymentMethodSystemNameList = new List<System.String> { paymentMethodSystemName };

            if (additionalValues != null)
                paymentMethodSystemNameList.AddRange(additionalValues);
            else
                paymentMethodSystemNameList.Add(null);

            if (paymentMethodSystemNameList.Count == 1)
                return queryable.ByPaymentMethodSystemName(paymentMethodSystemNameList[0]);

            return queryable.ByPaymentMethodSystemName(paymentMethodSystemNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PaymentMethodSystemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPaymentMethodSystemName(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("PaymentMethodSystemName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardType">CardType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardType(this IQueryable<Malldub.Data.Order> queryable, System.String cardType)
        {
            // support nulls
            return cardType == null 
                ? queryable.Where(o => o.CardType == null) 
                : queryable.Where(o => o.CardType == cardType);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardType">CardType to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardType(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardType)
        {
            if (cardType == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardType", "Parameter 'cardType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardType.Contains(cardType));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardType.StartsWith(cardType));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardType.EndsWith(cardType));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardType.Contains(cardType) == false);
                case ContainmentOperator.NotEquals:
                    return cardType == null 
                        ? queryable.Where(o => o.CardType != null) 
                        : queryable.Where(o => o.CardType != cardType);
                default:
                    return cardType == null 
                        ? queryable.Where(o => o.CardType == null) 
                        : queryable.Where(o => o.CardType == cardType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardType">CardType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardType(this IQueryable<Malldub.Data.Order> queryable, System.String cardType, params System.String[] additionalValues)
        {
            var cardTypeList = new List<System.String> { cardType };

            if (additionalValues != null)
                cardTypeList.AddRange(additionalValues);
            else
                cardTypeList.Add(null);

            if (cardTypeList.Count == 1)
                return queryable.ByCardType(cardTypeList[0]);

            return queryable.ByCardType(cardTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardType(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardName">CardName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardName(this IQueryable<Malldub.Data.Order> queryable, System.String cardName)
        {
            // support nulls
            return cardName == null 
                ? queryable.Where(o => o.CardName == null) 
                : queryable.Where(o => o.CardName == cardName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardName">CardName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardName(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardName)
        {
            if (cardName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardName", "Parameter 'cardName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardName.Contains(cardName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardName.StartsWith(cardName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardName.EndsWith(cardName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardName.Contains(cardName) == false);
                case ContainmentOperator.NotEquals:
                    return cardName == null 
                        ? queryable.Where(o => o.CardName != null) 
                        : queryable.Where(o => o.CardName != cardName);
                default:
                    return cardName == null 
                        ? queryable.Where(o => o.CardName == null) 
                        : queryable.Where(o => o.CardName == cardName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardName">CardName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardName(this IQueryable<Malldub.Data.Order> queryable, System.String cardName, params System.String[] additionalValues)
        {
            var cardNameList = new List<System.String> { cardName };

            if (additionalValues != null)
                cardNameList.AddRange(additionalValues);
            else
                cardNameList.Add(null);

            if (cardNameList.Count == 1)
                return queryable.ByCardName(cardNameList[0]);

            return queryable.ByCardName(cardNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardName(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardNumber">CardNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardNumber(this IQueryable<Malldub.Data.Order> queryable, System.String cardNumber)
        {
            // support nulls
            return cardNumber == null 
                ? queryable.Where(o => o.CardNumber == null) 
                : queryable.Where(o => o.CardNumber == cardNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardNumber">CardNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardNumber(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardNumber)
        {
            if (cardNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardNumber", "Parameter 'cardNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardNumber.Contains(cardNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardNumber.StartsWith(cardNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardNumber.EndsWith(cardNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardNumber.Contains(cardNumber) == false);
                case ContainmentOperator.NotEquals:
                    return cardNumber == null 
                        ? queryable.Where(o => o.CardNumber != null) 
                        : queryable.Where(o => o.CardNumber != cardNumber);
                default:
                    return cardNumber == null 
                        ? queryable.Where(o => o.CardNumber == null) 
                        : queryable.Where(o => o.CardNumber == cardNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardNumber">CardNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardNumber(this IQueryable<Malldub.Data.Order> queryable, System.String cardNumber, params System.String[] additionalValues)
        {
            var cardNumberList = new List<System.String> { cardNumber };

            if (additionalValues != null)
                cardNumberList.AddRange(additionalValues);
            else
                cardNumberList.Add(null);

            if (cardNumberList.Count == 1)
                return queryable.ByCardNumber(cardNumberList[0]);

            return queryable.ByCardNumber(cardNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardNumber(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.MaskedCreditCardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maskedCreditCardNumber">MaskedCreditCardNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByMaskedCreditCardNumber(this IQueryable<Malldub.Data.Order> queryable, System.String maskedCreditCardNumber)
        {
            // support nulls
            return maskedCreditCardNumber == null 
                ? queryable.Where(o => o.MaskedCreditCardNumber == null) 
                : queryable.Where(o => o.MaskedCreditCardNumber == maskedCreditCardNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.MaskedCreditCardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maskedCreditCardNumber">MaskedCreditCardNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByMaskedCreditCardNumber(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String maskedCreditCardNumber)
        {
            if (maskedCreditCardNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("maskedCreditCardNumber", "Parameter 'maskedCreditCardNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.MaskedCreditCardNumber.Contains(maskedCreditCardNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.MaskedCreditCardNumber.StartsWith(maskedCreditCardNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.MaskedCreditCardNumber.EndsWith(maskedCreditCardNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.MaskedCreditCardNumber.Contains(maskedCreditCardNumber) == false);
                case ContainmentOperator.NotEquals:
                    return maskedCreditCardNumber == null 
                        ? queryable.Where(o => o.MaskedCreditCardNumber != null) 
                        : queryable.Where(o => o.MaskedCreditCardNumber != maskedCreditCardNumber);
                default:
                    return maskedCreditCardNumber == null 
                        ? queryable.Where(o => o.MaskedCreditCardNumber == null) 
                        : queryable.Where(o => o.MaskedCreditCardNumber == maskedCreditCardNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.MaskedCreditCardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maskedCreditCardNumber">MaskedCreditCardNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByMaskedCreditCardNumber(this IQueryable<Malldub.Data.Order> queryable, System.String maskedCreditCardNumber, params System.String[] additionalValues)
        {
            var maskedCreditCardNumberList = new List<System.String> { maskedCreditCardNumber };

            if (additionalValues != null)
                maskedCreditCardNumberList.AddRange(additionalValues);
            else
                maskedCreditCardNumberList.Add(null);

            if (maskedCreditCardNumberList.Count == 1)
                return queryable.ByMaskedCreditCardNumber(maskedCreditCardNumberList[0]);

            return queryable.ByMaskedCreditCardNumber(maskedCreditCardNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.MaskedCreditCardNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByMaskedCreditCardNumber(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("MaskedCreditCardNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardCvv2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardCvv2">CardCvv2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardCvv2(this IQueryable<Malldub.Data.Order> queryable, System.String cardCvv2)
        {
            // support nulls
            return cardCvv2 == null 
                ? queryable.Where(o => o.CardCvv2 == null) 
                : queryable.Where(o => o.CardCvv2 == cardCvv2);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardCvv2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardCvv2">CardCvv2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardCvv2(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardCvv2)
        {
            if (cardCvv2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardCvv2", "Parameter 'cardCvv2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardCvv2.Contains(cardCvv2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardCvv2.StartsWith(cardCvv2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardCvv2.EndsWith(cardCvv2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardCvv2.Contains(cardCvv2) == false);
                case ContainmentOperator.NotEquals:
                    return cardCvv2 == null 
                        ? queryable.Where(o => o.CardCvv2 != null) 
                        : queryable.Where(o => o.CardCvv2 != cardCvv2);
                default:
                    return cardCvv2 == null 
                        ? queryable.Where(o => o.CardCvv2 == null) 
                        : queryable.Where(o => o.CardCvv2 == cardCvv2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardCvv2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardCvv2">CardCvv2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardCvv2(this IQueryable<Malldub.Data.Order> queryable, System.String cardCvv2, params System.String[] additionalValues)
        {
            var cardCvv2List = new List<System.String> { cardCvv2 };

            if (additionalValues != null)
                cardCvv2List.AddRange(additionalValues);
            else
                cardCvv2List.Add(null);

            if (cardCvv2List.Count == 1)
                return queryable.ByCardCvv2(cardCvv2List[0]);

            return queryable.ByCardCvv2(cardCvv2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardCvv2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardCvv2(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardCvv2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationMonth"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationMonth">CardExpirationMonth to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationMonth(this IQueryable<Malldub.Data.Order> queryable, System.String cardExpirationMonth)
        {
            // support nulls
            return cardExpirationMonth == null 
                ? queryable.Where(o => o.CardExpirationMonth == null) 
                : queryable.Where(o => o.CardExpirationMonth == cardExpirationMonth);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationMonth"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationMonth">CardExpirationMonth to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationMonth(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardExpirationMonth)
        {
            if (cardExpirationMonth == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardExpirationMonth", "Parameter 'cardExpirationMonth' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardExpirationMonth.Contains(cardExpirationMonth));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardExpirationMonth.StartsWith(cardExpirationMonth));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardExpirationMonth.EndsWith(cardExpirationMonth));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardExpirationMonth.Contains(cardExpirationMonth) == false);
                case ContainmentOperator.NotEquals:
                    return cardExpirationMonth == null 
                        ? queryable.Where(o => o.CardExpirationMonth != null) 
                        : queryable.Where(o => o.CardExpirationMonth != cardExpirationMonth);
                default:
                    return cardExpirationMonth == null 
                        ? queryable.Where(o => o.CardExpirationMonth == null) 
                        : queryable.Where(o => o.CardExpirationMonth == cardExpirationMonth);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationMonth"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationMonth">CardExpirationMonth to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationMonth(this IQueryable<Malldub.Data.Order> queryable, System.String cardExpirationMonth, params System.String[] additionalValues)
        {
            var cardExpirationMonthList = new List<System.String> { cardExpirationMonth };

            if (additionalValues != null)
                cardExpirationMonthList.AddRange(additionalValues);
            else
                cardExpirationMonthList.Add(null);

            if (cardExpirationMonthList.Count == 1)
                return queryable.ByCardExpirationMonth(cardExpirationMonthList[0]);

            return queryable.ByCardExpirationMonth(cardExpirationMonthList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationMonth"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationMonth(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardExpirationMonth", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationYear">CardExpirationYear to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationYear(this IQueryable<Malldub.Data.Order> queryable, System.String cardExpirationYear)
        {
            // support nulls
            return cardExpirationYear == null 
                ? queryable.Where(o => o.CardExpirationYear == null) 
                : queryable.Where(o => o.CardExpirationYear == cardExpirationYear);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationYear">CardExpirationYear to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationYear(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String cardExpirationYear)
        {
            if (cardExpirationYear == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cardExpirationYear", "Parameter 'cardExpirationYear' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CardExpirationYear.Contains(cardExpirationYear));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CardExpirationYear.StartsWith(cardExpirationYear));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CardExpirationYear.EndsWith(cardExpirationYear));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CardExpirationYear.Contains(cardExpirationYear) == false);
                case ContainmentOperator.NotEquals:
                    return cardExpirationYear == null 
                        ? queryable.Where(o => o.CardExpirationYear != null) 
                        : queryable.Where(o => o.CardExpirationYear != cardExpirationYear);
                default:
                    return cardExpirationYear == null 
                        ? queryable.Where(o => o.CardExpirationYear == null) 
                        : queryable.Where(o => o.CardExpirationYear == cardExpirationYear);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cardExpirationYear">CardExpirationYear to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationYear(this IQueryable<Malldub.Data.Order> queryable, System.String cardExpirationYear, params System.String[] additionalValues)
        {
            var cardExpirationYearList = new List<System.String> { cardExpirationYear };

            if (additionalValues != null)
                cardExpirationYearList.AddRange(additionalValues);
            else
                cardExpirationYearList.Add(null);

            if (cardExpirationYearList.Count == 1)
                return queryable.ByCardExpirationYear(cardExpirationYearList[0]);

            return queryable.ByCardExpirationYear(cardExpirationYearList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CardExpirationYear"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCardExpirationYear(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CardExpirationYear", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionId">AuthorizationTransactionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionId)
        {
            // support nulls
            return authorizationTransactionId == null 
                ? queryable.Where(o => o.AuthorizationTransactionId == null) 
                : queryable.Where(o => o.AuthorizationTransactionId == authorizationTransactionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionId">AuthorizationTransactionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String authorizationTransactionId)
        {
            if (authorizationTransactionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("authorizationTransactionId", "Parameter 'authorizationTransactionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.AuthorizationTransactionId.Contains(authorizationTransactionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.AuthorizationTransactionId.StartsWith(authorizationTransactionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.AuthorizationTransactionId.EndsWith(authorizationTransactionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.AuthorizationTransactionId.Contains(authorizationTransactionId) == false);
                case ContainmentOperator.NotEquals:
                    return authorizationTransactionId == null 
                        ? queryable.Where(o => o.AuthorizationTransactionId != null) 
                        : queryable.Where(o => o.AuthorizationTransactionId != authorizationTransactionId);
                default:
                    return authorizationTransactionId == null 
                        ? queryable.Where(o => o.AuthorizationTransactionId == null) 
                        : queryable.Where(o => o.AuthorizationTransactionId == authorizationTransactionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionId">AuthorizationTransactionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionId, params System.String[] additionalValues)
        {
            var authorizationTransactionIdList = new List<System.String> { authorizationTransactionId };

            if (additionalValues != null)
                authorizationTransactionIdList.AddRange(additionalValues);
            else
                authorizationTransactionIdList.Add(null);

            if (authorizationTransactionIdList.Count == 1)
                return queryable.ByAuthorizationTransactionId(authorizationTransactionIdList[0]);

            return queryable.ByAuthorizationTransactionId(authorizationTransactionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("AuthorizationTransactionId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionCode">AuthorizationTransactionCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionCode(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionCode)
        {
            // support nulls
            return authorizationTransactionCode == null 
                ? queryable.Where(o => o.AuthorizationTransactionCode == null) 
                : queryable.Where(o => o.AuthorizationTransactionCode == authorizationTransactionCode);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionCode">AuthorizationTransactionCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionCode(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String authorizationTransactionCode)
        {
            if (authorizationTransactionCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("authorizationTransactionCode", "Parameter 'authorizationTransactionCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.AuthorizationTransactionCode.Contains(authorizationTransactionCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.AuthorizationTransactionCode.StartsWith(authorizationTransactionCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.AuthorizationTransactionCode.EndsWith(authorizationTransactionCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.AuthorizationTransactionCode.Contains(authorizationTransactionCode) == false);
                case ContainmentOperator.NotEquals:
                    return authorizationTransactionCode == null 
                        ? queryable.Where(o => o.AuthorizationTransactionCode != null) 
                        : queryable.Where(o => o.AuthorizationTransactionCode != authorizationTransactionCode);
                default:
                    return authorizationTransactionCode == null 
                        ? queryable.Where(o => o.AuthorizationTransactionCode == null) 
                        : queryable.Where(o => o.AuthorizationTransactionCode == authorizationTransactionCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionCode">AuthorizationTransactionCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionCode(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionCode, params System.String[] additionalValues)
        {
            var authorizationTransactionCodeList = new List<System.String> { authorizationTransactionCode };

            if (additionalValues != null)
                authorizationTransactionCodeList.AddRange(additionalValues);
            else
                authorizationTransactionCodeList.Add(null);

            if (authorizationTransactionCodeList.Count == 1)
                return queryable.ByAuthorizationTransactionCode(authorizationTransactionCodeList[0]);

            return queryable.ByAuthorizationTransactionCode(authorizationTransactionCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionCode(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("AuthorizationTransactionCode", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionResult">AuthorizationTransactionResult to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionResult(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionResult)
        {
            // support nulls
            return authorizationTransactionResult == null 
                ? queryable.Where(o => o.AuthorizationTransactionResult == null) 
                : queryable.Where(o => o.AuthorizationTransactionResult == authorizationTransactionResult);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionResult">AuthorizationTransactionResult to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionResult(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String authorizationTransactionResult)
        {
            if (authorizationTransactionResult == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("authorizationTransactionResult", "Parameter 'authorizationTransactionResult' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.AuthorizationTransactionResult.Contains(authorizationTransactionResult));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.AuthorizationTransactionResult.StartsWith(authorizationTransactionResult));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.AuthorizationTransactionResult.EndsWith(authorizationTransactionResult));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.AuthorizationTransactionResult.Contains(authorizationTransactionResult) == false);
                case ContainmentOperator.NotEquals:
                    return authorizationTransactionResult == null 
                        ? queryable.Where(o => o.AuthorizationTransactionResult != null) 
                        : queryable.Where(o => o.AuthorizationTransactionResult != authorizationTransactionResult);
                default:
                    return authorizationTransactionResult == null 
                        ? queryable.Where(o => o.AuthorizationTransactionResult == null) 
                        : queryable.Where(o => o.AuthorizationTransactionResult == authorizationTransactionResult);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="authorizationTransactionResult">AuthorizationTransactionResult to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionResult(this IQueryable<Malldub.Data.Order> queryable, System.String authorizationTransactionResult, params System.String[] additionalValues)
        {
            var authorizationTransactionResultList = new List<System.String> { authorizationTransactionResult };

            if (additionalValues != null)
                authorizationTransactionResultList.AddRange(additionalValues);
            else
                authorizationTransactionResultList.Add(null);

            if (authorizationTransactionResultList.Count == 1)
                return queryable.ByAuthorizationTransactionResult(authorizationTransactionResultList[0]);

            return queryable.ByAuthorizationTransactionResult(authorizationTransactionResultList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.AuthorizationTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByAuthorizationTransactionResult(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("AuthorizationTransactionResult", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionId">CaptureTransactionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String captureTransactionId)
        {
            // support nulls
            return captureTransactionId == null 
                ? queryable.Where(o => o.CaptureTransactionId == null) 
                : queryable.Where(o => o.CaptureTransactionId == captureTransactionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionId">CaptureTransactionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String captureTransactionId)
        {
            if (captureTransactionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("captureTransactionId", "Parameter 'captureTransactionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CaptureTransactionId.Contains(captureTransactionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CaptureTransactionId.StartsWith(captureTransactionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CaptureTransactionId.EndsWith(captureTransactionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CaptureTransactionId.Contains(captureTransactionId) == false);
                case ContainmentOperator.NotEquals:
                    return captureTransactionId == null 
                        ? queryable.Where(o => o.CaptureTransactionId != null) 
                        : queryable.Where(o => o.CaptureTransactionId != captureTransactionId);
                default:
                    return captureTransactionId == null 
                        ? queryable.Where(o => o.CaptureTransactionId == null) 
                        : queryable.Where(o => o.CaptureTransactionId == captureTransactionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionId">CaptureTransactionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String captureTransactionId, params System.String[] additionalValues)
        {
            var captureTransactionIdList = new List<System.String> { captureTransactionId };

            if (additionalValues != null)
                captureTransactionIdList.AddRange(additionalValues);
            else
                captureTransactionIdList.Add(null);

            if (captureTransactionIdList.Count == 1)
                return queryable.ByCaptureTransactionId(captureTransactionIdList[0]);

            return queryable.ByCaptureTransactionId(captureTransactionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CaptureTransactionId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionResult">CaptureTransactionResult to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionResult(this IQueryable<Malldub.Data.Order> queryable, System.String captureTransactionResult)
        {
            // support nulls
            return captureTransactionResult == null 
                ? queryable.Where(o => o.CaptureTransactionResult == null) 
                : queryable.Where(o => o.CaptureTransactionResult == captureTransactionResult);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionResult">CaptureTransactionResult to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionResult(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String captureTransactionResult)
        {
            if (captureTransactionResult == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("captureTransactionResult", "Parameter 'captureTransactionResult' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.CaptureTransactionResult.Contains(captureTransactionResult));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.CaptureTransactionResult.StartsWith(captureTransactionResult));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.CaptureTransactionResult.EndsWith(captureTransactionResult));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.CaptureTransactionResult.Contains(captureTransactionResult) == false);
                case ContainmentOperator.NotEquals:
                    return captureTransactionResult == null 
                        ? queryable.Where(o => o.CaptureTransactionResult != null) 
                        : queryable.Where(o => o.CaptureTransactionResult != captureTransactionResult);
                default:
                    return captureTransactionResult == null 
                        ? queryable.Where(o => o.CaptureTransactionResult == null) 
                        : queryable.Where(o => o.CaptureTransactionResult == captureTransactionResult);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="captureTransactionResult">CaptureTransactionResult to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionResult(this IQueryable<Malldub.Data.Order> queryable, System.String captureTransactionResult, params System.String[] additionalValues)
        {
            var captureTransactionResultList = new List<System.String> { captureTransactionResult };

            if (additionalValues != null)
                captureTransactionResultList.AddRange(additionalValues);
            else
                captureTransactionResultList.Add(null);

            if (captureTransactionResultList.Count == 1)
                return queryable.ByCaptureTransactionResult(captureTransactionResultList[0]);

            return queryable.ByCaptureTransactionResult(captureTransactionResultList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.CaptureTransactionResult"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByCaptureTransactionResult(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("CaptureTransactionResult", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.SubscriptionTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTransactionId">SubscriptionTransactionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> BySubscriptionTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String subscriptionTransactionId)
        {
            // support nulls
            return subscriptionTransactionId == null 
                ? queryable.Where(o => o.SubscriptionTransactionId == null) 
                : queryable.Where(o => o.SubscriptionTransactionId == subscriptionTransactionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.SubscriptionTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTransactionId">SubscriptionTransactionId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> BySubscriptionTransactionId(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String subscriptionTransactionId)
        {
            if (subscriptionTransactionId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subscriptionTransactionId", "Parameter 'subscriptionTransactionId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.SubscriptionTransactionId.Contains(subscriptionTransactionId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.SubscriptionTransactionId.StartsWith(subscriptionTransactionId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.SubscriptionTransactionId.EndsWith(subscriptionTransactionId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.SubscriptionTransactionId.Contains(subscriptionTransactionId) == false);
                case ContainmentOperator.NotEquals:
                    return subscriptionTransactionId == null 
                        ? queryable.Where(o => o.SubscriptionTransactionId != null) 
                        : queryable.Where(o => o.SubscriptionTransactionId != subscriptionTransactionId);
                default:
                    return subscriptionTransactionId == null 
                        ? queryable.Where(o => o.SubscriptionTransactionId == null) 
                        : queryable.Where(o => o.SubscriptionTransactionId == subscriptionTransactionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.SubscriptionTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subscriptionTransactionId">SubscriptionTransactionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> BySubscriptionTransactionId(this IQueryable<Malldub.Data.Order> queryable, System.String subscriptionTransactionId, params System.String[] additionalValues)
        {
            var subscriptionTransactionIdList = new List<System.String> { subscriptionTransactionId };

            if (additionalValues != null)
                subscriptionTransactionIdList.AddRange(additionalValues);
            else
                subscriptionTransactionIdList.Add(null);

            if (subscriptionTransactionIdList.Count == 1)
                return queryable.BySubscriptionTransactionId(subscriptionTransactionIdList[0]);

            return queryable.BySubscriptionTransactionId(subscriptionTransactionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.SubscriptionTransactionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> BySubscriptionTransactionId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("SubscriptionTransactionId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PurchaseOrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="purchaseOrderNumber">PurchaseOrderNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPurchaseOrderNumber(this IQueryable<Malldub.Data.Order> queryable, System.String purchaseOrderNumber)
        {
            // support nulls
            return purchaseOrderNumber == null 
                ? queryable.Where(o => o.PurchaseOrderNumber == null) 
                : queryable.Where(o => o.PurchaseOrderNumber == purchaseOrderNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PurchaseOrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="purchaseOrderNumber">PurchaseOrderNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPurchaseOrderNumber(this IQueryable<Malldub.Data.Order> queryable, ContainmentOperator containmentOperator, System.String purchaseOrderNumber)
        {
            if (purchaseOrderNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("purchaseOrderNumber", "Parameter 'purchaseOrderNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(o => o.PurchaseOrderNumber.Contains(purchaseOrderNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(o => o.PurchaseOrderNumber.StartsWith(purchaseOrderNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(o => o.PurchaseOrderNumber.EndsWith(purchaseOrderNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(o => o.PurchaseOrderNumber.Contains(purchaseOrderNumber) == false);
                case ContainmentOperator.NotEquals:
                    return purchaseOrderNumber == null 
                        ? queryable.Where(o => o.PurchaseOrderNumber != null) 
                        : queryable.Where(o => o.PurchaseOrderNumber != purchaseOrderNumber);
                default:
                    return purchaseOrderNumber == null 
                        ? queryable.Where(o => o.PurchaseOrderNumber == null) 
                        : queryable.Where(o => o.PurchaseOrderNumber == purchaseOrderNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PurchaseOrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="purchaseOrderNumber">PurchaseOrderNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPurchaseOrderNumber(this IQueryable<Malldub.Data.Order> queryable, System.String purchaseOrderNumber, params System.String[] additionalValues)
        {
            var purchaseOrderNumberList = new List<System.String> { purchaseOrderNumber };

            if (additionalValues != null)
                purchaseOrderNumberList.AddRange(additionalValues);
            else
                purchaseOrderNumberList.Add(null);

            if (purchaseOrderNumberList.Count == 1)
                return queryable.ByPurchaseOrderNumber(purchaseOrderNumberList[0]);

            return queryable.ByPurchaseOrderNumber(purchaseOrderNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.PurchaseOrderNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByPurchaseOrderNumber(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("PurchaseOrderNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByDateEntered(this IQueryable<Malldub.Data.Order> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(o => o.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByDateEntered(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(o => o.DateEntered != dateEntered);
                default:
                    return queryable.Where(o => o.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByDateEntered(this IQueryable<Malldub.Data.Order> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByDateEntered(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(o => values.Contains(o.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGeoId(this IQueryable<Malldub.Data.Order> queryable, System.Int32? geoId)
        {
            // support nulls
            return geoId == null 
                ? queryable.Where(o => o.GeoId == null) 
                : queryable.Where(o => o.GeoId == geoId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGeoId(this IQueryable<Malldub.Data.Order> queryable, ComparisonOperator comparisonOperator, System.Int32? geoId)
        {
            if (geoId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("geoId", "Parameter 'geoId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(o => o.GeoId > geoId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(o => o.GeoId >= geoId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(o => o.GeoId < geoId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(o => o.GeoId <= geoId);
                case ComparisonOperator.NotEquals:
                    return geoId == null 
                        ? queryable.Where(o => o.GeoId != null) 
                        : queryable.Where(o => o.GeoId != geoId);
                default:
                    return geoId == null 
                        ? queryable.Where(o => o.GeoId == null) 
                        : queryable.Where(o => o.GeoId == geoId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="geoId">GeoId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGeoId(this IQueryable<Malldub.Data.Order> queryable, System.Int32? geoId, params System.Int32?[] additionalValues)
        {
            var geoIdList = new List<System.Int32?> { geoId };

            if (additionalValues != null)
                geoIdList.AddRange(additionalValues);
            else
                geoIdList.Add(null);

            if (geoIdList.Count == 1)
                return queryable.ByGeoId(geoIdList[0]);

            return queryable.ByGeoId(geoIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Order.GeoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Order> ByGeoId(this IQueryable<Malldub.Data.Order> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Order, bool>("GeoId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Order> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Order.FirstOrDefault(o => o.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Order> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Order.FirstOrDefault(o => o.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundTeamMember.
    /// </summary>
    public static partial class FundTeamMemberExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundTeamMember GetByKey(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.Int32 fundTeamId, System.String userId)
        {
            return queryable.FirstOrDefault(f => f.FundTeamId == fundTeamId 
					&& f.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundTeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundTeamId">FundTeamId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundTeamId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.Int32 fundTeamId)
        {
            return queryable.Where(f => f.FundTeamId == fundTeamId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundTeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundTeamId">FundTeamId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundTeamId(this IQueryable<Malldub.Data.FundTeamMember> queryable, ComparisonOperator comparisonOperator, System.Int32 fundTeamId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundTeamId > fundTeamId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundTeamId >= fundTeamId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundTeamId < fundTeamId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundTeamId <= fundTeamId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundTeamId != fundTeamId);
                default:
                    return queryable.Where(f => f.FundTeamId == fundTeamId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundTeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundTeamId">FundTeamId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundTeamId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.Int32 fundTeamId, params System.Int32[] additionalValues)
        {
            var fundTeamIdList = new List<System.Int32> { fundTeamId };

            if (additionalValues != null)
                fundTeamIdList.AddRange(additionalValues);

            if (fundTeamIdList.Count == 1)
                return queryable.ByFundTeamId(fundTeamIdList[0]);

            return queryable.ByFundTeamId(fundTeamIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundTeamId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundTeamId(this IQueryable<Malldub.Data.FundTeamMember> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundTeamId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByUserId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.String userId)
        {
            return queryable.Where(f => f.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByUserId(this IQueryable<Malldub.Data.FundTeamMember> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.UserId != userId);
                default:
                    return queryable.Where(f => f.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByUserId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByUserId(this IQueryable<Malldub.Data.FundTeamMember> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByDateCreated(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.DateTime dateCreated)
        {
            return queryable.Where(f => f.DateCreated == dateCreated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByDateCreated(this IQueryable<Malldub.Data.FundTeamMember> queryable, ComparisonOperator comparisonOperator, System.DateTime dateCreated)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.DateCreated > dateCreated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.DateCreated >= dateCreated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.DateCreated < dateCreated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.DateCreated <= dateCreated);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.DateCreated != dateCreated);
                default:
                    return queryable.Where(f => f.DateCreated == dateCreated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateCreated">DateCreated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByDateCreated(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.DateTime dateCreated, params System.DateTime[] additionalValues)
        {
            var dateCreatedList = new List<System.DateTime> { dateCreated };

            if (additionalValues != null)
                dateCreatedList.AddRange(additionalValues);

            if (dateCreatedList.Count == 1)
                return queryable.ByDateCreated(dateCreatedList[0]);

            return queryable.ByDateCreated(dateCreatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.DateCreated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByDateCreated(this IQueryable<Malldub.Data.FundTeamMember> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(f => values.Contains(f.DateCreated));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByRoleId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.String roleId)
        {
            return queryable.Where(f => f.RoleId == roleId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByRoleId(this IQueryable<Malldub.Data.FundTeamMember> queryable, ContainmentOperator containmentOperator, System.String roleId)
        {
            if (roleId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("roleId", "Parameter 'roleId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.RoleId.Contains(roleId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.RoleId.StartsWith(roleId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.RoleId.EndsWith(roleId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.RoleId.Contains(roleId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.RoleId != roleId);
                default:
                    return queryable.Where(f => f.RoleId == roleId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByRoleId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.String roleId, params System.String[] additionalValues)
        {
            var roleIdList = new List<System.String> { roleId };

            if (additionalValues != null)
                roleIdList.AddRange(additionalValues);

            if (roleIdList.Count == 1)
                return queryable.ByRoleId(roleIdList[0]);

            return queryable.ByRoleId(roleIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByRoleId(this IQueryable<Malldub.Data.FundTeamMember> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.RoleId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.Int32? fundId)
        {
            // support nulls
            return fundId == null 
                ? queryable.Where(f => f.FundId == null) 
                : queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundId(this IQueryable<Malldub.Data.FundTeamMember> queryable, ComparisonOperator comparisonOperator, System.Int32? fundId)
        {
            if (fundId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("fundId", "Parameter 'fundId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return fundId == null 
                        ? queryable.Where(f => f.FundId != null) 
                        : queryable.Where(f => f.FundId != fundId);
                default:
                    return fundId == null 
                        ? queryable.Where(f => f.FundId == null) 
                        : queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundId(this IQueryable<Malldub.Data.FundTeamMember> queryable, System.Int32? fundId, params System.Int32?[] additionalValues)
        {
            var fundIdList = new List<System.Int32?> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);
            else
                fundIdList.Add(null);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundTeamMember.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundTeamMember> ByFundId(this IQueryable<Malldub.Data.FundTeamMember> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundTeamMember, bool>("FundId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.String, Malldub.Data.FundTeamMember> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 fundTeamId, System.String userId) =>
                        db.FundTeamMember.FirstOrDefault(f => f.FundTeamId == fundTeamId 
							&& f.UserId == userId));
        }
        #endregion
    }
}
#pragma warning restore 1591

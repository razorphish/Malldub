#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Upload.
    /// </summary>
    public static partial class UploadExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Upload GetByKey(this IQueryable<Malldub.Data.Upload> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(u => u.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Upload GetByIdentification(this IQueryable<Malldub.Data.Upload> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Upload>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(u => u.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIdentification(this IQueryable<Malldub.Data.Upload> queryable, System.Int32 identification)
        {
            return queryable.Where(u => u.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIdentification(this IQueryable<Malldub.Data.Upload> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.Identification != identification);
                default:
                    return queryable.Where(u => u.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIdentification(this IQueryable<Malldub.Data.Upload> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIdentification(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(u => values.Contains(u.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDescription(this IQueryable<Malldub.Data.Upload> queryable, System.String description)
        {
            return queryable.Where(u => u.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDescription(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Description != description);
                default:
                    return queryable.Where(u => u.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDescription(this IQueryable<Malldub.Data.Upload> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDescription(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.Description));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIsPrivate(this IQueryable<Malldub.Data.Upload> queryable, System.Boolean isPrivate)
        {
            return queryable.Where(u => u.IsPrivate == isPrivate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIsPrivate(this IQueryable<Malldub.Data.Upload> queryable, ComparisonOperator comparisonOperator, System.Boolean isPrivate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.IsPrivate != isPrivate);
                default:
                    return queryable.Where(u => u.IsPrivate == isPrivate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPrivate">IsPrivate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIsPrivate(this IQueryable<Malldub.Data.Upload> queryable, System.Boolean isPrivate, params System.Boolean[] additionalValues)
        {
            var isPrivateList = new List<System.Boolean> { isPrivate };

            if (additionalValues != null)
                isPrivateList.AddRange(additionalValues);

            if (isPrivateList.Count == 1)
                return queryable.ByIsPrivate(isPrivateList[0]);

            return queryable.ByIsPrivate(isPrivateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.IsPrivate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByIsPrivate(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(u => values.Contains(u.IsPrivate));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByCategoryId(this IQueryable<Malldub.Data.Upload> queryable, System.String categoryId)
        {
            return queryable.Where(u => u.CategoryId == categoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByCategoryId(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String categoryId)
        {
            if (categoryId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("categoryId", "Parameter 'categoryId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.CategoryId.Contains(categoryId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.CategoryId.StartsWith(categoryId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.CategoryId.EndsWith(categoryId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.CategoryId.Contains(categoryId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.CategoryId != categoryId);
                default:
                    return queryable.Where(u => u.CategoryId == categoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="categoryId">CategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByCategoryId(this IQueryable<Malldub.Data.Upload> queryable, System.String categoryId, params System.String[] additionalValues)
        {
            var categoryIdList = new List<System.String> { categoryId };

            if (additionalValues != null)
                categoryIdList.AddRange(additionalValues);

            if (categoryIdList.Count == 1)
                return queryable.ByCategoryId(categoryIdList[0]);

            return queryable.ByCategoryId(categoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.CategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByCategoryId(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.CategoryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByName(this IQueryable<Malldub.Data.Upload> queryable, System.String name)
        {
            return queryable.Where(u => u.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByName(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Name != name);
                default:
                    return queryable.Where(u => u.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByName(this IQueryable<Malldub.Data.Upload> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByName(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.OriginalFileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalFileName">OriginalFileName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByOriginalFileName(this IQueryable<Malldub.Data.Upload> queryable, System.String originalFileName)
        {
            return queryable.Where(u => u.OriginalFileName == originalFileName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.OriginalFileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalFileName">OriginalFileName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByOriginalFileName(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String originalFileName)
        {
            if (originalFileName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("originalFileName", "Parameter 'originalFileName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.OriginalFileName.Contains(originalFileName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.OriginalFileName.StartsWith(originalFileName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.OriginalFileName.EndsWith(originalFileName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.OriginalFileName.Contains(originalFileName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.OriginalFileName != originalFileName);
                default:
                    return queryable.Where(u => u.OriginalFileName == originalFileName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.OriginalFileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalFileName">OriginalFileName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByOriginalFileName(this IQueryable<Malldub.Data.Upload> queryable, System.String originalFileName, params System.String[] additionalValues)
        {
            var originalFileNameList = new List<System.String> { originalFileName };

            if (additionalValues != null)
                originalFileNameList.AddRange(additionalValues);

            if (originalFileNameList.Count == 1)
                return queryable.ByOriginalFileName(originalFileNameList[0]);

            return queryable.ByOriginalFileName(originalFileNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.OriginalFileName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByOriginalFileName(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.OriginalFileName));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Location"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="location">Location to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocation(this IQueryable<Malldub.Data.Upload> queryable, System.String location)
        {
            return queryable.Where(u => u.Location == location);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Location"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="location">Location to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocation(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String location)
        {
            if (location == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("location", "Parameter 'location' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Location.Contains(location));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Location.StartsWith(location));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Location.EndsWith(location));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Location.Contains(location) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Location != location);
                default:
                    return queryable.Where(u => u.Location == location);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Location"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="location">Location to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocation(this IQueryable<Malldub.Data.Upload> queryable, System.String location, params System.String[] additionalValues)
        {
            var locationList = new List<System.String> { location };

            if (additionalValues != null)
                locationList.AddRange(additionalValues);

            if (locationList.Count == 1)
                return queryable.ByLocation(locationList[0]);

            return queryable.ByLocation(locationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Location"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocation(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.Location));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.RelativeLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="relativeLocation">RelativeLocation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByRelativeLocation(this IQueryable<Malldub.Data.Upload> queryable, System.String relativeLocation)
        {
            // support nulls
            return relativeLocation == null 
                ? queryable.Where(u => u.RelativeLocation == null) 
                : queryable.Where(u => u.RelativeLocation == relativeLocation);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.RelativeLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="relativeLocation">RelativeLocation to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByRelativeLocation(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String relativeLocation)
        {
            if (relativeLocation == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("relativeLocation", "Parameter 'relativeLocation' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.RelativeLocation.Contains(relativeLocation));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.RelativeLocation.StartsWith(relativeLocation));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.RelativeLocation.EndsWith(relativeLocation));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.RelativeLocation.Contains(relativeLocation) == false);
                case ContainmentOperator.NotEquals:
                    return relativeLocation == null 
                        ? queryable.Where(u => u.RelativeLocation != null) 
                        : queryable.Where(u => u.RelativeLocation != relativeLocation);
                default:
                    return relativeLocation == null 
                        ? queryable.Where(u => u.RelativeLocation == null) 
                        : queryable.Where(u => u.RelativeLocation == relativeLocation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.RelativeLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="relativeLocation">RelativeLocation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByRelativeLocation(this IQueryable<Malldub.Data.Upload> queryable, System.String relativeLocation, params System.String[] additionalValues)
        {
            var relativeLocationList = new List<System.String> { relativeLocation };

            if (additionalValues != null)
                relativeLocationList.AddRange(additionalValues);
            else
                relativeLocationList.Add(null);

            if (relativeLocationList.Count == 1)
                return queryable.ByRelativeLocation(relativeLocationList[0]);

            return queryable.ByRelativeLocation(relativeLocationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.RelativeLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByRelativeLocation(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("RelativeLocation", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Extension"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="extension">Extension to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByExtension(this IQueryable<Malldub.Data.Upload> queryable, System.String extension)
        {
            // support nulls
            return extension == null 
                ? queryable.Where(u => u.Extension == null) 
                : queryable.Where(u => u.Extension == extension);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Extension"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="extension">Extension to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByExtension(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String extension)
        {
            if (extension == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("extension", "Parameter 'extension' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Extension.Contains(extension));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Extension.StartsWith(extension));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Extension.EndsWith(extension));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Extension.Contains(extension) == false);
                case ContainmentOperator.NotEquals:
                    return extension == null 
                        ? queryable.Where(u => u.Extension != null) 
                        : queryable.Where(u => u.Extension != extension);
                default:
                    return extension == null 
                        ? queryable.Where(u => u.Extension == null) 
                        : queryable.Where(u => u.Extension == extension);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Extension"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="extension">Extension to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByExtension(this IQueryable<Malldub.Data.Upload> queryable, System.String extension, params System.String[] additionalValues)
        {
            var extensionList = new List<System.String> { extension };

            if (additionalValues != null)
                extensionList.AddRange(additionalValues);
            else
                extensionList.Add(null);

            if (extensionList.Count == 1)
                return queryable.ByExtension(extensionList[0]);

            return queryable.ByExtension(extensionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.Extension"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByExtension(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("Extension", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentLength">ContentLength to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentLength(this IQueryable<Malldub.Data.Upload> queryable, System.Int64? contentLength)
        {
            // support nulls
            return contentLength == null 
                ? queryable.Where(u => u.ContentLength == null) 
                : queryable.Where(u => u.ContentLength == contentLength);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentLength">ContentLength to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentLength(this IQueryable<Malldub.Data.Upload> queryable, ComparisonOperator comparisonOperator, System.Int64? contentLength)
        {
            if (contentLength == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("contentLength", "Parameter 'contentLength' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.ContentLength > contentLength);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.ContentLength >= contentLength);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.ContentLength < contentLength);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.ContentLength <= contentLength);
                case ComparisonOperator.NotEquals:
                    return contentLength == null 
                        ? queryable.Where(u => u.ContentLength != null) 
                        : queryable.Where(u => u.ContentLength != contentLength);
                default:
                    return contentLength == null 
                        ? queryable.Where(u => u.ContentLength == null) 
                        : queryable.Where(u => u.ContentLength == contentLength);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentLength">ContentLength to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentLength(this IQueryable<Malldub.Data.Upload> queryable, System.Int64? contentLength, params System.Int64?[] additionalValues)
        {
            var contentLengthList = new List<System.Int64?> { contentLength };

            if (additionalValues != null)
                contentLengthList.AddRange(additionalValues);
            else
                contentLengthList.Add(null);

            if (contentLengthList.Count == 1)
                return queryable.ByContentLength(contentLengthList[0]);

            return queryable.ByContentLength(contentLengthList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentLength"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentLength(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.Int64?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("ContentLength", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentType">ContentType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentType(this IQueryable<Malldub.Data.Upload> queryable, System.String contentType)
        {
            // support nulls
            return contentType == null 
                ? queryable.Where(u => u.ContentType == null) 
                : queryable.Where(u => u.ContentType == contentType);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentType">ContentType to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentType(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String contentType)
        {
            if (contentType == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("contentType", "Parameter 'contentType' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.ContentType.Contains(contentType));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.ContentType.StartsWith(contentType));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.ContentType.EndsWith(contentType));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.ContentType.Contains(contentType) == false);
                case ContainmentOperator.NotEquals:
                    return contentType == null 
                        ? queryable.Where(u => u.ContentType != null) 
                        : queryable.Where(u => u.ContentType != contentType);
                default:
                    return contentType == null 
                        ? queryable.Where(u => u.ContentType == null) 
                        : queryable.Where(u => u.ContentType == contentType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contentType">ContentType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentType(this IQueryable<Malldub.Data.Upload> queryable, System.String contentType, params System.String[] additionalValues)
        {
            var contentTypeList = new List<System.String> { contentType };

            if (additionalValues != null)
                contentTypeList.AddRange(additionalValues);
            else
                contentTypeList.Add(null);

            if (contentTypeList.Count == 1)
                return queryable.ByContentType(contentTypeList[0]);

            return queryable.ByContentType(contentTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContentType(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("ContentType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.LocationHttp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locationHttp">LocationHttp to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocationHttp(this IQueryable<Malldub.Data.Upload> queryable, System.String locationHttp)
        {
            // support nulls
            return locationHttp == null 
                ? queryable.Where(u => u.LocationHttp == null) 
                : queryable.Where(u => u.LocationHttp == locationHttp);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.LocationHttp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locationHttp">LocationHttp to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocationHttp(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String locationHttp)
        {
            if (locationHttp == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("locationHttp", "Parameter 'locationHttp' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.LocationHttp.Contains(locationHttp));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.LocationHttp.StartsWith(locationHttp));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.LocationHttp.EndsWith(locationHttp));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.LocationHttp.Contains(locationHttp) == false);
                case ContainmentOperator.NotEquals:
                    return locationHttp == null 
                        ? queryable.Where(u => u.LocationHttp != null) 
                        : queryable.Where(u => u.LocationHttp != locationHttp);
                default:
                    return locationHttp == null 
                        ? queryable.Where(u => u.LocationHttp == null) 
                        : queryable.Where(u => u.LocationHttp == locationHttp);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.LocationHttp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="locationHttp">LocationHttp to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocationHttp(this IQueryable<Malldub.Data.Upload> queryable, System.String locationHttp, params System.String[] additionalValues)
        {
            var locationHttpList = new List<System.String> { locationHttp };

            if (additionalValues != null)
                locationHttpList.AddRange(additionalValues);
            else
                locationHttpList.Add(null);

            if (locationHttpList.Count == 1)
                return queryable.ByLocationHttp(locationHttpList[0]);

            return queryable.ByLocationHttp(locationHttpList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.LocationHttp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByLocationHttp(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("LocationHttp", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContainerName(this IQueryable<Malldub.Data.Upload> queryable, System.String containerName)
        {
            // support nulls
            return containerName == null 
                ? queryable.Where(u => u.ContainerName == null) 
                : queryable.Where(u => u.ContainerName == containerName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContainerName(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String containerName)
        {
            if (containerName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("containerName", "Parameter 'containerName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.ContainerName.Contains(containerName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.ContainerName.StartsWith(containerName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.ContainerName.EndsWith(containerName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.ContainerName.Contains(containerName) == false);
                case ContainmentOperator.NotEquals:
                    return containerName == null 
                        ? queryable.Where(u => u.ContainerName != null) 
                        : queryable.Where(u => u.ContainerName != containerName);
                default:
                    return containerName == null 
                        ? queryable.Where(u => u.ContainerName == null) 
                        : queryable.Where(u => u.ContainerName == containerName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="containerName">ContainerName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContainerName(this IQueryable<Malldub.Data.Upload> queryable, System.String containerName, params System.String[] additionalValues)
        {
            var containerNameList = new List<System.String> { containerName };

            if (additionalValues != null)
                containerNameList.AddRange(additionalValues);
            else
                containerNameList.Add(null);

            if (containerNameList.Count == 1)
                return queryable.ByContainerName(containerNameList[0]);

            return queryable.ByContainerName(containerNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.ContainerName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByContainerName(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("ContainerName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateEntered(this IQueryable<Malldub.Data.Upload> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(u => u.DateEntered == null) 
                : queryable.Where(u => u.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateEntered(this IQueryable<Malldub.Data.Upload> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(u => u.DateEntered != null) 
                        : queryable.Where(u => u.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(u => u.DateEntered == null) 
                        : queryable.Where(u => u.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateEntered(this IQueryable<Malldub.Data.Upload> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateEntered(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateUpdated(this IQueryable<Malldub.Data.Upload> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(u => u.DateUpdated == null) 
                : queryable.Where(u => u.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateUpdated(this IQueryable<Malldub.Data.Upload> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(u => u.DateUpdated != null) 
                        : queryable.Where(u => u.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(u => u.DateUpdated == null) 
                        : queryable.Where(u => u.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateUpdated(this IQueryable<Malldub.Data.Upload> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByDateUpdated(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Upload, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByTypeId(this IQueryable<Malldub.Data.Upload> queryable, System.String typeId)
        {
            return queryable.Where(u => u.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByTypeId(this IQueryable<Malldub.Data.Upload> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.TypeId != typeId);
                default:
                    return queryable.Where(u => u.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByTypeId(this IQueryable<Malldub.Data.Upload> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Upload.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Upload> ByTypeId(this IQueryable<Malldub.Data.Upload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.TypeId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Upload> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Upload.FirstOrDefault(u => u.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Upload> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Upload.FirstOrDefault(u => u.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

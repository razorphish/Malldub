#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for AuctionInvoice.
    /// </summary>
    public static partial class AuctionInvoiceExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AuctionInvoice GetByKey(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 auctionId, System.Int32 invoiceId)
        {
            return queryable.FirstOrDefault(a => a.AuctionId == auctionId 
					&& a.InvoiceId == invoiceId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByAuctionId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 auctionId)
        {
            return queryable.Where(a => a.AuctionId == auctionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByAuctionId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32 auctionId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AuctionId > auctionId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AuctionId >= auctionId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AuctionId < auctionId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AuctionId <= auctionId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.AuctionId != auctionId);
                default:
                    return queryable.Where(a => a.AuctionId == auctionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auctionId">AuctionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByAuctionId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 auctionId, params System.Int32[] additionalValues)
        {
            var auctionIdList = new List<System.Int32> { auctionId };

            if (additionalValues != null)
                auctionIdList.AddRange(additionalValues);

            if (auctionIdList.Count == 1)
                return queryable.ByAuctionId(auctionIdList[0]);

            return queryable.ByAuctionId(auctionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.AuctionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByAuctionId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.AuctionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByInvoiceId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 invoiceId)
        {
            return queryable.Where(a => a.InvoiceId == invoiceId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByInvoiceId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32 invoiceId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.InvoiceId > invoiceId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.InvoiceId >= invoiceId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.InvoiceId < invoiceId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.InvoiceId <= invoiceId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.InvoiceId != invoiceId);
                default:
                    return queryable.Where(a => a.InvoiceId == invoiceId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="invoiceId">InvoiceId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByInvoiceId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 invoiceId, params System.Int32[] additionalValues)
        {
            var invoiceIdList = new List<System.Int32> { invoiceId };

            if (additionalValues != null)
                invoiceIdList.AddRange(additionalValues);

            if (invoiceIdList.Count == 1)
                return queryable.ByInvoiceId(invoiceIdList[0]);

            return queryable.ByInvoiceId(invoiceIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.InvoiceId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByInvoiceId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.InvoiceId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdPayable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdPayable">ClientIdPayable to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdPayable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32? clientIdPayable)
        {
            // support nulls
            return clientIdPayable == null 
                ? queryable.Where(a => a.ClientIdPayable == null) 
                : queryable.Where(a => a.ClientIdPayable == clientIdPayable);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdPayable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdPayable">ClientIdPayable to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdPayable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32? clientIdPayable)
        {
            if (clientIdPayable == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("clientIdPayable", "Parameter 'clientIdPayable' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ClientIdPayable > clientIdPayable);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ClientIdPayable >= clientIdPayable);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ClientIdPayable < clientIdPayable);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ClientIdPayable <= clientIdPayable);
                case ComparisonOperator.NotEquals:
                    return clientIdPayable == null 
                        ? queryable.Where(a => a.ClientIdPayable != null) 
                        : queryable.Where(a => a.ClientIdPayable != clientIdPayable);
                default:
                    return clientIdPayable == null 
                        ? queryable.Where(a => a.ClientIdPayable == null) 
                        : queryable.Where(a => a.ClientIdPayable == clientIdPayable);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdPayable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdPayable">ClientIdPayable to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdPayable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32? clientIdPayable, params System.Int32?[] additionalValues)
        {
            var clientIdPayableList = new List<System.Int32?> { clientIdPayable };

            if (additionalValues != null)
                clientIdPayableList.AddRange(additionalValues);
            else
                clientIdPayableList.Add(null);

            if (clientIdPayableList.Count == 1)
                return queryable.ByClientIdPayable(clientIdPayableList[0]);

            return queryable.ByClientIdPayable(clientIdPayableList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdPayable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdPayable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AuctionInvoice, bool>("ClientIdPayable", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdReceivable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdReceivable">ClientIdReceivable to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdReceivable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 clientIdReceivable)
        {
            return queryable.Where(a => a.ClientIdReceivable == clientIdReceivable);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdReceivable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdReceivable">ClientIdReceivable to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdReceivable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32 clientIdReceivable)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ClientIdReceivable > clientIdReceivable);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ClientIdReceivable >= clientIdReceivable);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ClientIdReceivable < clientIdReceivable);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ClientIdReceivable <= clientIdReceivable);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.ClientIdReceivable != clientIdReceivable);
                default:
                    return queryable.Where(a => a.ClientIdReceivable == clientIdReceivable);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdReceivable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="clientIdReceivable">ClientIdReceivable to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdReceivable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 clientIdReceivable, params System.Int32[] additionalValues)
        {
            var clientIdReceivableList = new List<System.Int32> { clientIdReceivable };

            if (additionalValues != null)
                clientIdReceivableList.AddRange(additionalValues);

            if (clientIdReceivableList.Count == 1)
                return queryable.ByClientIdReceivable(clientIdReceivableList[0]);

            return queryable.ByClientIdReceivable(clientIdReceivableList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.ClientIdReceivable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByClientIdReceivable(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.ClientIdReceivable));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 typeId)
        {
            return queryable.Where(a => a.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32 typeId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.TypeId > typeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.TypeId >= typeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.TypeId < typeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.TypeId <= typeId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.TypeId != typeId);
                default:
                    return queryable.Where(a => a.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32 typeId, params System.Int32[] additionalValues)
        {
            var typeIdList = new List<System.Int32> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.SystemInvoice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemInvoice">SystemInvoice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> BySystemInvoice(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Boolean systemInvoice)
        {
            return queryable.Where(a => a.SystemInvoice == systemInvoice);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.SystemInvoice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemInvoice">SystemInvoice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> BySystemInvoice(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Boolean systemInvoice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.SystemInvoice != systemInvoice);
                default:
                    return queryable.Where(a => a.SystemInvoice == systemInvoice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.SystemInvoice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="systemInvoice">SystemInvoice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> BySystemInvoice(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Boolean systemInvoice, params System.Boolean[] additionalValues)
        {
            var systemInvoiceList = new List<System.Boolean> { systemInvoice };

            if (additionalValues != null)
                systemInvoiceList.AddRange(additionalValues);

            if (systemInvoiceList.Count == 1)
                return queryable.BySystemInvoice(systemInvoiceList[0]);

            return queryable.BySystemInvoice(systemInvoiceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.SystemInvoice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> BySystemInvoice(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(a => values.Contains(a.SystemInvoice));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.BillToTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToTypeId">BillToTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByBillToTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32? billToTypeId)
        {
            // support nulls
            return billToTypeId == null 
                ? queryable.Where(a => a.BillToTypeId == null) 
                : queryable.Where(a => a.BillToTypeId == billToTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.BillToTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToTypeId">BillToTypeId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByBillToTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, ComparisonOperator comparisonOperator, System.Int32? billToTypeId)
        {
            if (billToTypeId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("billToTypeId", "Parameter 'billToTypeId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.BillToTypeId > billToTypeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.BillToTypeId >= billToTypeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.BillToTypeId < billToTypeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.BillToTypeId <= billToTypeId);
                case ComparisonOperator.NotEquals:
                    return billToTypeId == null 
                        ? queryable.Where(a => a.BillToTypeId != null) 
                        : queryable.Where(a => a.BillToTypeId != billToTypeId);
                default:
                    return billToTypeId == null 
                        ? queryable.Where(a => a.BillToTypeId == null) 
                        : queryable.Where(a => a.BillToTypeId == billToTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.BillToTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="billToTypeId">BillToTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByBillToTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, System.Int32? billToTypeId, params System.Int32?[] additionalValues)
        {
            var billToTypeIdList = new List<System.Int32?> { billToTypeId };

            if (additionalValues != null)
                billToTypeIdList.AddRange(additionalValues);
            else
                billToTypeIdList.Add(null);

            if (billToTypeIdList.Count == 1)
                return queryable.ByBillToTypeId(billToTypeIdList[0]);

            return queryable.ByBillToTypeId(billToTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionInvoice.BillToTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionInvoice> ByBillToTypeId(this IQueryable<Malldub.Data.AuctionInvoice> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AuctionInvoice, bool>("BillToTypeId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.Int32, Malldub.Data.AuctionInvoice> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 auctionId, System.Int32 invoiceId) =>
                        db.AuctionInvoice.FirstOrDefault(a => a.AuctionId == auctionId 
							&& a.InvoiceId == invoiceId));
        }
        #endregion
    }
}
#pragma warning restore 1591

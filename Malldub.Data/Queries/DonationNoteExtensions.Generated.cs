#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for DonationNote.
    /// </summary>
    public static partial class DonationNoteExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.DonationNote GetByKey(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(d => d.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.DonationNote GetByIdentification(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.DonationNote>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByIdentification(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 identification)
        {
            return queryable.Where(d => d.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByIdentification(this IQueryable<Malldub.Data.DonationNote> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.Identification != identification);
                default:
                    return queryable.Where(d => d.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByIdentification(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByIdentification(this IQueryable<Malldub.Data.DonationNote> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(d => values.Contains(d.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDonationId(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 donationId)
        {
            return queryable.Where(d => d.DonationId == donationId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDonationId(this IQueryable<Malldub.Data.DonationNote> queryable, ComparisonOperator comparisonOperator, System.Int32 donationId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DonationId > donationId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DonationId >= donationId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DonationId < donationId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DonationId <= donationId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.DonationId != donationId);
                default:
                    return queryable.Where(d => d.DonationId == donationId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDonationId(this IQueryable<Malldub.Data.DonationNote> queryable, System.Int32 donationId, params System.Int32[] additionalValues)
        {
            var donationIdList = new List<System.Int32> { donationId };

            if (additionalValues != null)
                donationIdList.AddRange(additionalValues);

            if (donationIdList.Count == 1)
                return queryable.ByDonationId(donationIdList[0]);

            return queryable.ByDonationId(donationIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDonationId(this IQueryable<Malldub.Data.DonationNote> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(d => values.Contains(d.DonationId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByMessage(this IQueryable<Malldub.Data.DonationNote> queryable, System.String message)
        {
            return queryable.Where(d => d.Message == message);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByMessage(this IQueryable<Malldub.Data.DonationNote> queryable, ContainmentOperator containmentOperator, System.String message)
        {
            if (message == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("message", "Parameter 'message' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Message.Contains(message));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Message.StartsWith(message));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Message.EndsWith(message));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Message.Contains(message) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.Message != message);
                default:
                    return queryable.Where(d => d.Message == message);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="message">Message to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByMessage(this IQueryable<Malldub.Data.DonationNote> queryable, System.String message, params System.String[] additionalValues)
        {
            var messageList = new List<System.String> { message };

            if (additionalValues != null)
                messageList.AddRange(additionalValues);

            if (messageList.Count == 1)
                return queryable.ByMessage(messageList[0]);

            return queryable.ByMessage(messageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.Message"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByMessage(this IQueryable<Malldub.Data.DonationNote> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.Message));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByTypeId(this IQueryable<Malldub.Data.DonationNote> queryable, System.String typeId)
        {
            return queryable.Where(d => d.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByTypeId(this IQueryable<Malldub.Data.DonationNote> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.TypeId != typeId);
                default:
                    return queryable.Where(d => d.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByTypeId(this IQueryable<Malldub.Data.DonationNote> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByTypeId(this IQueryable<Malldub.Data.DonationNote> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(d => values.Contains(d.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDateEntered(this IQueryable<Malldub.Data.DonationNote> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(d => d.DateEntered == null) 
                : queryable.Where(d => d.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDateEntered(this IQueryable<Malldub.Data.DonationNote> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(d => d.DateEntered != null) 
                        : queryable.Where(d => d.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(d => d.DateEntered == null) 
                        : queryable.Where(d => d.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDateEntered(this IQueryable<Malldub.Data.DonationNote> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.DonationNote.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.DonationNote> ByDateEntered(this IQueryable<Malldub.Data.DonationNote> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.DonationNote, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.DonationNote> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.DonationNote.FirstOrDefault(d => d.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.DonationNote> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.DonationNote.FirstOrDefault(d => d.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

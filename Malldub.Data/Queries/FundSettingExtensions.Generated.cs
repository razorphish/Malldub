#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundSetting.
    /// </summary>
    public static partial class FundSettingExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundSetting GetByKey(this IQueryable<Malldub.Data.FundSetting> queryable, System.Int32 fundId)
        {
            return queryable.FirstOrDefault(f => f.FundId == fundId);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundSetting GetByFundId(this IQueryable<Malldub.Data.FundSetting> queryable, System.Int32 fundId)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.FundSetting>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByFundId.Invoke((Malldub.Data.MalldubDataContext)entity.Context, fundId);

            return queryable.FirstOrDefault(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFundId(this IQueryable<Malldub.Data.FundSetting> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFundId(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFundId(this IQueryable<Malldub.Data.FundSetting> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFundId(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowAnonymousDonors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowAnonymousDonors">AllowAnonymousDonors to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowAnonymousDonors(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowAnonymousDonors)
        {
            return queryable.Where(f => f.AllowAnonymousDonors == allowAnonymousDonors);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowAnonymousDonors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowAnonymousDonors">AllowAnonymousDonors to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowAnonymousDonors(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean allowAnonymousDonors)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.AllowAnonymousDonors != allowAnonymousDonors);
                default:
                    return queryable.Where(f => f.AllowAnonymousDonors == allowAnonymousDonors);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowAnonymousDonors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowAnonymousDonors">AllowAnonymousDonors to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowAnonymousDonors(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowAnonymousDonors, params System.Boolean[] additionalValues)
        {
            var allowAnonymousDonorsList = new List<System.Boolean> { allowAnonymousDonors };

            if (additionalValues != null)
                allowAnonymousDonorsList.AddRange(additionalValues);

            if (allowAnonymousDonorsList.Count == 1)
                return queryable.ByAllowAnonymousDonors(allowAnonymousDonorsList[0]);

            return queryable.ByAllowAnonymousDonors(allowAnonymousDonorsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowAnonymousDonors"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowAnonymousDonors(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.AllowAnonymousDonors));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowRecuringPayments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowRecuringPayments">AllowRecuringPayments to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowRecuringPayments(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowRecuringPayments)
        {
            return queryable.Where(f => f.AllowRecuringPayments == allowRecuringPayments);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowRecuringPayments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowRecuringPayments">AllowRecuringPayments to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowRecuringPayments(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean allowRecuringPayments)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.AllowRecuringPayments != allowRecuringPayments);
                default:
                    return queryable.Where(f => f.AllowRecuringPayments == allowRecuringPayments);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowRecuringPayments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowRecuringPayments">AllowRecuringPayments to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowRecuringPayments(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowRecuringPayments, params System.Boolean[] additionalValues)
        {
            var allowRecuringPaymentsList = new List<System.Boolean> { allowRecuringPayments };

            if (additionalValues != null)
                allowRecuringPaymentsList.AddRange(additionalValues);

            if (allowRecuringPaymentsList.Count == 1)
                return queryable.ByAllowRecuringPayments(allowRecuringPaymentsList[0]);

            return queryable.ByAllowRecuringPayments(allowRecuringPaymentsList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowRecuringPayments"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowRecuringPayments(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.AllowRecuringPayments));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowCommenting"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowCommenting">AllowCommenting to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowCommenting(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowCommenting)
        {
            return queryable.Where(f => f.AllowCommenting == allowCommenting);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowCommenting"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowCommenting">AllowCommenting to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowCommenting(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean allowCommenting)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.AllowCommenting != allowCommenting);
                default:
                    return queryable.Where(f => f.AllowCommenting == allowCommenting);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowCommenting"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowCommenting">AllowCommenting to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowCommenting(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean allowCommenting, params System.Boolean[] additionalValues)
        {
            var allowCommentingList = new List<System.Boolean> { allowCommenting };

            if (additionalValues != null)
                allowCommentingList.AddRange(additionalValues);

            if (allowCommentingList.Count == 1)
                return queryable.ByAllowCommenting(allowCommentingList[0]);

            return queryable.ByAllowCommenting(allowCommentingList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.AllowCommenting"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByAllowCommenting(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.AllowCommenting));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.UsePaymentModal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="usePaymentModal">UsePaymentModal to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByUsePaymentModal(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean usePaymentModal)
        {
            return queryable.Where(f => f.UsePaymentModal == usePaymentModal);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.UsePaymentModal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="usePaymentModal">UsePaymentModal to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByUsePaymentModal(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean usePaymentModal)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.UsePaymentModal != usePaymentModal);
                default:
                    return queryable.Where(f => f.UsePaymentModal == usePaymentModal);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.UsePaymentModal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="usePaymentModal">UsePaymentModal to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByUsePaymentModal(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean usePaymentModal, params System.Boolean[] additionalValues)
        {
            var usePaymentModalList = new List<System.Boolean> { usePaymentModal };

            if (additionalValues != null)
                usePaymentModalList.AddRange(additionalValues);

            if (usePaymentModalList.Count == 1)
                return queryable.ByUsePaymentModal(usePaymentModalList[0]);

            return queryable.ByUsePaymentModal(usePaymentModalList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.UsePaymentModal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByUsePaymentModal(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.UsePaymentModal));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddVideo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddVideo">FacebookPostAddVideo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddVideo(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostAddVideo)
        {
            return queryable.Where(f => f.FacebookPostAddVideo == facebookPostAddVideo);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddVideo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddVideo">FacebookPostAddVideo to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddVideo(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostAddVideo)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostAddVideo != facebookPostAddVideo);
                default:
                    return queryable.Where(f => f.FacebookPostAddVideo == facebookPostAddVideo);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddVideo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddVideo">FacebookPostAddVideo to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddVideo(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostAddVideo, params System.Boolean[] additionalValues)
        {
            var facebookPostAddVideoList = new List<System.Boolean> { facebookPostAddVideo };

            if (additionalValues != null)
                facebookPostAddVideoList.AddRange(additionalValues);

            if (facebookPostAddVideoList.Count == 1)
                return queryable.ByFacebookPostAddVideo(facebookPostAddVideoList[0]);

            return queryable.ByFacebookPostAddVideo(facebookPostAddVideoList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddVideo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddVideo(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostAddVideo));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddImage">FacebookPostAddImage to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddImage(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostAddImage)
        {
            return queryable.Where(f => f.FacebookPostAddImage == facebookPostAddImage);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddImage">FacebookPostAddImage to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddImage(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostAddImage)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostAddImage != facebookPostAddImage);
                default:
                    return queryable.Where(f => f.FacebookPostAddImage == facebookPostAddImage);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostAddImage">FacebookPostAddImage to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddImage(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostAddImage, params System.Boolean[] additionalValues)
        {
            var facebookPostAddImageList = new List<System.Boolean> { facebookPostAddImage };

            if (additionalValues != null)
                facebookPostAddImageList.AddRange(additionalValues);

            if (facebookPostAddImageList.Count == 1)
                return queryable.ByFacebookPostAddImage(facebookPostAddImageList[0]);

            return queryable.ByFacebookPostAddImage(facebookPostAddImageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostAddImage"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostAddImage(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostAddImage));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUpdate">FacebookPostUpdate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUpdate(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUpdate)
        {
            return queryable.Where(f => f.FacebookPostUpdate == facebookPostUpdate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUpdate">FacebookPostUpdate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUpdate(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostUpdate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostUpdate != facebookPostUpdate);
                default:
                    return queryable.Where(f => f.FacebookPostUpdate == facebookPostUpdate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUpdate">FacebookPostUpdate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUpdate(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUpdate, params System.Boolean[] additionalValues)
        {
            var facebookPostUpdateList = new List<System.Boolean> { facebookPostUpdate };

            if (additionalValues != null)
                facebookPostUpdateList.AddRange(additionalValues);

            if (facebookPostUpdateList.Count == 1)
                return queryable.ByFacebookPostUpdate(facebookPostUpdateList[0]);

            return queryable.ByFacebookPostUpdate(facebookPostUpdateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUpdate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUpdate(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostUpdate));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserSupport">FacebookPostUserSupport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserSupport)
        {
            return queryable.Where(f => f.FacebookPostUserSupport == facebookPostUserSupport);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserSupport">FacebookPostUserSupport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostUserSupport)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostUserSupport != facebookPostUserSupport);
                default:
                    return queryable.Where(f => f.FacebookPostUserSupport == facebookPostUserSupport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserSupport">FacebookPostUserSupport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserSupport, params System.Boolean[] additionalValues)
        {
            var facebookPostUserSupportList = new List<System.Boolean> { facebookPostUserSupport };

            if (additionalValues != null)
                facebookPostUserSupportList.AddRange(additionalValues);

            if (facebookPostUserSupportList.Count == 1)
                return queryable.ByFacebookPostUserSupport(facebookPostUserSupportList[0]);

            return queryable.ByFacebookPostUserSupport(facebookPostUserSupportList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostUserSupport));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserDonate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserDonate">FacebookPostUserDonate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserDonate(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserDonate)
        {
            return queryable.Where(f => f.FacebookPostUserDonate == facebookPostUserDonate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserDonate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserDonate">FacebookPostUserDonate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserDonate(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostUserDonate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostUserDonate != facebookPostUserDonate);
                default:
                    return queryable.Where(f => f.FacebookPostUserDonate == facebookPostUserDonate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserDonate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserDonate">FacebookPostUserDonate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserDonate(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserDonate, params System.Boolean[] additionalValues)
        {
            var facebookPostUserDonateList = new List<System.Boolean> { facebookPostUserDonate };

            if (additionalValues != null)
                facebookPostUserDonateList.AddRange(additionalValues);

            if (facebookPostUserDonateList.Count == 1)
                return queryable.ByFacebookPostUserDonate(facebookPostUserDonateList[0]);

            return queryable.ByFacebookPostUserDonate(facebookPostUserDonateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserDonate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserDonate(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostUserDonate));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserFundraiser">FacebookPostUserFundraiser to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserFundraiser)
        {
            return queryable.Where(f => f.FacebookPostUserFundraiser == facebookPostUserFundraiser);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserFundraiser">FacebookPostUserFundraiser to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostUserFundraiser)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostUserFundraiser != facebookPostUserFundraiser);
                default:
                    return queryable.Where(f => f.FacebookPostUserFundraiser == facebookPostUserFundraiser);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserFundraiser">FacebookPostUserFundraiser to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserFundraiser, params System.Boolean[] additionalValues)
        {
            var facebookPostUserFundraiserList = new List<System.Boolean> { facebookPostUserFundraiser };

            if (additionalValues != null)
                facebookPostUserFundraiserList.AddRange(additionalValues);

            if (facebookPostUserFundraiserList.Count == 1)
                return queryable.ByFacebookPostUserFundraiser(facebookPostUserFundraiserList[0]);

            return queryable.ByFacebookPostUserFundraiser(facebookPostUserFundraiserList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostUserFundraiser));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserDonation">EmailReceiveUserDonation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserDonation(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserDonation)
        {
            return queryable.Where(f => f.EmailReceiveUserDonation == emailReceiveUserDonation);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserDonation">EmailReceiveUserDonation to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserDonation(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailReceiveUserDonation)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailReceiveUserDonation != emailReceiveUserDonation);
                default:
                    return queryable.Where(f => f.EmailReceiveUserDonation == emailReceiveUserDonation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserDonation">EmailReceiveUserDonation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserDonation(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserDonation, params System.Boolean[] additionalValues)
        {
            var emailReceiveUserDonationList = new List<System.Boolean> { emailReceiveUserDonation };

            if (additionalValues != null)
                emailReceiveUserDonationList.AddRange(additionalValues);

            if (emailReceiveUserDonationList.Count == 1)
                return queryable.ByEmailReceiveUserDonation(emailReceiveUserDonationList[0]);

            return queryable.ByEmailReceiveUserDonation(emailReceiveUserDonationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserDonation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserDonation(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailReceiveUserDonation));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserSupport">EmailReceiveUserSupport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserSupport)
        {
            return queryable.Where(f => f.EmailReceiveUserSupport == emailReceiveUserSupport);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserSupport">EmailReceiveUserSupport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailReceiveUserSupport)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailReceiveUserSupport != emailReceiveUserSupport);
                default:
                    return queryable.Where(f => f.EmailReceiveUserSupport == emailReceiveUserSupport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserSupport">EmailReceiveUserSupport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserSupport, params System.Boolean[] additionalValues)
        {
            var emailReceiveUserSupportList = new List<System.Boolean> { emailReceiveUserSupport };

            if (additionalValues != null)
                emailReceiveUserSupportList.AddRange(additionalValues);

            if (emailReceiveUserSupportList.Count == 1)
                return queryable.ByEmailReceiveUserSupport(emailReceiveUserSupportList[0]);

            return queryable.ByEmailReceiveUserSupport(emailReceiveUserSupportList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserSupport(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailReceiveUserSupport));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserFundraiser">EmailReceiveUserFundraiser to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserFundraiser)
        {
            return queryable.Where(f => f.EmailReceiveUserFundraiser == emailReceiveUserFundraiser);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserFundraiser">EmailReceiveUserFundraiser to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailReceiveUserFundraiser)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailReceiveUserFundraiser != emailReceiveUserFundraiser);
                default:
                    return queryable.Where(f => f.EmailReceiveUserFundraiser == emailReceiveUserFundraiser);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserFundraiser">EmailReceiveUserFundraiser to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserFundraiser, params System.Boolean[] additionalValues)
        {
            var emailReceiveUserFundraiserList = new List<System.Boolean> { emailReceiveUserFundraiser };

            if (additionalValues != null)
                emailReceiveUserFundraiserList.AddRange(additionalValues);

            if (emailReceiveUserFundraiserList.Count == 1)
                return queryable.ByEmailReceiveUserFundraiser(emailReceiveUserFundraiserList[0]);

            return queryable.ByEmailReceiveUserFundraiser(emailReceiveUserFundraiserList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserFundraiser"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserFundraiser(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailReceiveUserFundraiser));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserTeamMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserTeamMember">EmailReceiveUserTeamMember to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserTeamMember(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserTeamMember)
        {
            return queryable.Where(f => f.EmailReceiveUserTeamMember == emailReceiveUserTeamMember);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserTeamMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserTeamMember">EmailReceiveUserTeamMember to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserTeamMember(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailReceiveUserTeamMember)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailReceiveUserTeamMember != emailReceiveUserTeamMember);
                default:
                    return queryable.Where(f => f.EmailReceiveUserTeamMember == emailReceiveUserTeamMember);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserTeamMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailReceiveUserTeamMember">EmailReceiveUserTeamMember to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserTeamMember(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailReceiveUserTeamMember, params System.Boolean[] additionalValues)
        {
            var emailReceiveUserTeamMemberList = new List<System.Boolean> { emailReceiveUserTeamMember };

            if (additionalValues != null)
                emailReceiveUserTeamMemberList.AddRange(additionalValues);

            if (emailReceiveUserTeamMemberList.Count == 1)
                return queryable.ByEmailReceiveUserTeamMember(emailReceiveUserTeamMemberList[0]);

            return queryable.ByEmailReceiveUserTeamMember(emailReceiveUserTeamMemberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailReceiveUserTeamMember"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailReceiveUserTeamMember(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailReceiveUserTeamMember));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter25Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter25Raised">EmailSendSupporter25Raised to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter25Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter25Raised)
        {
            return queryable.Where(f => f.EmailSendSupporter25Raised == emailSendSupporter25Raised);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter25Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter25Raised">EmailSendSupporter25Raised to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter25Raised(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailSendSupporter25Raised)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailSendSupporter25Raised != emailSendSupporter25Raised);
                default:
                    return queryable.Where(f => f.EmailSendSupporter25Raised == emailSendSupporter25Raised);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter25Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter25Raised">EmailSendSupporter25Raised to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter25Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter25Raised, params System.Boolean[] additionalValues)
        {
            var emailSendSupporter25RaisedList = new List<System.Boolean> { emailSendSupporter25Raised };

            if (additionalValues != null)
                emailSendSupporter25RaisedList.AddRange(additionalValues);

            if (emailSendSupporter25RaisedList.Count == 1)
                return queryable.ByEmailSendSupporter25Raised(emailSendSupporter25RaisedList[0]);

            return queryable.ByEmailSendSupporter25Raised(emailSendSupporter25RaisedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter25Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter25Raised(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailSendSupporter25Raised));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter50Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter50Raised">EmailSendSupporter50Raised to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter50Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter50Raised)
        {
            return queryable.Where(f => f.EmailSendSupporter50Raised == emailSendSupporter50Raised);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter50Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter50Raised">EmailSendSupporter50Raised to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter50Raised(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailSendSupporter50Raised)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailSendSupporter50Raised != emailSendSupporter50Raised);
                default:
                    return queryable.Where(f => f.EmailSendSupporter50Raised == emailSendSupporter50Raised);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter50Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter50Raised">EmailSendSupporter50Raised to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter50Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter50Raised, params System.Boolean[] additionalValues)
        {
            var emailSendSupporter50RaisedList = new List<System.Boolean> { emailSendSupporter50Raised };

            if (additionalValues != null)
                emailSendSupporter50RaisedList.AddRange(additionalValues);

            if (emailSendSupporter50RaisedList.Count == 1)
                return queryable.ByEmailSendSupporter50Raised(emailSendSupporter50RaisedList[0]);

            return queryable.ByEmailSendSupporter50Raised(emailSendSupporter50RaisedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter50Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter50Raised(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailSendSupporter50Raised));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter75Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter75Raised">EmailSendSupporter75Raised to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter75Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter75Raised)
        {
            return queryable.Where(f => f.EmailSendSupporter75Raised == emailSendSupporter75Raised);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter75Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter75Raised">EmailSendSupporter75Raised to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter75Raised(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailSendSupporter75Raised)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailSendSupporter75Raised != emailSendSupporter75Raised);
                default:
                    return queryable.Where(f => f.EmailSendSupporter75Raised == emailSendSupporter75Raised);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter75Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporter75Raised">EmailSendSupporter75Raised to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter75Raised(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporter75Raised, params System.Boolean[] additionalValues)
        {
            var emailSendSupporter75RaisedList = new List<System.Boolean> { emailSendSupporter75Raised };

            if (additionalValues != null)
                emailSendSupporter75RaisedList.AddRange(additionalValues);

            if (emailSendSupporter75RaisedList.Count == 1)
                return queryable.ByEmailSendSupporter75Raised(emailSendSupporter75RaisedList[0]);

            return queryable.ByEmailSendSupporter75Raised(emailSendSupporter75RaisedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporter75Raised"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporter75Raised(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailSendSupporter75Raised));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporterFriendSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporterFriendSupport">EmailSendSupporterFriendSupport to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporterFriendSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporterFriendSupport)
        {
            return queryable.Where(f => f.EmailSendSupporterFriendSupport == emailSendSupporterFriendSupport);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporterFriendSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporterFriendSupport">EmailSendSupporterFriendSupport to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporterFriendSupport(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean emailSendSupporterFriendSupport)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.EmailSendSupporterFriendSupport != emailSendSupporterFriendSupport);
                default:
                    return queryable.Where(f => f.EmailSendSupporterFriendSupport == emailSendSupporterFriendSupport);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporterFriendSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="emailSendSupporterFriendSupport">EmailSendSupporterFriendSupport to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporterFriendSupport(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean emailSendSupporterFriendSupport, params System.Boolean[] additionalValues)
        {
            var emailSendSupporterFriendSupportList = new List<System.Boolean> { emailSendSupporterFriendSupport };

            if (additionalValues != null)
                emailSendSupporterFriendSupportList.AddRange(additionalValues);

            if (emailSendSupporterFriendSupportList.Count == 1)
                return queryable.ByEmailSendSupporterFriendSupport(emailSendSupporterFriendSupportList[0]);

            return queryable.ByEmailSendSupporterFriendSupport(emailSendSupporterFriendSupportList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.EmailSendSupporterFriendSupport"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByEmailSendSupporterFriendSupport(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.EmailSendSupporterFriendSupport));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserComment">FacebookPostUserComment to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserComment(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserComment)
        {
            return queryable.Where(f => f.FacebookPostUserComment == facebookPostUserComment);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserComment">FacebookPostUserComment to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserComment(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean facebookPostUserComment)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FacebookPostUserComment != facebookPostUserComment);
                default:
                    return queryable.Where(f => f.FacebookPostUserComment == facebookPostUserComment);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="facebookPostUserComment">FacebookPostUserComment to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserComment(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean facebookPostUserComment, params System.Boolean[] additionalValues)
        {
            var facebookPostUserCommentList = new List<System.Boolean> { facebookPostUserComment };

            if (additionalValues != null)
                facebookPostUserCommentList.AddRange(additionalValues);

            if (facebookPostUserCommentList.Count == 1)
                return queryable.ByFacebookPostUserComment(facebookPostUserCommentList[0]);

            return queryable.ByFacebookPostUserComment(facebookPostUserCommentList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.FacebookPostUserComment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByFacebookPostUserComment(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.FacebookPostUserComment));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideAmount">DonationHideAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideAmount(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean donationHideAmount)
        {
            return queryable.Where(f => f.DonationHideAmount == donationHideAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideAmount">DonationHideAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideAmount(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean donationHideAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.DonationHideAmount != donationHideAmount);
                default:
                    return queryable.Where(f => f.DonationHideAmount == donationHideAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideAmount">DonationHideAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideAmount(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean donationHideAmount, params System.Boolean[] additionalValues)
        {
            var donationHideAmountList = new List<System.Boolean> { donationHideAmount };

            if (additionalValues != null)
                donationHideAmountList.AddRange(additionalValues);

            if (donationHideAmountList.Count == 1)
                return queryable.ByDonationHideAmount(donationHideAmountList[0]);

            return queryable.ByDonationHideAmount(donationHideAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideAmount(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.DonationHideAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideDonorName">DonationHideDonorName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideDonorName(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean donationHideDonorName)
        {
            return queryable.Where(f => f.DonationHideDonorName == donationHideDonorName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideDonorName">DonationHideDonorName to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideDonorName(this IQueryable<Malldub.Data.FundSetting> queryable, ComparisonOperator comparisonOperator, System.Boolean donationHideDonorName)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.DonationHideDonorName != donationHideDonorName);
                default:
                    return queryable.Where(f => f.DonationHideDonorName == donationHideDonorName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationHideDonorName">DonationHideDonorName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideDonorName(this IQueryable<Malldub.Data.FundSetting> queryable, System.Boolean donationHideDonorName, params System.Boolean[] additionalValues)
        {
            var donationHideDonorNameList = new List<System.Boolean> { donationHideDonorName };

            if (additionalValues != null)
                donationHideDonorNameList.AddRange(additionalValues);

            if (donationHideDonorNameList.Count == 1)
                return queryable.ByDonationHideDonorName(donationHideDonorNameList[0]);

            return queryable.ByDonationHideDonorName(donationHideDonorNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundSetting.DonationHideDonorName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundSetting> ByDonationHideDonorName(this IQueryable<Malldub.Data.FundSetting> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.DonationHideDonorName));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundSetting> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 fundId) =>
                        db.FundSetting.FirstOrDefault(f => f.FundId == fundId));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundSetting> GetByFundId =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 fundId) =>
                        db.FundSetting.FirstOrDefault(f => f.FundId == fundId));

        }
        #endregion
    }
}
#pragma warning restore 1591

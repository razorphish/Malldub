#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Item.
    /// </summary>
    public static partial class ItemExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Item GetByKey(this IQueryable<Malldub.Data.Item> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(i => i.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Item GetByIdentification(this IQueryable<Malldub.Data.Item> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Item>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByIdentification(this IQueryable<Malldub.Data.Item> queryable, System.Int32 identification)
        {
            return queryable.Where(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByIdentification(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Identification != identification);
                default:
                    return queryable.Where(i => i.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByIdentification(this IQueryable<Malldub.Data.Item> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByIdentification(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByUserId(this IQueryable<Malldub.Data.Item> queryable, System.String userId)
        {
            return queryable.Where(i => i.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByUserId(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.UserId != userId);
                default:
                    return queryable.Where(i => i.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByUserId(this IQueryable<Malldub.Data.Item> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByUserId(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTypeId(this IQueryable<Malldub.Data.Item> queryable, System.String typeId)
        {
            return queryable.Where(i => i.TypeId == typeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTypeId(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String typeId)
        {
            if (typeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("typeId", "Parameter 'typeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.TypeId.Contains(typeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.TypeId.StartsWith(typeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.TypeId.EndsWith(typeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.TypeId.Contains(typeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.TypeId != typeId);
                default:
                    return queryable.Where(i => i.TypeId == typeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="typeId">TypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTypeId(this IQueryable<Malldub.Data.Item> queryable, System.String typeId, params System.String[] additionalValues)
        {
            var typeIdList = new List<System.String> { typeId };

            if (additionalValues != null)
                typeIdList.AddRange(additionalValues);

            if (typeIdList.Count == 1)
                return queryable.ByTypeId(typeIdList[0]);

            return queryable.ByTypeId(typeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTypeId(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.TypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TransactionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="transactionTypeId">TransactionTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTransactionTypeId(this IQueryable<Malldub.Data.Item> queryable, System.String transactionTypeId)
        {
            // support nulls
            return transactionTypeId == null 
                ? queryable.Where(i => i.TransactionTypeId == null) 
                : queryable.Where(i => i.TransactionTypeId == transactionTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TransactionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="transactionTypeId">TransactionTypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTransactionTypeId(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String transactionTypeId)
        {
            if (transactionTypeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("transactionTypeId", "Parameter 'transactionTypeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.TransactionTypeId.Contains(transactionTypeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.TransactionTypeId.StartsWith(transactionTypeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.TransactionTypeId.EndsWith(transactionTypeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.TransactionTypeId.Contains(transactionTypeId) == false);
                case ContainmentOperator.NotEquals:
                    return transactionTypeId == null 
                        ? queryable.Where(i => i.TransactionTypeId != null) 
                        : queryable.Where(i => i.TransactionTypeId != transactionTypeId);
                default:
                    return transactionTypeId == null 
                        ? queryable.Where(i => i.TransactionTypeId == null) 
                        : queryable.Where(i => i.TransactionTypeId == transactionTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TransactionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="transactionTypeId">TransactionTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTransactionTypeId(this IQueryable<Malldub.Data.Item> queryable, System.String transactionTypeId, params System.String[] additionalValues)
        {
            var transactionTypeIdList = new List<System.String> { transactionTypeId };

            if (additionalValues != null)
                transactionTypeIdList.AddRange(additionalValues);
            else
                transactionTypeIdList.Add(null);

            if (transactionTypeIdList.Count == 1)
                return queryable.ByTransactionTypeId(transactionTypeIdList[0]);

            return queryable.ByTransactionTypeId(transactionTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.TransactionTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTransactionTypeId(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("TransactionTypeId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTitle(this IQueryable<Malldub.Data.Item> queryable, System.String title)
        {
            return queryable.Where(i => i.Title == title);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTitle(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String title)
        {
            if (title == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("title", "Parameter 'title' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Title.Contains(title));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Title.StartsWith(title));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Title.EndsWith(title));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Title.Contains(title) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.Title != title);
                default:
                    return queryable.Where(i => i.Title == title);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="title">Title to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTitle(this IQueryable<Malldub.Data.Item> queryable, System.String title, params System.String[] additionalValues)
        {
            var titleList = new List<System.String> { title };

            if (additionalValues != null)
                titleList.AddRange(additionalValues);

            if (titleList.Count == 1)
                return queryable.ByTitle(titleList[0]);

            return queryable.ByTitle(titleList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Title"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByTitle(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.Title));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.ShortSummary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shortSummary">ShortSummary to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByShortSummary(this IQueryable<Malldub.Data.Item> queryable, System.String shortSummary)
        {
            // support nulls
            return shortSummary == null 
                ? queryable.Where(i => i.ShortSummary == null) 
                : queryable.Where(i => i.ShortSummary == shortSummary);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.ShortSummary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shortSummary">ShortSummary to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByShortSummary(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String shortSummary)
        {
            if (shortSummary == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("shortSummary", "Parameter 'shortSummary' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.ShortSummary.Contains(shortSummary));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.ShortSummary.StartsWith(shortSummary));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.ShortSummary.EndsWith(shortSummary));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.ShortSummary.Contains(shortSummary) == false);
                case ContainmentOperator.NotEquals:
                    return shortSummary == null 
                        ? queryable.Where(i => i.ShortSummary != null) 
                        : queryable.Where(i => i.ShortSummary != shortSummary);
                default:
                    return shortSummary == null 
                        ? queryable.Where(i => i.ShortSummary == null) 
                        : queryable.Where(i => i.ShortSummary == shortSummary);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.ShortSummary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="shortSummary">ShortSummary to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByShortSummary(this IQueryable<Malldub.Data.Item> queryable, System.String shortSummary, params System.String[] additionalValues)
        {
            var shortSummaryList = new List<System.String> { shortSummary };

            if (additionalValues != null)
                shortSummaryList.AddRange(additionalValues);
            else
                shortSummaryList.Add(null);

            if (shortSummaryList.Count == 1)
                return queryable.ByShortSummary(shortSummaryList[0]);

            return queryable.ByShortSummary(shortSummaryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.ShortSummary"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByShortSummary(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("ShortSummary", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDescription(this IQueryable<Malldub.Data.Item> queryable, System.String description)
        {
            return queryable.Where(i => i.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDescription(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.Description != description);
                default:
                    return queryable.Where(i => i.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDescription(this IQueryable<Malldub.Data.Item> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDescription(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.Description));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStartDate(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? startDate)
        {
            // support nulls
            return startDate == null 
                ? queryable.Where(i => i.StartDate == null) 
                : queryable.Where(i => i.StartDate == startDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStartDate(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.DateTime? startDate)
        {
            if (startDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("startDate", "Parameter 'startDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.StartDate > startDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.StartDate >= startDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.StartDate < startDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.StartDate <= startDate);
                case ComparisonOperator.NotEquals:
                    return startDate == null 
                        ? queryable.Where(i => i.StartDate != null) 
                        : queryable.Where(i => i.StartDate != startDate);
                default:
                    return startDate == null 
                        ? queryable.Where(i => i.StartDate == null) 
                        : queryable.Where(i => i.StartDate == startDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDate">StartDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStartDate(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? startDate, params System.DateTime?[] additionalValues)
        {
            var startDateList = new List<System.DateTime?> { startDate };

            if (additionalValues != null)
                startDateList.AddRange(additionalValues);
            else
                startDateList.Add(null);

            if (startDateList.Count == 1)
                return queryable.ByStartDate(startDateList[0]);

            return queryable.ByStartDate(startDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StartDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStartDate(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("StartDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.EndDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDate">EndDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByEndDate(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? endDate)
        {
            // support nulls
            return endDate == null 
                ? queryable.Where(i => i.EndDate == null) 
                : queryable.Where(i => i.EndDate == endDate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.EndDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDate">EndDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByEndDate(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.DateTime? endDate)
        {
            if (endDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("endDate", "Parameter 'endDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.EndDate > endDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.EndDate >= endDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.EndDate < endDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.EndDate <= endDate);
                case ComparisonOperator.NotEquals:
                    return endDate == null 
                        ? queryable.Where(i => i.EndDate != null) 
                        : queryable.Where(i => i.EndDate != endDate);
                default:
                    return endDate == null 
                        ? queryable.Where(i => i.EndDate == null) 
                        : queryable.Where(i => i.EndDate == endDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.EndDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDate">EndDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByEndDate(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? endDate, params System.DateTime?[] additionalValues)
        {
            var endDateList = new List<System.DateTime?> { endDate };

            if (additionalValues != null)
                endDateList.AddRange(additionalValues);
            else
                endDateList.Add(null);

            if (endDateList.Count == 1)
                return queryable.ByEndDate(endDateList[0]);

            return queryable.ByEndDate(endDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.EndDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByEndDate(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("EndDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByPermalink(this IQueryable<Malldub.Data.Item> queryable, System.String permalink)
        {
            // support nulls
            return permalink == null 
                ? queryable.Where(i => i.Permalink == null) 
                : queryable.Where(i => i.Permalink == permalink);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByPermalink(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String permalink)
        {
            if (permalink == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("permalink", "Parameter 'permalink' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.Permalink.Contains(permalink));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.Permalink.StartsWith(permalink));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.Permalink.EndsWith(permalink));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.Permalink.Contains(permalink) == false);
                case ContainmentOperator.NotEquals:
                    return permalink == null 
                        ? queryable.Where(i => i.Permalink != null) 
                        : queryable.Where(i => i.Permalink != permalink);
                default:
                    return permalink == null 
                        ? queryable.Where(i => i.Permalink == null) 
                        : queryable.Where(i => i.Permalink == permalink);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="permalink">Permalink to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByPermalink(this IQueryable<Malldub.Data.Item> queryable, System.String permalink, params System.String[] additionalValues)
        {
            var permalinkList = new List<System.String> { permalink };

            if (additionalValues != null)
                permalinkList.AddRange(additionalValues);
            else
                permalinkList.Add(null);

            if (permalinkList.Count == 1)
                return queryable.ByPermalink(permalinkList[0]);

            return queryable.ByPermalink(permalinkList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Permalink"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByPermalink(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("Permalink", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateEntered(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(i => i.DateEntered == null) 
                : queryable.Where(i => i.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateEntered(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered != null) 
                        : queryable.Where(i => i.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered == null) 
                        : queryable.Where(i => i.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateEntered(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateEntered(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateUpdated(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(i => i.DateUpdated == null) 
                : queryable.Where(i => i.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateUpdated(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated != null) 
                        : queryable.Where(i => i.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated == null) 
                        : queryable.Where(i => i.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateUpdated(this IQueryable<Malldub.Data.Item> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByDateUpdated(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Item, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Featured"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="featured">Featured to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByFeatured(this IQueryable<Malldub.Data.Item> queryable, System.Boolean featured)
        {
            return queryable.Where(i => i.Featured == featured);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Featured"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="featured">Featured to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByFeatured(this IQueryable<Malldub.Data.Item> queryable, ComparisonOperator comparisonOperator, System.Boolean featured)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Featured != featured);
                default:
                    return queryable.Where(i => i.Featured == featured);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Featured"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="featured">Featured to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByFeatured(this IQueryable<Malldub.Data.Item> queryable, System.Boolean featured, params System.Boolean[] additionalValues)
        {
            var featuredList = new List<System.Boolean> { featured };

            if (additionalValues != null)
                featuredList.AddRange(additionalValues);

            if (featuredList.Count == 1)
                return queryable.ByFeatured(featuredList[0]);

            return queryable.ByFeatured(featuredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.Featured"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByFeatured(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(i => values.Contains(i.Featured));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStatusId(this IQueryable<Malldub.Data.Item> queryable, System.String statusId)
        {
            return queryable.Where(i => i.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStatusId(this IQueryable<Malldub.Data.Item> queryable, ContainmentOperator containmentOperator, System.String statusId)
        {
            if (statusId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("statusId", "Parameter 'statusId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(i => i.StatusId.Contains(statusId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(i => i.StatusId.StartsWith(statusId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(i => i.StatusId.EndsWith(statusId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(i => i.StatusId.Contains(statusId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(i => i.StatusId != statusId);
                default:
                    return queryable.Where(i => i.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStatusId(this IQueryable<Malldub.Data.Item> queryable, System.String statusId, params System.String[] additionalValues)
        {
            var statusIdList = new List<System.String> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Item.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Item> ByStatusId(this IQueryable<Malldub.Data.Item> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(i => values.Contains(i.StatusId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Item> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Item.FirstOrDefault(i => i.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Item> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Item.FirstOrDefault(i => i.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

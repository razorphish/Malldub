#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for AuctionPaymentItem.
    /// </summary>
    public static partial class AuctionPaymentItemExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.AuctionPaymentItem GetByKey(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Int32 paymentItemId, System.Int32 userId)
        {
            return queryable.FirstOrDefault(a => a.PaymentItemId == paymentItemId 
					&& a.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByPaymentItemId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Int32 paymentItemId)
        {
            return queryable.Where(a => a.PaymentItemId == paymentItemId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByPaymentItemId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, ComparisonOperator comparisonOperator, System.Int32 paymentItemId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.PaymentItemId > paymentItemId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.PaymentItemId >= paymentItemId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.PaymentItemId < paymentItemId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.PaymentItemId <= paymentItemId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.PaymentItemId != paymentItemId);
                default:
                    return queryable.Where(a => a.PaymentItemId == paymentItemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentItemId">PaymentItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByPaymentItemId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Int32 paymentItemId, params System.Int32[] additionalValues)
        {
            var paymentItemIdList = new List<System.Int32> { paymentItemId };

            if (additionalValues != null)
                paymentItemIdList.AddRange(additionalValues);

            if (paymentItemIdList.Count == 1)
                return queryable.ByPaymentItemId(paymentItemIdList[0]);

            return queryable.ByPaymentItemId(paymentItemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.PaymentItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByPaymentItemId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.PaymentItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByUserId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Int32 userId)
        {
            return queryable.Where(a => a.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByUserId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, ComparisonOperator comparisonOperator, System.Int32 userId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.UserId > userId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.UserId >= userId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.UserId < userId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.UserId <= userId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.UserId != userId);
                default:
                    return queryable.Where(a => a.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByUserId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Int32 userId, params System.Int32[] additionalValues)
        {
            var userIdList = new List<System.Int32> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByUserId(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.BasedOnWinningPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="basedOnWinningPrice">BasedOnWinningPrice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByBasedOnWinningPrice(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Boolean basedOnWinningPrice)
        {
            return queryable.Where(a => a.BasedOnWinningPrice == basedOnWinningPrice);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.BasedOnWinningPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="basedOnWinningPrice">BasedOnWinningPrice to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByBasedOnWinningPrice(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, ComparisonOperator comparisonOperator, System.Boolean basedOnWinningPrice)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.BasedOnWinningPrice != basedOnWinningPrice);
                default:
                    return queryable.Where(a => a.BasedOnWinningPrice == basedOnWinningPrice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.BasedOnWinningPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="basedOnWinningPrice">BasedOnWinningPrice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByBasedOnWinningPrice(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.Boolean basedOnWinningPrice, params System.Boolean[] additionalValues)
        {
            var basedOnWinningPriceList = new List<System.Boolean> { basedOnWinningPrice };

            if (additionalValues != null)
                basedOnWinningPriceList.AddRange(additionalValues);

            if (basedOnWinningPriceList.Count == 1)
                return queryable.ByBasedOnWinningPrice(basedOnWinningPriceList[0]);

            return queryable.ByBasedOnWinningPrice(basedOnWinningPriceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.BasedOnWinningPrice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByBasedOnWinningPrice(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(a => values.Contains(a.BasedOnWinningPrice));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateEntered(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(a => a.DateEntered == null) 
                : queryable.Where(a => a.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateEntered(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(a => a.DateEntered != null) 
                        : queryable.Where(a => a.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(a => a.DateEntered == null) 
                        : queryable.Where(a => a.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateEntered(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateEntered(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AuctionPaymentItem, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateUpdated(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(a => a.DateUpdated == null) 
                : queryable.Where(a => a.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateUpdated(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(a => a.DateUpdated != null) 
                        : queryable.Where(a => a.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(a => a.DateUpdated == null) 
                        : queryable.Where(a => a.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateUpdated(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.AuctionPaymentItem.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.AuctionPaymentItem> ByDateUpdated(this IQueryable<Malldub.Data.AuctionPaymentItem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.AuctionPaymentItem, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.Int32, Malldub.Data.AuctionPaymentItem> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 paymentItemId, System.Int32 userId) =>
                        db.AuctionPaymentItem.FirstOrDefault(a => a.PaymentItemId == paymentItemId 
							&& a.UserId == userId));
        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Invoice.
    /// </summary>
    public static partial class InvoiceExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Invoice GetByKey(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(i => i.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Invoice GetByIdentification(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Invoice>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByIdentification(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 identification)
        {
            return queryable.Where(i => i.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByIdentification(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Identification != identification);
                default:
                    return queryable.Where(i => i.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByIdentification(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByIdentification(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Tax"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tax">Tax to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTax(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal tax)
        {
            return queryable.Where(i => i.Tax == tax);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Tax"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tax">Tax to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTax(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Decimal tax)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.Tax > tax);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.Tax >= tax);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.Tax < tax);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.Tax <= tax);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.Tax != tax);
                default:
                    return queryable.Where(i => i.Tax == tax);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Tax"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tax">Tax to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTax(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal tax, params System.Decimal[] additionalValues)
        {
            var taxList = new List<System.Decimal> { tax };

            if (additionalValues != null)
                taxList.AddRange(additionalValues);

            if (taxList.Count == 1)
                return queryable.ByTax(taxList[0]);

            return queryable.ByTax(taxList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.Tax"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTax(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(i => values.Contains(i.Tax));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TaxRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="taxRate">TaxRate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTaxRate(this IQueryable<Malldub.Data.Invoice> queryable, System.Byte? taxRate)
        {
            // support nulls
            return taxRate == null 
                ? queryable.Where(i => i.TaxRate == null) 
                : queryable.Where(i => i.TaxRate == taxRate);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TaxRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="taxRate">TaxRate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTaxRate(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Byte? taxRate)
        {
            if (taxRate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("taxRate", "Parameter 'taxRate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.TaxRate > taxRate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.TaxRate >= taxRate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.TaxRate < taxRate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.TaxRate <= taxRate);
                case ComparisonOperator.NotEquals:
                    return taxRate == null 
                        ? queryable.Where(i => i.TaxRate != null) 
                        : queryable.Where(i => i.TaxRate != taxRate);
                default:
                    return taxRate == null 
                        ? queryable.Where(i => i.TaxRate == null) 
                        : queryable.Where(i => i.TaxRate == taxRate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TaxRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="taxRate">TaxRate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTaxRate(this IQueryable<Malldub.Data.Invoice> queryable, System.Byte? taxRate, params System.Byte?[] additionalValues)
        {
            var taxRateList = new List<System.Byte?> { taxRate };

            if (additionalValues != null)
                taxRateList.AddRange(additionalValues);
            else
                taxRateList.Add(null);

            if (taxRateList.Count == 1)
                return queryable.ByTaxRate(taxRateList[0]);

            return queryable.ByTaxRate(taxRateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TaxRate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTaxRate(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Byte?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Invoice, bool>("TaxRate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.SubTotal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subTotal">SubTotal to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> BySubTotal(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal subTotal)
        {
            return queryable.Where(i => i.SubTotal == subTotal);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.SubTotal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subTotal">SubTotal to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> BySubTotal(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Decimal subTotal)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.SubTotal > subTotal);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.SubTotal >= subTotal);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.SubTotal < subTotal);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.SubTotal <= subTotal);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.SubTotal != subTotal);
                default:
                    return queryable.Where(i => i.SubTotal == subTotal);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.SubTotal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subTotal">SubTotal to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> BySubTotal(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal subTotal, params System.Decimal[] additionalValues)
        {
            var subTotalList = new List<System.Decimal> { subTotal };

            if (additionalValues != null)
                subTotalList.AddRange(additionalValues);

            if (subTotalList.Count == 1)
                return queryable.BySubTotal(subTotalList[0]);

            return queryable.BySubTotal(subTotalList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.SubTotal"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> BySubTotal(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(i => values.Contains(i.SubTotal));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TotalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalAmount">TotalAmount to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTotalAmount(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal totalAmount)
        {
            return queryable.Where(i => i.TotalAmount == totalAmount);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TotalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalAmount">TotalAmount to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTotalAmount(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Decimal totalAmount)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.TotalAmount > totalAmount);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.TotalAmount >= totalAmount);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.TotalAmount < totalAmount);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.TotalAmount <= totalAmount);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.TotalAmount != totalAmount);
                default:
                    return queryable.Where(i => i.TotalAmount == totalAmount);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TotalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="totalAmount">TotalAmount to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTotalAmount(this IQueryable<Malldub.Data.Invoice> queryable, System.Decimal totalAmount, params System.Decimal[] additionalValues)
        {
            var totalAmountList = new List<System.Decimal> { totalAmount };

            if (additionalValues != null)
                totalAmountList.AddRange(additionalValues);

            if (totalAmountList.Count == 1)
                return queryable.ByTotalAmount(totalAmountList[0]);

            return queryable.ByTotalAmount(totalAmountList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.TotalAmount"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByTotalAmount(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Decimal> values)
        {
            return queryable.Where(i => values.Contains(i.TotalAmount));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByStatusId(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 statusId)
        {
            return queryable.Where(i => i.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByStatusId(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.Int32 statusId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.StatusId > statusId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.StatusId >= statusId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.StatusId < statusId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.StatusId <= statusId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(i => i.StatusId != statusId);
                default:
                    return queryable.Where(i => i.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByStatusId(this IQueryable<Malldub.Data.Invoice> queryable, System.Int32 statusId, params System.Int32[] additionalValues)
        {
            var statusIdList = new List<System.Int32> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByStatusId(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(i => values.Contains(i.StatusId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateEntered(this IQueryable<Malldub.Data.Invoice> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(i => i.DateEntered == null) 
                : queryable.Where(i => i.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateEntered(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered != null) 
                        : queryable.Where(i => i.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(i => i.DateEntered == null) 
                        : queryable.Where(i => i.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateEntered(this IQueryable<Malldub.Data.Invoice> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateEntered(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Invoice, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateUpdated(this IQueryable<Malldub.Data.Invoice> queryable, System.DateTime? dateUpdated)
        {
            // support nulls
            return dateUpdated == null 
                ? queryable.Where(i => i.DateUpdated == null) 
                : queryable.Where(i => i.DateUpdated == dateUpdated);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateUpdated(this IQueryable<Malldub.Data.Invoice> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateUpdated)
        {
            if (dateUpdated == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateUpdated", "Parameter 'dateUpdated' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(i => i.DateUpdated > dateUpdated);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(i => i.DateUpdated >= dateUpdated);
                case ComparisonOperator.LessThan:
                    return queryable.Where(i => i.DateUpdated < dateUpdated);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(i => i.DateUpdated <= dateUpdated);
                case ComparisonOperator.NotEquals:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated != null) 
                        : queryable.Where(i => i.DateUpdated != dateUpdated);
                default:
                    return dateUpdated == null 
                        ? queryable.Where(i => i.DateUpdated == null) 
                        : queryable.Where(i => i.DateUpdated == dateUpdated);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateUpdated">DateUpdated to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateUpdated(this IQueryable<Malldub.Data.Invoice> queryable, System.DateTime? dateUpdated, params System.DateTime?[] additionalValues)
        {
            var dateUpdatedList = new List<System.DateTime?> { dateUpdated };

            if (additionalValues != null)
                dateUpdatedList.AddRange(additionalValues);
            else
                dateUpdatedList.Add(null);

            if (dateUpdatedList.Count == 1)
                return queryable.ByDateUpdated(dateUpdatedList[0]);

            return queryable.ByDateUpdated(dateUpdatedList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Invoice.DateUpdated"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Invoice> ByDateUpdated(this IQueryable<Malldub.Data.Invoice> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Invoice, bool>("DateUpdated", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Invoice> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Invoice.FirstOrDefault(i => i.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Invoice> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Invoice.FirstOrDefault(i => i.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

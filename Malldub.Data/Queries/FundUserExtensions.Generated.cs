#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundUser.
    /// </summary>
    public static partial class FundUserExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundUser GetByKey(this IQueryable<Malldub.Data.FundUser> queryable, System.Int32 fundId, System.String userId, System.String userTypeId)
        {
            return queryable.FirstOrDefault(f => f.FundId == fundId 
					&& f.UserId == userId 
					&& f.UserTypeId == userTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByFundId(this IQueryable<Malldub.Data.FundUser> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByFundId(this IQueryable<Malldub.Data.FundUser> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByFundId(this IQueryable<Malldub.Data.FundUser> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByFundId(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserId(this IQueryable<Malldub.Data.FundUser> queryable, System.String userId)
        {
            return queryable.Where(f => f.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserId(this IQueryable<Malldub.Data.FundUser> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.UserId != userId);
                default:
                    return queryable.Where(f => f.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserId(this IQueryable<Malldub.Data.FundUser> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserId(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userTypeId">UserTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserTypeId(this IQueryable<Malldub.Data.FundUser> queryable, System.String userTypeId)
        {
            return queryable.Where(f => f.UserTypeId == userTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userTypeId">UserTypeId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserTypeId(this IQueryable<Malldub.Data.FundUser> queryable, ContainmentOperator containmentOperator, System.String userTypeId)
        {
            if (userTypeId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userTypeId", "Parameter 'userTypeId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.UserTypeId.Contains(userTypeId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.UserTypeId.StartsWith(userTypeId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.UserTypeId.EndsWith(userTypeId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.UserTypeId.Contains(userTypeId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.UserTypeId != userTypeId);
                default:
                    return queryable.Where(f => f.UserTypeId == userTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userTypeId">UserTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserTypeId(this IQueryable<Malldub.Data.FundUser> queryable, System.String userTypeId, params System.String[] additionalValues)
        {
            var userTypeIdList = new List<System.String> { userTypeId };

            if (additionalValues != null)
                userTypeIdList.AddRange(additionalValues);

            if (userTypeIdList.Count == 1)
                return queryable.ByUserTypeId(userTypeIdList[0]);

            return queryable.ByUserTypeId(userTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserTypeId(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.UserTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.AllowEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowEmail">AllowEmail to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByAllowEmail(this IQueryable<Malldub.Data.FundUser> queryable, System.Boolean allowEmail)
        {
            return queryable.Where(f => f.AllowEmail == allowEmail);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.AllowEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowEmail">AllowEmail to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByAllowEmail(this IQueryable<Malldub.Data.FundUser> queryable, ComparisonOperator comparisonOperator, System.Boolean allowEmail)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.AllowEmail != allowEmail);
                default:
                    return queryable.Where(f => f.AllowEmail == allowEmail);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.AllowEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="allowEmail">AllowEmail to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByAllowEmail(this IQueryable<Malldub.Data.FundUser> queryable, System.Boolean allowEmail, params System.Boolean[] additionalValues)
        {
            var allowEmailList = new List<System.Boolean> { allowEmail };

            if (additionalValues != null)
                allowEmailList.AddRange(additionalValues);

            if (allowEmailList.Count == 1)
                return queryable.ByAllowEmail(allowEmailList[0]);

            return queryable.ByAllowEmail(allowEmailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.AllowEmail"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByAllowEmail(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.AllowEmail));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByPostToFacebook(this IQueryable<Malldub.Data.FundUser> queryable, System.Boolean postToFacebook)
        {
            return queryable.Where(f => f.PostToFacebook == postToFacebook);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByPostToFacebook(this IQueryable<Malldub.Data.FundUser> queryable, ComparisonOperator comparisonOperator, System.Boolean postToFacebook)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.PostToFacebook != postToFacebook);
                default:
                    return queryable.Where(f => f.PostToFacebook == postToFacebook);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postToFacebook">PostToFacebook to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByPostToFacebook(this IQueryable<Malldub.Data.FundUser> queryable, System.Boolean postToFacebook, params System.Boolean[] additionalValues)
        {
            var postToFacebookList = new List<System.Boolean> { postToFacebook };

            if (additionalValues != null)
                postToFacebookList.AddRange(additionalValues);

            if (postToFacebookList.Count == 1)
                return queryable.ByPostToFacebook(postToFacebookList[0]);

            return queryable.ByPostToFacebook(postToFacebookList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.PostToFacebook"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByPostToFacebook(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(f => values.Contains(f.PostToFacebook));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByDateEntered(this IQueryable<Malldub.Data.FundUser> queryable, System.DateTime dateEntered)
        {
            return queryable.Where(f => f.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByDateEntered(this IQueryable<Malldub.Data.FundUser> queryable, ComparisonOperator comparisonOperator, System.DateTime dateEntered)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.DateEntered != dateEntered);
                default:
                    return queryable.Where(f => f.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByDateEntered(this IQueryable<Malldub.Data.FundUser> queryable, System.DateTime dateEntered, params System.DateTime[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByDateEntered(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(f => values.Contains(f.DateEntered));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userFundId">UserFundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserFundId(this IQueryable<Malldub.Data.FundUser> queryable, System.Int32? userFundId)
        {
            // support nulls
            return userFundId == null 
                ? queryable.Where(f => f.UserFundId == null) 
                : queryable.Where(f => f.UserFundId == userFundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userFundId">UserFundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserFundId(this IQueryable<Malldub.Data.FundUser> queryable, ComparisonOperator comparisonOperator, System.Int32? userFundId)
        {
            if (userFundId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("userFundId", "Parameter 'userFundId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.UserFundId > userFundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.UserFundId >= userFundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.UserFundId < userFundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.UserFundId <= userFundId);
                case ComparisonOperator.NotEquals:
                    return userFundId == null 
                        ? queryable.Where(f => f.UserFundId != null) 
                        : queryable.Where(f => f.UserFundId != userFundId);
                default:
                    return userFundId == null 
                        ? queryable.Where(f => f.UserFundId == null) 
                        : queryable.Where(f => f.UserFundId == userFundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userFundId">UserFundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserFundId(this IQueryable<Malldub.Data.FundUser> queryable, System.Int32? userFundId, params System.Int32?[] additionalValues)
        {
            var userFundIdList = new List<System.Int32?> { userFundId };

            if (additionalValues != null)
                userFundIdList.AddRange(additionalValues);
            else
                userFundIdList.Add(null);

            if (userFundIdList.Count == 1)
                return queryable.ByUserFundId(userFundIdList[0]);

            return queryable.ByUserFundId(userFundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundUser.UserFundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundUser> ByUserFundId(this IQueryable<Malldub.Data.FundUser> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundUser, bool>("UserFundId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, System.String, System.String, Malldub.Data.FundUser> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 fundId, System.String userId, System.String userTypeId) =>
                        db.FundUser.FirstOrDefault(f => f.FundId == fundId 
							&& f.UserId == userId 
							&& f.UserTypeId == userTypeId));
        }
        #endregion
    }
}
#pragma warning restore 1591

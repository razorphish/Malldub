#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Geo.
    /// </summary>
    public static partial class GeoExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Geo GetByKey(this IQueryable<Malldub.Data.Geo> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(g => g.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Geo GetByIdentification(this IQueryable<Malldub.Data.Geo> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Geo>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(g => g.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIdentification(this IQueryable<Malldub.Data.Geo> queryable, System.Int32 identification)
        {
            return queryable.Where(g => g.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIdentification(this IQueryable<Malldub.Data.Geo> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(g => g.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(g => g.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(g => g.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(g => g.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(g => g.Identification != identification);
                default:
                    return queryable.Where(g => g.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIdentification(this IQueryable<Malldub.Data.Geo> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIdentification(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(g => values.Contains(g.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Alias"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alias">Alias to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByAlias(this IQueryable<Malldub.Data.Geo> queryable, System.String alias)
        {
            // support nulls
            return alias == null 
                ? queryable.Where(g => g.Alias == null) 
                : queryable.Where(g => g.Alias == alias);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Alias"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alias">Alias to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByAlias(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String alias)
        {
            if (alias == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("alias", "Parameter 'alias' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Alias.Contains(alias));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Alias.StartsWith(alias));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Alias.EndsWith(alias));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Alias.Contains(alias) == false);
                case ContainmentOperator.NotEquals:
                    return alias == null 
                        ? queryable.Where(g => g.Alias != null) 
                        : queryable.Where(g => g.Alias != alias);
                default:
                    return alias == null 
                        ? queryable.Where(g => g.Alias == null) 
                        : queryable.Where(g => g.Alias == alias);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Alias"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alias">Alias to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByAlias(this IQueryable<Malldub.Data.Geo> queryable, System.String alias, params System.String[] additionalValues)
        {
            var aliasList = new List<System.String> { alias };

            if (additionalValues != null)
                aliasList.AddRange(additionalValues);
            else
                aliasList.Add(null);

            if (aliasList.Count == 1)
                return queryable.ByAlias(aliasList[0]);

            return queryable.ByAlias(aliasList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Alias"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByAlias(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Alias", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCity(this IQueryable<Malldub.Data.Geo> queryable, System.String city)
        {
            // support nulls
            return city == null 
                ? queryable.Where(g => g.City == null) 
                : queryable.Where(g => g.City == city);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCity(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String city)
        {
            if (city == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.City.Contains(city));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.City.StartsWith(city));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.City.EndsWith(city));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.City.Contains(city) == false);
                case ContainmentOperator.NotEquals:
                    return city == null 
                        ? queryable.Where(g => g.City != null) 
                        : queryable.Where(g => g.City != city);
                default:
                    return city == null 
                        ? queryable.Where(g => g.City == null) 
                        : queryable.Where(g => g.City == city);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCity(this IQueryable<Malldub.Data.Geo> queryable, System.String city, params System.String[] additionalValues)
        {
            var cityList = new List<System.String> { city };

            if (additionalValues != null)
                cityList.AddRange(additionalValues);
            else
                cityList.Add(null);

            if (cityList.Count == 1)
                return queryable.ByCity(cityList[0]);

            return queryable.ByCity(cityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCity(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("City", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.CountryCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryCode">CountryCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCountryCode(this IQueryable<Malldub.Data.Geo> queryable, System.String countryCode)
        {
            // support nulls
            return countryCode == null 
                ? queryable.Where(g => g.CountryCode == null) 
                : queryable.Where(g => g.CountryCode == countryCode);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.CountryCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryCode">CountryCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCountryCode(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String countryCode)
        {
            if (countryCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("countryCode", "Parameter 'countryCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.CountryCode.Contains(countryCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.CountryCode.StartsWith(countryCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.CountryCode.EndsWith(countryCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.CountryCode.Contains(countryCode) == false);
                case ContainmentOperator.NotEquals:
                    return countryCode == null 
                        ? queryable.Where(g => g.CountryCode != null) 
                        : queryable.Where(g => g.CountryCode != countryCode);
                default:
                    return countryCode == null 
                        ? queryable.Where(g => g.CountryCode == null) 
                        : queryable.Where(g => g.CountryCode == countryCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.CountryCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="countryCode">CountryCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCountryCode(this IQueryable<Malldub.Data.Geo> queryable, System.String countryCode, params System.String[] additionalValues)
        {
            var countryCodeList = new List<System.String> { countryCode };

            if (additionalValues != null)
                countryCodeList.AddRange(additionalValues);
            else
                countryCodeList.Add(null);

            if (countryCodeList.Count == 1)
                return queryable.ByCountryCode(countryCodeList[0]);

            return queryable.ByCountryCode(countryCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.CountryCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByCountryCode(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("CountryCode", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Isp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isp">Isp to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIsp(this IQueryable<Malldub.Data.Geo> queryable, System.String isp)
        {
            // support nulls
            return isp == null 
                ? queryable.Where(g => g.Isp == null) 
                : queryable.Where(g => g.Isp == isp);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Isp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isp">Isp to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIsp(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String isp)
        {
            if (isp == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("isp", "Parameter 'isp' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Isp.Contains(isp));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Isp.StartsWith(isp));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Isp.EndsWith(isp));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Isp.Contains(isp) == false);
                case ContainmentOperator.NotEquals:
                    return isp == null 
                        ? queryable.Where(g => g.Isp != null) 
                        : queryable.Where(g => g.Isp != isp);
                default:
                    return isp == null 
                        ? queryable.Where(g => g.Isp == null) 
                        : queryable.Where(g => g.Isp == isp);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Isp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isp">Isp to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIsp(this IQueryable<Malldub.Data.Geo> queryable, System.String isp, params System.String[] additionalValues)
        {
            var ispList = new List<System.String> { isp };

            if (additionalValues != null)
                ispList.AddRange(additionalValues);
            else
                ispList.Add(null);

            if (ispList.Count == 1)
                return queryable.ByIsp(ispList[0]);

            return queryable.ByIsp(ispList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Isp"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIsp(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Isp", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLatitude(this IQueryable<Malldub.Data.Geo> queryable, System.Decimal? latitude)
        {
            // support nulls
            return latitude == null 
                ? queryable.Where(g => g.Latitude == null) 
                : queryable.Where(g => g.Latitude == latitude);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLatitude(this IQueryable<Malldub.Data.Geo> queryable, ComparisonOperator comparisonOperator, System.Decimal? latitude)
        {
            if (latitude == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("latitude", "Parameter 'latitude' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(g => g.Latitude > latitude);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(g => g.Latitude >= latitude);
                case ComparisonOperator.LessThan:
                    return queryable.Where(g => g.Latitude < latitude);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(g => g.Latitude <= latitude);
                case ComparisonOperator.NotEquals:
                    return latitude == null 
                        ? queryable.Where(g => g.Latitude != null) 
                        : queryable.Where(g => g.Latitude != latitude);
                default:
                    return latitude == null 
                        ? queryable.Where(g => g.Latitude == null) 
                        : queryable.Where(g => g.Latitude == latitude);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLatitude(this IQueryable<Malldub.Data.Geo> queryable, System.Decimal? latitude, params System.Decimal?[] additionalValues)
        {
            var latitudeList = new List<System.Decimal?> { latitude };

            if (additionalValues != null)
                latitudeList.AddRange(additionalValues);
            else
                latitudeList.Add(null);

            if (latitudeList.Count == 1)
                return queryable.ByLatitude(latitudeList[0]);

            return queryable.ByLatitude(latitudeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLatitude(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Latitude", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLongitude(this IQueryable<Malldub.Data.Geo> queryable, System.Decimal? longitude)
        {
            // support nulls
            return longitude == null 
                ? queryable.Where(g => g.Longitude == null) 
                : queryable.Where(g => g.Longitude == longitude);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLongitude(this IQueryable<Malldub.Data.Geo> queryable, ComparisonOperator comparisonOperator, System.Decimal? longitude)
        {
            if (longitude == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("longitude", "Parameter 'longitude' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(g => g.Longitude > longitude);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(g => g.Longitude >= longitude);
                case ComparisonOperator.LessThan:
                    return queryable.Where(g => g.Longitude < longitude);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(g => g.Longitude <= longitude);
                case ComparisonOperator.NotEquals:
                    return longitude == null 
                        ? queryable.Where(g => g.Longitude != null) 
                        : queryable.Where(g => g.Longitude != longitude);
                default:
                    return longitude == null 
                        ? queryable.Where(g => g.Longitude == null) 
                        : queryable.Where(g => g.Longitude == longitude);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLongitude(this IQueryable<Malldub.Data.Geo> queryable, System.Decimal? longitude, params System.Decimal?[] additionalValues)
        {
            var longitudeList = new List<System.Decimal?> { longitude };

            if (additionalValues != null)
                longitudeList.AddRange(additionalValues);
            else
                longitudeList.Add(null);

            if (longitudeList.Count == 1)
                return queryable.ByLongitude(longitudeList[0]);

            return queryable.ByLongitude(longitudeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByLongitude(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Longitude", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.IpAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ipAddress">IpAddress to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIpAddress(this IQueryable<Malldub.Data.Geo> queryable, System.String ipAddress)
        {
            // support nulls
            return ipAddress == null 
                ? queryable.Where(g => g.IpAddress == null) 
                : queryable.Where(g => g.IpAddress == ipAddress);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.IpAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ipAddress">IpAddress to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIpAddress(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String ipAddress)
        {
            if (ipAddress == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("ipAddress", "Parameter 'ipAddress' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.IpAddress.Contains(ipAddress));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.IpAddress.StartsWith(ipAddress));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.IpAddress.EndsWith(ipAddress));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.IpAddress.Contains(ipAddress) == false);
                case ContainmentOperator.NotEquals:
                    return ipAddress == null 
                        ? queryable.Where(g => g.IpAddress != null) 
                        : queryable.Where(g => g.IpAddress != ipAddress);
                default:
                    return ipAddress == null 
                        ? queryable.Where(g => g.IpAddress == null) 
                        : queryable.Where(g => g.IpAddress == ipAddress);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.IpAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ipAddress">IpAddress to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIpAddress(this IQueryable<Malldub.Data.Geo> queryable, System.String ipAddress, params System.String[] additionalValues)
        {
            var ipAddressList = new List<System.String> { ipAddress };

            if (additionalValues != null)
                ipAddressList.AddRange(additionalValues);
            else
                ipAddressList.Add(null);

            if (ipAddressList.Count == 1)
                return queryable.ByIpAddress(ipAddressList[0]);

            return queryable.ByIpAddress(ipAddressList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.IpAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByIpAddress(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("IpAddress", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Region"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="region">Region to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegion(this IQueryable<Malldub.Data.Geo> queryable, System.String region)
        {
            // support nulls
            return region == null 
                ? queryable.Where(g => g.Region == null) 
                : queryable.Where(g => g.Region == region);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Region"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="region">Region to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegion(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String region)
        {
            if (region == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("region", "Parameter 'region' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Region.Contains(region));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Region.StartsWith(region));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Region.EndsWith(region));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Region.Contains(region) == false);
                case ContainmentOperator.NotEquals:
                    return region == null 
                        ? queryable.Where(g => g.Region != null) 
                        : queryable.Where(g => g.Region != region);
                default:
                    return region == null 
                        ? queryable.Where(g => g.Region == null) 
                        : queryable.Where(g => g.Region == region);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Region"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="region">Region to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegion(this IQueryable<Malldub.Data.Geo> queryable, System.String region, params System.String[] additionalValues)
        {
            var regionList = new List<System.String> { region };

            if (additionalValues != null)
                regionList.AddRange(additionalValues);
            else
                regionList.Add(null);

            if (regionList.Count == 1)
                return queryable.ByRegion(regionList[0]);

            return queryable.ByRegion(regionList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Region"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegion(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Region", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.RegionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="regionName">RegionName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegionName(this IQueryable<Malldub.Data.Geo> queryable, System.String regionName)
        {
            // support nulls
            return regionName == null 
                ? queryable.Where(g => g.RegionName == null) 
                : queryable.Where(g => g.RegionName == regionName);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.RegionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="regionName">RegionName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegionName(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String regionName)
        {
            if (regionName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("regionName", "Parameter 'regionName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.RegionName.Contains(regionName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.RegionName.StartsWith(regionName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.RegionName.EndsWith(regionName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.RegionName.Contains(regionName) == false);
                case ContainmentOperator.NotEquals:
                    return regionName == null 
                        ? queryable.Where(g => g.RegionName != null) 
                        : queryable.Where(g => g.RegionName != regionName);
                default:
                    return regionName == null 
                        ? queryable.Where(g => g.RegionName == null) 
                        : queryable.Where(g => g.RegionName == regionName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.RegionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="regionName">RegionName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegionName(this IQueryable<Malldub.Data.Geo> queryable, System.String regionName, params System.String[] additionalValues)
        {
            var regionNameList = new List<System.String> { regionName };

            if (additionalValues != null)
                regionNameList.AddRange(additionalValues);
            else
                regionNameList.Add(null);

            if (regionNameList.Count == 1)
                return queryable.ByRegionName(regionNameList[0]);

            return queryable.ByRegionName(regionNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.RegionName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByRegionName(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("RegionName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByStatus(this IQueryable<Malldub.Data.Geo> queryable, System.String status)
        {
            // support nulls
            return status == null 
                ? queryable.Where(g => g.Status == null) 
                : queryable.Where(g => g.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByStatus(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String status)
        {
            if (status == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("status", "Parameter 'status' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Status.Contains(status));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Status.StartsWith(status));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Status.EndsWith(status));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Status.Contains(status) == false);
                case ContainmentOperator.NotEquals:
                    return status == null 
                        ? queryable.Where(g => g.Status != null) 
                        : queryable.Where(g => g.Status != status);
                default:
                    return status == null 
                        ? queryable.Where(g => g.Status == null) 
                        : queryable.Where(g => g.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByStatus(this IQueryable<Malldub.Data.Geo> queryable, System.String status, params System.String[] additionalValues)
        {
            var statusList = new List<System.String> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);
            else
                statusList.Add(null);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByStatus(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Status", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.TimeZone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeZone">TimeZone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByTimeZone(this IQueryable<Malldub.Data.Geo> queryable, System.String timeZone)
        {
            // support nulls
            return timeZone == null 
                ? queryable.Where(g => g.TimeZone == null) 
                : queryable.Where(g => g.TimeZone == timeZone);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.TimeZone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeZone">TimeZone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByTimeZone(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String timeZone)
        {
            if (timeZone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("timeZone", "Parameter 'timeZone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.TimeZone.Contains(timeZone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.TimeZone.StartsWith(timeZone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.TimeZone.EndsWith(timeZone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.TimeZone.Contains(timeZone) == false);
                case ContainmentOperator.NotEquals:
                    return timeZone == null 
                        ? queryable.Where(g => g.TimeZone != null) 
                        : queryable.Where(g => g.TimeZone != timeZone);
                default:
                    return timeZone == null 
                        ? queryable.Where(g => g.TimeZone == null) 
                        : queryable.Where(g => g.TimeZone == timeZone);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.TimeZone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="timeZone">TimeZone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByTimeZone(this IQueryable<Malldub.Data.Geo> queryable, System.String timeZone, params System.String[] additionalValues)
        {
            var timeZoneList = new List<System.String> { timeZone };

            if (additionalValues != null)
                timeZoneList.AddRange(additionalValues);
            else
                timeZoneList.Add(null);

            if (timeZoneList.Count == 1)
                return queryable.ByTimeZone(timeZoneList[0]);

            return queryable.ByTimeZone(timeZoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.TimeZone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByTimeZone(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("TimeZone", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByZip(this IQueryable<Malldub.Data.Geo> queryable, System.String zip)
        {
            // support nulls
            return zip == null 
                ? queryable.Where(g => g.Zip == null) 
                : queryable.Where(g => g.Zip == zip);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByZip(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String zip)
        {
            if (zip == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("zip", "Parameter 'zip' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Zip.Contains(zip));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Zip.StartsWith(zip));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Zip.EndsWith(zip));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Zip.Contains(zip) == false);
                case ContainmentOperator.NotEquals:
                    return zip == null 
                        ? queryable.Where(g => g.Zip != null) 
                        : queryable.Where(g => g.Zip != zip);
                default:
                    return zip == null 
                        ? queryable.Where(g => g.Zip == null) 
                        : queryable.Where(g => g.Zip == zip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByZip(this IQueryable<Malldub.Data.Geo> queryable, System.String zip, params System.String[] additionalValues)
        {
            var zipList = new List<System.String> { zip };

            if (additionalValues != null)
                zipList.AddRange(additionalValues);
            else
                zipList.Add(null);

            if (zipList.Count == 1)
                return queryable.ByZip(zipList[0]);

            return queryable.ByZip(zipList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByZip(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Zip", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Organization"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="organization">Organization to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOrganization(this IQueryable<Malldub.Data.Geo> queryable, System.String organization)
        {
            // support nulls
            return organization == null 
                ? queryable.Where(g => g.Organization == null) 
                : queryable.Where(g => g.Organization == organization);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Organization"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="organization">Organization to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOrganization(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String organization)
        {
            if (organization == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("organization", "Parameter 'organization' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.Organization.Contains(organization));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.Organization.StartsWith(organization));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.Organization.EndsWith(organization));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.Organization.Contains(organization) == false);
                case ContainmentOperator.NotEquals:
                    return organization == null 
                        ? queryable.Where(g => g.Organization != null) 
                        : queryable.Where(g => g.Organization != organization);
                default:
                    return organization == null 
                        ? queryable.Where(g => g.Organization == null) 
                        : queryable.Where(g => g.Organization == organization);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Organization"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="organization">Organization to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOrganization(this IQueryable<Malldub.Data.Geo> queryable, System.String organization, params System.String[] additionalValues)
        {
            var organizationList = new List<System.String> { organization };

            if (additionalValues != null)
                organizationList.AddRange(additionalValues);
            else
                organizationList.Add(null);

            if (organizationList.Count == 1)
                return queryable.ByOrganization(organizationList[0]);

            return queryable.ByOrganization(organizationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.Organization"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOrganization(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("Organization", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByDateEntered(this IQueryable<Malldub.Data.Geo> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(g => g.DateEntered == null) 
                : queryable.Where(g => g.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByDateEntered(this IQueryable<Malldub.Data.Geo> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(g => g.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(g => g.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(g => g.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(g => g.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(g => g.DateEntered != null) 
                        : queryable.Where(g => g.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(g => g.DateEntered == null) 
                        : queryable.Where(g => g.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByDateEntered(this IQueryable<Malldub.Data.Geo> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByDateEntered(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.OriginalDevice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalDevice">OriginalDevice to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOriginalDevice(this IQueryable<Malldub.Data.Geo> queryable, System.String originalDevice)
        {
            // support nulls
            return originalDevice == null 
                ? queryable.Where(g => g.OriginalDevice == null) 
                : queryable.Where(g => g.OriginalDevice == originalDevice);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.OriginalDevice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalDevice">OriginalDevice to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOriginalDevice(this IQueryable<Malldub.Data.Geo> queryable, ContainmentOperator containmentOperator, System.String originalDevice)
        {
            if (originalDevice == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("originalDevice", "Parameter 'originalDevice' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(g => g.OriginalDevice.Contains(originalDevice));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(g => g.OriginalDevice.StartsWith(originalDevice));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(g => g.OriginalDevice.EndsWith(originalDevice));
                case ContainmentOperator.NotContains:
                    return queryable.Where(g => g.OriginalDevice.Contains(originalDevice) == false);
                case ContainmentOperator.NotEquals:
                    return originalDevice == null 
                        ? queryable.Where(g => g.OriginalDevice != null) 
                        : queryable.Where(g => g.OriginalDevice != originalDevice);
                default:
                    return originalDevice == null 
                        ? queryable.Where(g => g.OriginalDevice == null) 
                        : queryable.Where(g => g.OriginalDevice == originalDevice);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.OriginalDevice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originalDevice">OriginalDevice to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOriginalDevice(this IQueryable<Malldub.Data.Geo> queryable, System.String originalDevice, params System.String[] additionalValues)
        {
            var originalDeviceList = new List<System.String> { originalDevice };

            if (additionalValues != null)
                originalDeviceList.AddRange(additionalValues);
            else
                originalDeviceList.Add(null);

            if (originalDeviceList.Count == 1)
                return queryable.ByOriginalDevice(originalDeviceList[0]);

            return queryable.ByOriginalDevice(originalDeviceList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Geo.OriginalDevice"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Geo> ByOriginalDevice(this IQueryable<Malldub.Data.Geo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Geo, bool>("OriginalDevice", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Geo> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Geo.FirstOrDefault(g => g.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Geo> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Geo.FirstOrDefault(g => g.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

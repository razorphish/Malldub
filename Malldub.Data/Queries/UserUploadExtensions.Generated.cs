#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for UserUpload.
    /// </summary>
    public static partial class UserUploadExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.UserUpload GetByKey(this IQueryable<Malldub.Data.UserUpload> queryable, System.String userId, System.Int32 uploadId)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.UserUpload>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByKey.Invoke((Malldub.Data.MalldubDataContext)entity.Context, userId, uploadId);

            return queryable.FirstOrDefault(u => u.UserId == userId 
					&& u.UploadId == uploadId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUserId(this IQueryable<Malldub.Data.UserUpload> queryable, System.String userId)
        {
            return queryable.Where(u => u.UserId == userId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUserId(this IQueryable<Malldub.Data.UserUpload> queryable, ContainmentOperator containmentOperator, System.String userId)
        {
            if (userId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userId", "Parameter 'userId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.UserId.Contains(userId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.UserId.StartsWith(userId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.UserId.EndsWith(userId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.UserId.Contains(userId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.UserId != userId);
                default:
                    return queryable.Where(u => u.UserId == userId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userId">UserId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUserId(this IQueryable<Malldub.Data.UserUpload> queryable, System.String userId, params System.String[] additionalValues)
        {
            var userIdList = new List<System.String> { userId };

            if (additionalValues != null)
                userIdList.AddRange(additionalValues);

            if (userIdList.Count == 1)
                return queryable.ByUserId(userIdList[0]);

            return queryable.ByUserId(userIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UserId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUserId(this IQueryable<Malldub.Data.UserUpload> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.UserId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadId">UploadId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUploadId(this IQueryable<Malldub.Data.UserUpload> queryable, System.Int32 uploadId)
        {
            return queryable.Where(u => u.UploadId == uploadId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadId">UploadId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUploadId(this IQueryable<Malldub.Data.UserUpload> queryable, ComparisonOperator comparisonOperator, System.Int32 uploadId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.UploadId > uploadId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.UploadId >= uploadId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.UploadId < uploadId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.UploadId <= uploadId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.UploadId != uploadId);
                default:
                    return queryable.Where(u => u.UploadId == uploadId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="uploadId">UploadId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUploadId(this IQueryable<Malldub.Data.UserUpload> queryable, System.Int32 uploadId, params System.Int32[] additionalValues)
        {
            var uploadIdList = new List<System.Int32> { uploadId };

            if (additionalValues != null)
                uploadIdList.AddRange(additionalValues);

            if (uploadIdList.Count == 1)
                return queryable.ByUploadId(uploadIdList[0]);

            return queryable.ByUploadId(uploadIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.UploadId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByUploadId(this IQueryable<Malldub.Data.UserUpload> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(u => values.Contains(u.UploadId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByIsDefault(this IQueryable<Malldub.Data.UserUpload> queryable, System.Boolean? isDefault)
        {
            // support nulls
            return isDefault == null 
                ? queryable.Where(u => u.IsDefault == null) 
                : queryable.Where(u => u.IsDefault == isDefault);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByIsDefault(this IQueryable<Malldub.Data.UserUpload> queryable, ComparisonOperator comparisonOperator, System.Boolean? isDefault)
        {
            if (isDefault == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isDefault", "Parameter 'isDefault' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return isDefault == null 
                        ? queryable.Where(u => u.IsDefault != null) 
                        : queryable.Where(u => u.IsDefault != isDefault);
                default:
                    return isDefault == null 
                        ? queryable.Where(u => u.IsDefault == null) 
                        : queryable.Where(u => u.IsDefault == isDefault);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isDefault">IsDefault to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByIsDefault(this IQueryable<Malldub.Data.UserUpload> queryable, System.Boolean? isDefault, params System.Boolean?[] additionalValues)
        {
            var isDefaultList = new List<System.Boolean?> { isDefault };

            if (additionalValues != null)
                isDefaultList.AddRange(additionalValues);
            else
                isDefaultList.Add(null);

            if (isDefaultList.Count == 1)
                return queryable.ByIsDefault(isDefaultList[0]);

            return queryable.ByIsDefault(isDefaultList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.UserUpload.IsDefault"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.UserUpload> ByIsDefault(this IQueryable<Malldub.Data.UserUpload> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.UserUpload, bool>("IsDefault", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.String, System.Int32, Malldub.Data.UserUpload> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.String userId, System.Int32 uploadId) =>
                        db.UserUpload.FirstOrDefault(u => u.UserId == userId 
							&& u.UploadId == uploadId));
        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for PostField.
    /// </summary>
    public static partial class PostFieldExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.PostField GetByKey(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(p => p.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.PostField GetByIdentification(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.PostField>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(p => p.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIdentification(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 identification)
        {
            return queryable.Where(p => p.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIdentification(this IQueryable<Malldub.Data.PostField> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.Identification != identification);
                default:
                    return queryable.Where(p => p.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIdentification(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIdentification(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(p => values.Contains(p.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.SectionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sectionId">SectionId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> BySectionId(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 sectionId)
        {
            return queryable.Where(p => p.SectionId == sectionId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.SectionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sectionId">SectionId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> BySectionId(this IQueryable<Malldub.Data.PostField> queryable, ComparisonOperator comparisonOperator, System.Int32 sectionId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.SectionId > sectionId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.SectionId >= sectionId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.SectionId < sectionId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.SectionId <= sectionId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.SectionId != sectionId);
                default:
                    return queryable.Where(p => p.SectionId == sectionId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.SectionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sectionId">SectionId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> BySectionId(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 sectionId, params System.Int32[] additionalValues)
        {
            var sectionIdList = new List<System.Int32> { sectionId };

            if (additionalValues != null)
                sectionIdList.AddRange(additionalValues);

            if (sectionIdList.Count == 1)
                return queryable.BySectionId(sectionIdList[0]);

            return queryable.BySectionId(sectionIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.SectionId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> BySectionId(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(p => values.Contains(p.SectionId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.ListPortalCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalCategoryId">ListPortalCategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByListPortalCategoryId(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 listPortalCategoryId)
        {
            return queryable.Where(p => p.ListPortalCategoryId == listPortalCategoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.ListPortalCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalCategoryId">ListPortalCategoryId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByListPortalCategoryId(this IQueryable<Malldub.Data.PostField> queryable, ComparisonOperator comparisonOperator, System.Int32 listPortalCategoryId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(p => p.ListPortalCategoryId > listPortalCategoryId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(p => p.ListPortalCategoryId >= listPortalCategoryId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(p => p.ListPortalCategoryId < listPortalCategoryId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(p => p.ListPortalCategoryId <= listPortalCategoryId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(p => p.ListPortalCategoryId != listPortalCategoryId);
                default:
                    return queryable.Where(p => p.ListPortalCategoryId == listPortalCategoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.ListPortalCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listPortalCategoryId">ListPortalCategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByListPortalCategoryId(this IQueryable<Malldub.Data.PostField> queryable, System.Int32 listPortalCategoryId, params System.Int32[] additionalValues)
        {
            var listPortalCategoryIdList = new List<System.Int32> { listPortalCategoryId };

            if (additionalValues != null)
                listPortalCategoryIdList.AddRange(additionalValues);

            if (listPortalCategoryIdList.Count == 1)
                return queryable.ByListPortalCategoryId(listPortalCategoryIdList[0]);

            return queryable.ByListPortalCategoryId(listPortalCategoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.ListPortalCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByListPortalCategoryId(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(p => values.Contains(p.ListPortalCategoryId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByName(this IQueryable<Malldub.Data.PostField> queryable, System.String name)
        {
            return queryable.Where(p => p.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByName(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(p => p.Name != name);
                default:
                    return queryable.Where(p => p.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByName(this IQueryable<Malldub.Data.PostField> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByName(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(p => values.Contains(p.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.DefaultValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="defaultValue">DefaultValue to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByDefaultValue(this IQueryable<Malldub.Data.PostField> queryable, System.String defaultValue)
        {
            // support nulls
            return defaultValue == null 
                ? queryable.Where(p => p.DefaultValue == null) 
                : queryable.Where(p => p.DefaultValue == defaultValue);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.DefaultValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="defaultValue">DefaultValue to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByDefaultValue(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String defaultValue)
        {
            if (defaultValue == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("defaultValue", "Parameter 'defaultValue' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.DefaultValue.Contains(defaultValue));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.DefaultValue.StartsWith(defaultValue));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.DefaultValue.EndsWith(defaultValue));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.DefaultValue.Contains(defaultValue) == false);
                case ContainmentOperator.NotEquals:
                    return defaultValue == null 
                        ? queryable.Where(p => p.DefaultValue != null) 
                        : queryable.Where(p => p.DefaultValue != defaultValue);
                default:
                    return defaultValue == null 
                        ? queryable.Where(p => p.DefaultValue == null) 
                        : queryable.Where(p => p.DefaultValue == defaultValue);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.DefaultValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="defaultValue">DefaultValue to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByDefaultValue(this IQueryable<Malldub.Data.PostField> queryable, System.String defaultValue, params System.String[] additionalValues)
        {
            var defaultValueList = new List<System.String> { defaultValue };

            if (additionalValues != null)
                defaultValueList.AddRange(additionalValues);
            else
                defaultValueList.Add(null);

            if (defaultValueList.Count == 1)
                return queryable.ByDefaultValue(defaultValueList[0]);

            return queryable.ByDefaultValue(defaultValueList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.DefaultValue"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByDefaultValue(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("DefaultValue", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.IsRequired"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isRequired">IsRequired to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIsRequired(this IQueryable<Malldub.Data.PostField> queryable, System.Boolean? isRequired)
        {
            // support nulls
            return isRequired == null 
                ? queryable.Where(p => p.IsRequired == null) 
                : queryable.Where(p => p.IsRequired == isRequired);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.IsRequired"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isRequired">IsRequired to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIsRequired(this IQueryable<Malldub.Data.PostField> queryable, ComparisonOperator comparisonOperator, System.Boolean? isRequired)
        {
            if (isRequired == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isRequired", "Parameter 'isRequired' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return isRequired == null 
                        ? queryable.Where(p => p.IsRequired != null) 
                        : queryable.Where(p => p.IsRequired != isRequired);
                default:
                    return isRequired == null 
                        ? queryable.Where(p => p.IsRequired == null) 
                        : queryable.Where(p => p.IsRequired == isRequired);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.IsRequired"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isRequired">IsRequired to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIsRequired(this IQueryable<Malldub.Data.PostField> queryable, System.Boolean? isRequired, params System.Boolean?[] additionalValues)
        {
            var isRequiredList = new List<System.Boolean?> { isRequired };

            if (additionalValues != null)
                isRequiredList.AddRange(additionalValues);
            else
                isRequiredList.Add(null);

            if (isRequiredList.Count == 1)
                return queryable.ByIsRequired(isRequiredList[0]);

            return queryable.ByIsRequired(isRequiredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.IsRequired"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByIsRequired(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("IsRequired", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option1">Option1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption1(this IQueryable<Malldub.Data.PostField> queryable, System.String option1)
        {
            // support nulls
            return option1 == null 
                ? queryable.Where(p => p.Option1 == null) 
                : queryable.Where(p => p.Option1 == option1);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option1">Option1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption1(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String option1)
        {
            if (option1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("option1", "Parameter 'option1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Option1.Contains(option1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Option1.StartsWith(option1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Option1.EndsWith(option1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Option1.Contains(option1) == false);
                case ContainmentOperator.NotEquals:
                    return option1 == null 
                        ? queryable.Where(p => p.Option1 != null) 
                        : queryable.Where(p => p.Option1 != option1);
                default:
                    return option1 == null 
                        ? queryable.Where(p => p.Option1 == null) 
                        : queryable.Where(p => p.Option1 == option1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option1">Option1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption1(this IQueryable<Malldub.Data.PostField> queryable, System.String option1, params System.String[] additionalValues)
        {
            var option1List = new List<System.String> { option1 };

            if (additionalValues != null)
                option1List.AddRange(additionalValues);
            else
                option1List.Add(null);

            if (option1List.Count == 1)
                return queryable.ByOption1(option1List[0]);

            return queryable.ByOption1(option1List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption1(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("Option1", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option2">Option2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption2(this IQueryable<Malldub.Data.PostField> queryable, System.String option2)
        {
            // support nulls
            return option2 == null 
                ? queryable.Where(p => p.Option2 == null) 
                : queryable.Where(p => p.Option2 == option2);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option2">Option2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption2(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String option2)
        {
            if (option2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("option2", "Parameter 'option2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Option2.Contains(option2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Option2.StartsWith(option2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Option2.EndsWith(option2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Option2.Contains(option2) == false);
                case ContainmentOperator.NotEquals:
                    return option2 == null 
                        ? queryable.Where(p => p.Option2 != null) 
                        : queryable.Where(p => p.Option2 != option2);
                default:
                    return option2 == null 
                        ? queryable.Where(p => p.Option2 == null) 
                        : queryable.Where(p => p.Option2 == option2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option2">Option2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption2(this IQueryable<Malldub.Data.PostField> queryable, System.String option2, params System.String[] additionalValues)
        {
            var option2List = new List<System.String> { option2 };

            if (additionalValues != null)
                option2List.AddRange(additionalValues);
            else
                option2List.Add(null);

            if (option2List.Count == 1)
                return queryable.ByOption2(option2List[0]);

            return queryable.ByOption2(option2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption2(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("Option2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option3">Option3 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption3(this IQueryable<Malldub.Data.PostField> queryable, System.String option3)
        {
            // support nulls
            return option3 == null 
                ? queryable.Where(p => p.Option3 == null) 
                : queryable.Where(p => p.Option3 == option3);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option3">Option3 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption3(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String option3)
        {
            if (option3 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("option3", "Parameter 'option3' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Option3.Contains(option3));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Option3.StartsWith(option3));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Option3.EndsWith(option3));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Option3.Contains(option3) == false);
                case ContainmentOperator.NotEquals:
                    return option3 == null 
                        ? queryable.Where(p => p.Option3 != null) 
                        : queryable.Where(p => p.Option3 != option3);
                default:
                    return option3 == null 
                        ? queryable.Where(p => p.Option3 == null) 
                        : queryable.Where(p => p.Option3 == option3);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option3">Option3 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption3(this IQueryable<Malldub.Data.PostField> queryable, System.String option3, params System.String[] additionalValues)
        {
            var option3List = new List<System.String> { option3 };

            if (additionalValues != null)
                option3List.AddRange(additionalValues);
            else
                option3List.Add(null);

            if (option3List.Count == 1)
                return queryable.ByOption3(option3List[0]);

            return queryable.ByOption3(option3List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option3"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption3(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("Option3", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option4"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option4">Option4 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption4(this IQueryable<Malldub.Data.PostField> queryable, System.String option4)
        {
            // support nulls
            return option4 == null 
                ? queryable.Where(p => p.Option4 == null) 
                : queryable.Where(p => p.Option4 == option4);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option4"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option4">Option4 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption4(this IQueryable<Malldub.Data.PostField> queryable, ContainmentOperator containmentOperator, System.String option4)
        {
            if (option4 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("option4", "Parameter 'option4' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(p => p.Option4.Contains(option4));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(p => p.Option4.StartsWith(option4));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(p => p.Option4.EndsWith(option4));
                case ContainmentOperator.NotContains:
                    return queryable.Where(p => p.Option4.Contains(option4) == false);
                case ContainmentOperator.NotEquals:
                    return option4 == null 
                        ? queryable.Where(p => p.Option4 != null) 
                        : queryable.Where(p => p.Option4 != option4);
                default:
                    return option4 == null 
                        ? queryable.Where(p => p.Option4 == null) 
                        : queryable.Where(p => p.Option4 == option4);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option4"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="option4">Option4 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption4(this IQueryable<Malldub.Data.PostField> queryable, System.String option4, params System.String[] additionalValues)
        {
            var option4List = new List<System.String> { option4 };

            if (additionalValues != null)
                option4List.AddRange(additionalValues);
            else
                option4List.Add(null);

            if (option4List.Count == 1)
                return queryable.ByOption4(option4List[0]);

            return queryable.ByOption4(option4List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.PostField.Option4"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.PostField> ByOption4(this IQueryable<Malldub.Data.PostField> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.PostField, bool>("Option4", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.PostField> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.PostField.FirstOrDefault(p => p.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.PostField> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.PostField.FirstOrDefault(p => p.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for FundComment.
    /// </summary>
    public static partial class FundCommentExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundComment GetByKey(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(f => f.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.FundComment GetByIdentification(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.FundComment>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByIdentification(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 identification)
        {
            return queryable.Where(f => f.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByIdentification(this IQueryable<Malldub.Data.FundComment> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.Identification != identification);
                default:
                    return queryable.Where(f => f.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByIdentification(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByIdentification(this IQueryable<Malldub.Data.FundComment> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByFundId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 fundId)
        {
            return queryable.Where(f => f.FundId == fundId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByFundId(this IQueryable<Malldub.Data.FundComment> queryable, ComparisonOperator comparisonOperator, System.Int32 fundId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FundId > fundId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FundId >= fundId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FundId < fundId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FundId <= fundId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FundId != fundId);
                default:
                    return queryable.Where(f => f.FundId == fundId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="fundId">FundId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByFundId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 fundId, params System.Int32[] additionalValues)
        {
            var fundIdList = new List<System.Int32> { fundId };

            if (additionalValues != null)
                fundIdList.AddRange(additionalValues);

            if (fundIdList.Count == 1)
                return queryable.ByFundId(fundIdList[0]);

            return queryable.ByFundId(fundIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.FundId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByFundId(this IQueryable<Malldub.Data.FundComment> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FundId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.CommentId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="commentId">CommentId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByCommentId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 commentId)
        {
            return queryable.Where(f => f.CommentId == commentId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.CommentId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="commentId">CommentId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByCommentId(this IQueryable<Malldub.Data.FundComment> queryable, ComparisonOperator comparisonOperator, System.Int32 commentId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.CommentId > commentId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.CommentId >= commentId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.CommentId < commentId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.CommentId <= commentId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.CommentId != commentId);
                default:
                    return queryable.Where(f => f.CommentId == commentId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.CommentId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="commentId">CommentId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByCommentId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32 commentId, params System.Int32[] additionalValues)
        {
            var commentIdList = new List<System.Int32> { commentId };

            if (additionalValues != null)
                commentIdList.AddRange(additionalValues);

            if (commentIdList.Count == 1)
                return queryable.ByCommentId(commentIdList[0]);

            return queryable.ByCommentId(commentIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.CommentId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByCommentId(this IQueryable<Malldub.Data.FundComment> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.CommentId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.OriginId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originId">OriginId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByOriginId(this IQueryable<Malldub.Data.FundComment> queryable, System.String originId)
        {
            return queryable.Where(f => f.OriginId == originId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.OriginId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originId">OriginId to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByOriginId(this IQueryable<Malldub.Data.FundComment> queryable, ContainmentOperator containmentOperator, System.String originId)
        {
            if (originId == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("originId", "Parameter 'originId' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.OriginId.Contains(originId));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.OriginId.StartsWith(originId));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.OriginId.EndsWith(originId));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.OriginId.Contains(originId) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(f => f.OriginId != originId);
                default:
                    return queryable.Where(f => f.OriginId == originId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.OriginId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="originId">OriginId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByOriginId(this IQueryable<Malldub.Data.FundComment> queryable, System.String originId, params System.String[] additionalValues)
        {
            var originIdList = new List<System.String> { originId };

            if (additionalValues != null)
                originIdList.AddRange(additionalValues);

            if (originIdList.Count == 1)
                return queryable.ByOriginId(originIdList[0]);

            return queryable.ByOriginId(originIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.OriginId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByOriginId(this IQueryable<Malldub.Data.FundComment> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(f => values.Contains(f.OriginId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByDonationId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32? donationId)
        {
            // support nulls
            return donationId == null 
                ? queryable.Where(f => f.DonationId == null) 
                : queryable.Where(f => f.DonationId == donationId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByDonationId(this IQueryable<Malldub.Data.FundComment> queryable, ComparisonOperator comparisonOperator, System.Int32? donationId)
        {
            if (donationId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("donationId", "Parameter 'donationId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.DonationId > donationId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.DonationId >= donationId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.DonationId < donationId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.DonationId <= donationId);
                case ComparisonOperator.NotEquals:
                    return donationId == null 
                        ? queryable.Where(f => f.DonationId != null) 
                        : queryable.Where(f => f.DonationId != donationId);
                default:
                    return donationId == null 
                        ? queryable.Where(f => f.DonationId == null) 
                        : queryable.Where(f => f.DonationId == donationId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="donationId">DonationId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByDonationId(this IQueryable<Malldub.Data.FundComment> queryable, System.Int32? donationId, params System.Int32?[] additionalValues)
        {
            var donationIdList = new List<System.Int32?> { donationId };

            if (additionalValues != null)
                donationIdList.AddRange(additionalValues);
            else
                donationIdList.Add(null);

            if (donationIdList.Count == 1)
                return queryable.ByDonationId(donationIdList[0]);

            return queryable.ByDonationId(donationIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.FundComment.DonationId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.FundComment> ByDonationId(this IQueryable<Malldub.Data.FundComment> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.FundComment, bool>("DonationId", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundComment> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundComment.FirstOrDefault(f => f.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.FundComment> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.FundComment.FirstOrDefault(f => f.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

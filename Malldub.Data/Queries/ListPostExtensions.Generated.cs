#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for ListPost.
    /// </summary>
    public static partial class ListPostExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.ListPost GetByKey(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(l => l.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.ListPost GetByIdentification(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.ListPost>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(l => l.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIdentification(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 identification)
        {
            return queryable.Where(l => l.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIdentification(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.Identification != identification);
                default:
                    return queryable.Where(l => l.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIdentification(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIdentification(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListSiteId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listSiteId">ListSiteId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListSiteId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 listSiteId)
        {
            return queryable.Where(l => l.ListSiteId == listSiteId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListSiteId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listSiteId">ListSiteId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListSiteId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32 listSiteId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.ListSiteId > listSiteId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.ListSiteId >= listSiteId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.ListSiteId < listSiteId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.ListSiteId <= listSiteId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.ListSiteId != listSiteId);
                default:
                    return queryable.Where(l => l.ListSiteId == listSiteId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListSiteId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listSiteId">ListSiteId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListSiteId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 listSiteId, params System.Int32[] additionalValues)
        {
            var listSiteIdList = new List<System.Int32> { listSiteId };

            if (additionalValues != null)
                listSiteIdList.AddRange(additionalValues);

            if (listSiteIdList.Count == 1)
                return queryable.ByListSiteId(listSiteIdList[0]);

            return queryable.ByListSiteId(listSiteIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListSiteId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListSiteId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.ListSiteId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listTypeId">ListTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListTypeId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 listTypeId)
        {
            return queryable.Where(l => l.ListTypeId == listTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listTypeId">ListTypeId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListTypeId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32 listTypeId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.ListTypeId > listTypeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.ListTypeId >= listTypeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.ListTypeId < listTypeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.ListTypeId <= listTypeId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.ListTypeId != listTypeId);
                default:
                    return queryable.Where(l => l.ListTypeId == listTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listTypeId">ListTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListTypeId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 listTypeId, params System.Int32[] additionalValues)
        {
            var listTypeIdList = new List<System.Int32> { listTypeId };

            if (additionalValues != null)
                listTypeIdList.AddRange(additionalValues);

            if (listTypeIdList.Count == 1)
                return queryable.ByListTypeId(listTypeIdList[0]);

            return queryable.ByListTypeId(listTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListTypeId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.ListTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listCategoryId">ListCategoryId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListCategoryId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32? listCategoryId)
        {
            // support nulls
            return listCategoryId == null 
                ? queryable.Where(l => l.ListCategoryId == null) 
                : queryable.Where(l => l.ListCategoryId == listCategoryId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listCategoryId">ListCategoryId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListCategoryId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32? listCategoryId)
        {
            if (listCategoryId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("listCategoryId", "Parameter 'listCategoryId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.ListCategoryId > listCategoryId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.ListCategoryId >= listCategoryId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.ListCategoryId < listCategoryId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.ListCategoryId <= listCategoryId);
                case ComparisonOperator.NotEquals:
                    return listCategoryId == null 
                        ? queryable.Where(l => l.ListCategoryId != null) 
                        : queryable.Where(l => l.ListCategoryId != listCategoryId);
                default:
                    return listCategoryId == null 
                        ? queryable.Where(l => l.ListCategoryId == null) 
                        : queryable.Where(l => l.ListCategoryId == listCategoryId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listCategoryId">ListCategoryId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListCategoryId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32? listCategoryId, params System.Int32?[] additionalValues)
        {
            var listCategoryIdList = new List<System.Int32?> { listCategoryId };

            if (additionalValues != null)
                listCategoryIdList.AddRange(additionalValues);
            else
                listCategoryIdList.Add(null);

            if (listCategoryIdList.Count == 1)
                return queryable.ByListCategoryId(listCategoryIdList[0]);

            return queryable.ByListCategoryId(listCategoryIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListCategoryId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListCategoryId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ListPost, bool>("ListCategoryId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListAreaId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listAreaId">ListAreaId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListAreaId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32? listAreaId)
        {
            // support nulls
            return listAreaId == null 
                ? queryable.Where(l => l.ListAreaId == null) 
                : queryable.Where(l => l.ListAreaId == listAreaId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListAreaId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listAreaId">ListAreaId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListAreaId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32? listAreaId)
        {
            if (listAreaId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("listAreaId", "Parameter 'listAreaId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.ListAreaId > listAreaId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.ListAreaId >= listAreaId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.ListAreaId < listAreaId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.ListAreaId <= listAreaId);
                case ComparisonOperator.NotEquals:
                    return listAreaId == null 
                        ? queryable.Where(l => l.ListAreaId != null) 
                        : queryable.Where(l => l.ListAreaId != listAreaId);
                default:
                    return listAreaId == null 
                        ? queryable.Where(l => l.ListAreaId == null) 
                        : queryable.Where(l => l.ListAreaId == listAreaId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListAreaId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="listAreaId">ListAreaId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListAreaId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32? listAreaId, params System.Int32?[] additionalValues)
        {
            var listAreaIdList = new List<System.Int32?> { listAreaId };

            if (additionalValues != null)
                listAreaIdList.AddRange(additionalValues);
            else
                listAreaIdList.Add(null);

            if (listAreaIdList.Count == 1)
                return queryable.ByListAreaId(listAreaIdList[0]);

            return queryable.ByListAreaId(listAreaIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.ListAreaId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByListAreaId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ListPost, bool>("ListAreaId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.SpecificLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specificLocation">SpecificLocation to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> BySpecificLocation(this IQueryable<Malldub.Data.ListPost> queryable, System.String specificLocation)
        {
            // support nulls
            return specificLocation == null 
                ? queryable.Where(l => l.SpecificLocation == null) 
                : queryable.Where(l => l.SpecificLocation == specificLocation);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.SpecificLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specificLocation">SpecificLocation to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> BySpecificLocation(this IQueryable<Malldub.Data.ListPost> queryable, ContainmentOperator containmentOperator, System.String specificLocation)
        {
            if (specificLocation == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("specificLocation", "Parameter 'specificLocation' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(l => l.SpecificLocation.Contains(specificLocation));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(l => l.SpecificLocation.StartsWith(specificLocation));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(l => l.SpecificLocation.EndsWith(specificLocation));
                case ContainmentOperator.NotContains:
                    return queryable.Where(l => l.SpecificLocation.Contains(specificLocation) == false);
                case ContainmentOperator.NotEquals:
                    return specificLocation == null 
                        ? queryable.Where(l => l.SpecificLocation != null) 
                        : queryable.Where(l => l.SpecificLocation != specificLocation);
                default:
                    return specificLocation == null 
                        ? queryable.Where(l => l.SpecificLocation == null) 
                        : queryable.Where(l => l.SpecificLocation == specificLocation);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.SpecificLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="specificLocation">SpecificLocation to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> BySpecificLocation(this IQueryable<Malldub.Data.ListPost> queryable, System.String specificLocation, params System.String[] additionalValues)
        {
            var specificLocationList = new List<System.String> { specificLocation };

            if (additionalValues != null)
                specificLocationList.AddRange(additionalValues);
            else
                specificLocationList.Add(null);

            if (specificLocationList.Count == 1)
                return queryable.BySpecificLocation(specificLocationList[0]);

            return queryable.BySpecificLocation(specificLocationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.SpecificLocation"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> BySpecificLocation(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.ListPost, bool>("SpecificLocation", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.PostReplyEmailTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postReplyEmailTypeId">PostReplyEmailTypeId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByPostReplyEmailTypeId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 postReplyEmailTypeId)
        {
            return queryable.Where(l => l.PostReplyEmailTypeId == postReplyEmailTypeId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.PostReplyEmailTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postReplyEmailTypeId">PostReplyEmailTypeId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByPostReplyEmailTypeId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32 postReplyEmailTypeId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.PostReplyEmailTypeId > postReplyEmailTypeId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.PostReplyEmailTypeId >= postReplyEmailTypeId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.PostReplyEmailTypeId < postReplyEmailTypeId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.PostReplyEmailTypeId <= postReplyEmailTypeId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.PostReplyEmailTypeId != postReplyEmailTypeId);
                default:
                    return queryable.Where(l => l.PostReplyEmailTypeId == postReplyEmailTypeId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.PostReplyEmailTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="postReplyEmailTypeId">PostReplyEmailTypeId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByPostReplyEmailTypeId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 postReplyEmailTypeId, params System.Int32[] additionalValues)
        {
            var postReplyEmailTypeIdList = new List<System.Int32> { postReplyEmailTypeId };

            if (additionalValues != null)
                postReplyEmailTypeIdList.AddRange(additionalValues);

            if (postReplyEmailTypeIdList.Count == 1)
                return queryable.ByPostReplyEmailTypeId(postReplyEmailTypeIdList[0]);

            return queryable.ByPostReplyEmailTypeId(postReplyEmailTypeIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.PostReplyEmailTypeId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByPostReplyEmailTypeId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.PostReplyEmailTypeId));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.IsSolicitable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isSolicitable">IsSolicitable to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIsSolicitable(this IQueryable<Malldub.Data.ListPost> queryable, System.Boolean isSolicitable)
        {
            return queryable.Where(l => l.IsSolicitable == isSolicitable);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.IsSolicitable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isSolicitable">IsSolicitable to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIsSolicitable(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Boolean isSolicitable)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.IsSolicitable != isSolicitable);
                default:
                    return queryable.Where(l => l.IsSolicitable == isSolicitable);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.IsSolicitable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isSolicitable">IsSolicitable to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIsSolicitable(this IQueryable<Malldub.Data.ListPost> queryable, System.Boolean isSolicitable, params System.Boolean[] additionalValues)
        {
            var isSolicitableList = new List<System.Boolean> { isSolicitable };

            if (additionalValues != null)
                isSolicitableList.AddRange(additionalValues);

            if (isSolicitableList.Count == 1)
                return queryable.ByIsSolicitable(isSolicitableList[0]);

            return queryable.ByIsSolicitable(isSolicitableList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.IsSolicitable"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByIsSolicitable(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Boolean> values)
        {
            return queryable.Where(l => values.Contains(l.IsSolicitable));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByStatusId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 statusId)
        {
            return queryable.Where(l => l.StatusId == statusId);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByStatusId(this IQueryable<Malldub.Data.ListPost> queryable, ComparisonOperator comparisonOperator, System.Int32 statusId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(l => l.StatusId > statusId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(l => l.StatusId >= statusId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(l => l.StatusId < statusId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(l => l.StatusId <= statusId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(l => l.StatusId != statusId);
                default:
                    return queryable.Where(l => l.StatusId == statusId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="statusId">StatusId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByStatusId(this IQueryable<Malldub.Data.ListPost> queryable, System.Int32 statusId, params System.Int32[] additionalValues)
        {
            var statusIdList = new List<System.Int32> { statusId };

            if (additionalValues != null)
                statusIdList.AddRange(additionalValues);

            if (statusIdList.Count == 1)
                return queryable.ByStatusId(statusIdList[0]);

            return queryable.ByStatusId(statusIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.ListPost.StatusId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.ListPost> ByStatusId(this IQueryable<Malldub.Data.ListPost> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(l => values.Contains(l.StatusId));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.ListPost> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.ListPost.FirstOrDefault(l => l.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.ListPost> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.ListPost.FirstOrDefault(l => l.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591

#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Malldub.Data;

namespace Malldub.Data.Controllers.API
{
    [CodeSmith.Data.Web.Http.PagingAndFiltering]
    public partial class UploadController : ApiController
    {
        private Malldub.Data.MalldubDataContext _context = new Malldub.Data.MalldubDataContext();

        #region Get

        public Malldub.Data.Upload GetByKey(System.Int32 identification)
        {
            var upload = _context.Upload.GetByKey(identification);
            if (upload == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return upload;
        }

        public IQueryable<Malldub.Data.Upload> GetAll()
        {
            return _context.Upload.AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByDescription(System.String description)
        {
            return _context.Upload.ByDescription(description).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByIsPrivate(System.Boolean isPrivate)
        {
            return _context.Upload.ByIsPrivate(isPrivate).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByCategoryId(System.String categoryId)
        {
            return _context.Upload.ByCategoryId(categoryId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByName(System.String name)
        {
            return _context.Upload.ByName(name).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByOriginalFileName(System.String originalFileName)
        {
            return _context.Upload.ByOriginalFileName(originalFileName).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByLocation(System.String location)
        {
            return _context.Upload.ByLocation(location).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByRelativeLocation(System.String relativeLocation)
        {
            return _context.Upload.ByRelativeLocation(relativeLocation).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByExtension(System.String extension)
        {
            return _context.Upload.ByExtension(extension).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByContentLength(System.Int64? contentLength)
        {
            return _context.Upload.ByContentLength(contentLength).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByContentType(System.String contentType)
        {
            return _context.Upload.ByContentType(contentType).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByLocationHttp(System.String locationHttp)
        {
            return _context.Upload.ByLocationHttp(locationHttp).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByContainerName(System.String containerName)
        {
            return _context.Upload.ByContainerName(containerName).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByDateEntered(System.DateTime? dateEntered)
        {
            return _context.Upload.ByDateEntered(dateEntered).AsQueryable();
        }

        public IQueryable<Malldub.Data.Upload> GetByDateUpdated(System.DateTime? dateUpdated)
        {
            return _context.Upload.ByDateUpdated(dateUpdated).AsQueryable();
        }

        #endregion

        public HttpResponseMessage Post(Malldub.Data.Upload value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.Upload.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<Malldub.Data.Upload>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { Identification = value.Identification }));

            return response;
        }

        public HttpResponseMessage Put(Malldub.Data.Upload value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var upload = _context.Upload.GetByKey(value.Identification);
            if (upload == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.ApplyCurrentValues(upload.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

        public HttpResponseMessage Delete(System.Int32 identification)
        {
            var upload = _context.Upload.GetByKey(identification);
            if (upload == null)
                return new HttpResponseMessage(HttpStatusCode.NotFound);

            _context.Upload.DeleteObject(upload);
            _context.SaveChanges();
            
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
    }
}

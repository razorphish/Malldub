#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Malldub.Data;

namespace Malldub.Data.Controllers.API
{
    using Malldub.WebApi.RootControllers;

    [CodeSmith.Data.Web.Http.PagingAndFiltering]
    public partial class FundController : BaseApiController
    {
        private Malldub.Data.MalldubDataContext _context = new Malldub.Data.MalldubDataContext();

        #region Get

        public Malldub.Data.Fund GetByKey(System.Int32 identification)
        {
            AccessLevel("Administrator", "Admin");
            var fund = _context.Fund.GetByKey(identification);
            if (fund == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return fund;
        }

        public IQueryable<Malldub.Data.Fund> GetAll()
        {
            base.AccessLevel("Admin","Administrator");
            return _context.Fund
                .Include("Item")
                .AsQueryable();
        }

        public IQueryable<Malldub.Data.Fund> GetByGoalAmount(System.Decimal goalAmount)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Fund.ByGoalAmount(goalAmount).AsQueryable();
        }

        public IQueryable<Malldub.Data.Fund> GetByTypeId(System.String typeId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Fund.ByTypeId(typeId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Fund> GetByIsPrivate(System.Boolean isPrivate)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Fund.ByIsPrivate(isPrivate).AsQueryable();
        }

        public IQueryable<Malldub.Data.Fund> GetByEnableSocialSharing(System.Boolean enableSocialSharing)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Fund.ByEnableSocialSharing(enableSocialSharing).AsQueryable();
        }

        public IQueryable<Malldub.Data.Fund> GetByPageColor(System.String pageColor)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Fund.ByPageColor(pageColor).AsQueryable();
        }

        #endregion

        public HttpResponseMessage Post(Malldub.Data.Fund value)
        {
            AccessLevel("Administrator", "Admin");
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.Fund.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<Malldub.Data.Fund>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { Identification = value.Identification }));

            return response;
        }

        public HttpResponseMessage Put(Malldub.Data.Fund value)
        {
            AccessLevel("Administrator", "Admin");
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var fund = _context.Fund.GetByKey(value.Identification);
            if (fund == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.ApplyCurrentValues(fund.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

    }
}

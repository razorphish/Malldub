#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Malldub.Data;

namespace Malldub.Data.Controllers.API
{
    [CodeSmith.Data.Web.Http.PagingAndFiltering]
    public partial class AuctionInvoiceController : ApiController
    {
        private Malldub.Data.MalldubDataContext _context = new Malldub.Data.MalldubDataContext();

        #region Get

        public Malldub.Data.AuctionInvoice GetByKey(System.Int32 auctionId, System.Int32 invoiceId)
        {
            var auctionInvoice = _context.AuctionInvoice.GetByKey(auctionId, invoiceId);
            if (auctionInvoice == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return auctionInvoice;
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetAll()
        {
            return _context.AuctionInvoice.AsQueryable();
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetByClientIdPayable(System.Int32? clientIdPayable)
        {
            return _context.AuctionInvoice.ByClientIdPayable(clientIdPayable).AsQueryable();
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetByClientIdReceivable(System.Int32 clientIdReceivable)
        {
            return _context.AuctionInvoice.ByClientIdReceivable(clientIdReceivable).AsQueryable();
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetByTypeId(System.Int32 typeId)
        {
            return _context.AuctionInvoice.ByTypeId(typeId).AsQueryable();
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetBySystemInvoice(System.Boolean systemInvoice)
        {
            return _context.AuctionInvoice.BySystemInvoice(systemInvoice).AsQueryable();
        }

        public IQueryable<Malldub.Data.AuctionInvoice> GetByBillToTypeId(System.Int32? billToTypeId)
        {
            return _context.AuctionInvoice.ByBillToTypeId(billToTypeId).AsQueryable();
        }

        #endregion

        public HttpResponseMessage Post(Malldub.Data.AuctionInvoice value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.AuctionInvoice.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<Malldub.Data.AuctionInvoice>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { AuctionId = value.AuctionId, InvoiceId = value.InvoiceId }));

            return response;
        }

        public HttpResponseMessage Put(Malldub.Data.AuctionInvoice value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var auctionInvoice = _context.AuctionInvoice.GetByKey(value.AuctionId, value.InvoiceId);
            if (auctionInvoice == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.ApplyCurrentValues(auctionInvoice.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

        public HttpResponseMessage Delete(System.Int32 auctionId, System.Int32 invoiceId)
        {
            var auctionInvoice = _context.AuctionInvoice.GetByKey(auctionId, invoiceId);
            if (auctionInvoice == null)
                return new HttpResponseMessage(HttpStatusCode.NotFound);

            _context.AuctionInvoice.DeleteObject(auctionInvoice);
            _context.SaveChanges();
            
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
    }
}

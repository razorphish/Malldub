#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using Malldub.Data;

namespace Malldub.Data.Controllers.API
{
    using Malldub.WebApi.RootControllers;

    [CodeSmith.Data.Web.Http.PagingAndFiltering]
    public partial class DonationController : BaseApiController
    {
        private Malldub.Data.MalldubDataContext _context = new Malldub.Data.MalldubDataContext();

        #region Get

        public Malldub.Data.Donation GetByKey(System.Int32 identification)
        {
            AccessLevel("Administrator", "Admin");
            var donation = _context.Donation.GetByKey(identification);
            if (donation == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return donation;
        }

        public IQueryable<Malldub.Data.Donation> GetAll()
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByFundId(System.Int32 fundId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByFundId(fundId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByDonorUserId(System.String donorUserId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByDonorUserId(donorUserId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByOrderId(System.Int32? orderId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByOrderId(orderId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByFeeTypeId(System.String feeTypeId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByFeeTypeId(feeTypeId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByStatusId(System.String statusId)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByStatusId(statusId).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByAmount(System.Decimal amount)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByAmount(amount).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByProcessingFee(System.Decimal processingFee)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByProcessingFee(processingFee).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByBeneficiaryAmount(System.Decimal beneficiaryAmount)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByBeneficiaryAmount(beneficiaryAmount).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetBySystemAmount(System.Decimal systemAmount)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.BySystemAmount(systemAmount).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByDonorName(System.String donorName)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByDonorName(donorName).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByEmail(System.String email)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByEmail(email).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByMessage(System.String message)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByMessage(message).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByOfflineDonation(System.Boolean offlineDonation)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByOfflineDonation(offlineDonation).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByThankYouNoteSent(System.Boolean thankYouNoteSent)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByThankYouNoteSent(thankYouNoteSent).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByDateEntered(System.DateTime? dateEntered)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByDateEntered(dateEntered).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByIsPrivateAmount(System.Boolean isPrivateAmount)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByIsPrivateAmount(isPrivateAmount).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByIsPrivateDonorName(System.Boolean isPrivateDonorName)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByIsPrivateDonorName(isPrivateDonorName).AsQueryable();
        }

        public IQueryable<Malldub.Data.Donation> GetByCostsCovered(System.Boolean costsCovered)
        {
            AccessLevel("Administrator", "Admin");
            return _context.Donation.ByCostsCovered(costsCovered).AsQueryable();
        }

        #endregion

        public HttpResponseMessage Post(Malldub.Data.Donation value)
        {
            AccessLevel("Administrator", "Admin");
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.Donation.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<Malldub.Data.Donation>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { Identification = value.Identification }));

            return response;
        }

        public HttpResponseMessage Put(Malldub.Data.Donation value)
        {
            AccessLevel("Administrator", "Admin");
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var donation = _context.Donation.GetByKey(value.Identification);
            if (donation == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.ApplyCurrentValues(donation.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

        public HttpResponseMessage Delete(System.Int32 identification)
        {
            AccessLevel("Administrator", "Admin");
            var donation = _context.Donation.GetByKey(identification);
            if (donation == null)
                return new HttpResponseMessage(HttpStatusCode.NotFound);

            _context.Donation.DeleteObject(donation);
            _context.SaveChanges();
            
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
    }
}

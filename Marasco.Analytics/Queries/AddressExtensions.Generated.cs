#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Malldub.Data
{
    /// <summary>
    /// The query extension class for Address.
    /// </summary>
    public static partial class AddressExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Address GetByKey(this IQueryable<Malldub.Data.Address> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(a => a.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static Malldub.Data.Address GetByIdentification(this IQueryable<Malldub.Data.Address> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<Malldub.Data.Address>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((Malldub.Data.MalldubDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByIdentification(this IQueryable<Malldub.Data.Address> queryable, System.Int32 identification)
        {
            return queryable.Where(a => a.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByIdentification(this IQueryable<Malldub.Data.Address> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Identification != identification);
                default:
                    return queryable.Where(a => a.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByIdentification(this IQueryable<Malldub.Data.Address> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByIdentification(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress1(this IQueryable<Malldub.Data.Address> queryable, System.String address1)
        {
            return queryable.Where(a => a.Address1 == address1);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress1(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String address1)
        {
            if (address1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address1", "Parameter 'address1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Address1.Contains(address1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Address1.StartsWith(address1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Address1.EndsWith(address1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Address1.Contains(address1) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.Address1 != address1);
                default:
                    return queryable.Where(a => a.Address1 == address1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address1">Address1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress1(this IQueryable<Malldub.Data.Address> queryable, System.String address1, params System.String[] additionalValues)
        {
            var address1List = new List<System.String> { address1 };

            if (additionalValues != null)
                address1List.AddRange(additionalValues);

            if (address1List.Count == 1)
                return queryable.ByAddress1(address1List[0]);

            return queryable.ByAddress1(address1List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress1(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.Address1));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress2(this IQueryable<Malldub.Data.Address> queryable, System.String address2)
        {
            // support nulls
            return address2 == null 
                ? queryable.Where(a => a.Address2 == null) 
                : queryable.Where(a => a.Address2 == address2);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress2(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String address2)
        {
            if (address2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address2", "Parameter 'address2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Address2.Contains(address2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Address2.StartsWith(address2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Address2.EndsWith(address2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Address2.Contains(address2) == false);
                case ContainmentOperator.NotEquals:
                    return address2 == null 
                        ? queryable.Where(a => a.Address2 != null) 
                        : queryable.Where(a => a.Address2 != address2);
                default:
                    return address2 == null 
                        ? queryable.Where(a => a.Address2 == null) 
                        : queryable.Where(a => a.Address2 == address2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address2">Address2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress2(this IQueryable<Malldub.Data.Address> queryable, System.String address2, params System.String[] additionalValues)
        {
            var address2List = new List<System.String> { address2 };

            if (additionalValues != null)
                address2List.AddRange(additionalValues);
            else
                address2List.Add(null);

            if (address2List.Count == 1)
                return queryable.ByAddress2(address2List[0]);

            return queryable.ByAddress2(address2List);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Address2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByAddress2(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("Address2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCity(this IQueryable<Malldub.Data.Address> queryable, System.String city)
        {
            return queryable.Where(a => a.City == city);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCity(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String city)
        {
            if (city == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("city", "Parameter 'city' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.City.Contains(city));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.City.StartsWith(city));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.City.EndsWith(city));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.City.Contains(city) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.City != city);
                default:
                    return queryable.Where(a => a.City == city);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="city">City to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCity(this IQueryable<Malldub.Data.Address> queryable, System.String city, params System.String[] additionalValues)
        {
            var cityList = new List<System.String> { city };

            if (additionalValues != null)
                cityList.AddRange(additionalValues);

            if (cityList.Count == 1)
                return queryable.ByCity(cityList[0]);

            return queryable.ByCity(cityList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.City"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCity(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.City));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByState(this IQueryable<Malldub.Data.Address> queryable, System.String state)
        {
            return queryable.Where(a => a.State == state);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByState(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String state)
        {
            if (state == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("state", "Parameter 'state' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.State.Contains(state));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.State.StartsWith(state));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.State.EndsWith(state));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.State.Contains(state) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.State != state);
                default:
                    return queryable.Where(a => a.State == state);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="state">State to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByState(this IQueryable<Malldub.Data.Address> queryable, System.String state, params System.String[] additionalValues)
        {
            var stateList = new List<System.String> { state };

            if (additionalValues != null)
                stateList.AddRange(additionalValues);

            if (stateList.Count == 1)
                return queryable.ByState(stateList[0]);

            return queryable.ByState(stateList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.State"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByState(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.State));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.ZipCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zipCode">ZipCode to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByZipCode(this IQueryable<Malldub.Data.Address> queryable, System.String zipCode)
        {
            return queryable.Where(a => a.ZipCode == zipCode);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.ZipCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zipCode">ZipCode to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByZipCode(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String zipCode)
        {
            if (zipCode == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("zipCode", "Parameter 'zipCode' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ZipCode.Contains(zipCode));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ZipCode.StartsWith(zipCode));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ZipCode.EndsWith(zipCode));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ZipCode.Contains(zipCode) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(a => a.ZipCode != zipCode);
                default:
                    return queryable.Where(a => a.ZipCode == zipCode);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.ZipCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zipCode">ZipCode to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByZipCode(this IQueryable<Malldub.Data.Address> queryable, System.String zipCode, params System.String[] additionalValues)
        {
            var zipCodeList = new List<System.String> { zipCode };

            if (additionalValues != null)
                zipCodeList.AddRange(additionalValues);

            if (zipCodeList.Count == 1)
                return queryable.ByZipCode(zipCodeList[0]);

            return queryable.ByZipCode(zipCodeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.ZipCode"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByZipCode(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(a => values.Contains(a.ZipCode));
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLongitude(this IQueryable<Malldub.Data.Address> queryable, System.Decimal? longitude)
        {
            // support nulls
            return longitude == null 
                ? queryable.Where(a => a.Longitude == null) 
                : queryable.Where(a => a.Longitude == longitude);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLongitude(this IQueryable<Malldub.Data.Address> queryable, ComparisonOperator comparisonOperator, System.Decimal? longitude)
        {
            if (longitude == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("longitude", "Parameter 'longitude' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Longitude > longitude);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Longitude >= longitude);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Longitude < longitude);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Longitude <= longitude);
                case ComparisonOperator.NotEquals:
                    return longitude == null 
                        ? queryable.Where(a => a.Longitude != null) 
                        : queryable.Where(a => a.Longitude != longitude);
                default:
                    return longitude == null 
                        ? queryable.Where(a => a.Longitude == null) 
                        : queryable.Where(a => a.Longitude == longitude);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="longitude">Longitude to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLongitude(this IQueryable<Malldub.Data.Address> queryable, System.Decimal? longitude, params System.Decimal?[] additionalValues)
        {
            var longitudeList = new List<System.Decimal?> { longitude };

            if (additionalValues != null)
                longitudeList.AddRange(additionalValues);
            else
                longitudeList.Add(null);

            if (longitudeList.Count == 1)
                return queryable.ByLongitude(longitudeList[0]);

            return queryable.ByLongitude(longitudeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Longitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLongitude(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("Longitude", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLatitude(this IQueryable<Malldub.Data.Address> queryable, System.Decimal? latitude)
        {
            // support nulls
            return latitude == null 
                ? queryable.Where(a => a.Latitude == null) 
                : queryable.Where(a => a.Latitude == latitude);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLatitude(this IQueryable<Malldub.Data.Address> queryable, ComparisonOperator comparisonOperator, System.Decimal? latitude)
        {
            if (latitude == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("latitude", "Parameter 'latitude' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Latitude > latitude);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Latitude >= latitude);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Latitude < latitude);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Latitude <= latitude);
                case ComparisonOperator.NotEquals:
                    return latitude == null 
                        ? queryable.Where(a => a.Latitude != null) 
                        : queryable.Where(a => a.Latitude != latitude);
                default:
                    return latitude == null 
                        ? queryable.Where(a => a.Latitude == null) 
                        : queryable.Where(a => a.Latitude == latitude);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="latitude">Latitude to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLatitude(this IQueryable<Malldub.Data.Address> queryable, System.Decimal? latitude, params System.Decimal?[] additionalValues)
        {
            var latitudeList = new List<System.Decimal?> { latitude };

            if (additionalValues != null)
                latitudeList.AddRange(additionalValues);
            else
                latitudeList.Add(null);

            if (latitudeList.Count == 1)
                return queryable.ByLatitude(latitudeList[0]);

            return queryable.ByLatitude(latitudeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Latitude"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByLatitude(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.Decimal?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("Latitude", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.County"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="county">County to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCounty(this IQueryable<Malldub.Data.Address> queryable, System.String county)
        {
            // support nulls
            return county == null 
                ? queryable.Where(a => a.County == null) 
                : queryable.Where(a => a.County == county);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.County"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="county">County to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCounty(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String county)
        {
            if (county == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("county", "Parameter 'county' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.County.Contains(county));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.County.StartsWith(county));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.County.EndsWith(county));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.County.Contains(county) == false);
                case ContainmentOperator.NotEquals:
                    return county == null 
                        ? queryable.Where(a => a.County != null) 
                        : queryable.Where(a => a.County != county);
                default:
                    return county == null 
                        ? queryable.Where(a => a.County == null) 
                        : queryable.Where(a => a.County == county);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.County"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="county">County to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCounty(this IQueryable<Malldub.Data.Address> queryable, System.String county, params System.String[] additionalValues)
        {
            var countyList = new List<System.String> { county };

            if (additionalValues != null)
                countyList.AddRange(additionalValues);
            else
                countyList.Add(null);

            if (countyList.Count == 1)
                return queryable.ByCounty(countyList[0]);

            return queryable.ByCounty(countyList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.County"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCounty(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("County", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCountry(this IQueryable<Malldub.Data.Address> queryable, System.String country)
        {
            // support nulls
            return country == null 
                ? queryable.Where(a => a.Country == null) 
                : queryable.Where(a => a.Country == country);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCountry(this IQueryable<Malldub.Data.Address> queryable, ContainmentOperator containmentOperator, System.String country)
        {
            if (country == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("country", "Parameter 'country' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Country.Contains(country));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Country.StartsWith(country));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Country.EndsWith(country));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Country.Contains(country) == false);
                case ContainmentOperator.NotEquals:
                    return country == null 
                        ? queryable.Where(a => a.Country != null) 
                        : queryable.Where(a => a.Country != country);
                default:
                    return country == null 
                        ? queryable.Where(a => a.Country == null) 
                        : queryable.Where(a => a.Country == country);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="country">Country to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCountry(this IQueryable<Malldub.Data.Address> queryable, System.String country, params System.String[] additionalValues)
        {
            var countryList = new List<System.String> { country };

            if (additionalValues != null)
                countryList.AddRange(additionalValues);
            else
                countryList.Add(null);

            if (countryList.Count == 1)
                return queryable.ByCountry(countryList[0]);

            return queryable.ByCountry(countryList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.Country"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByCountry(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("Country", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByDateEntered(this IQueryable<Malldub.Data.Address> queryable, System.DateTime? dateEntered)
        {
            // support nulls
            return dateEntered == null 
                ? queryable.Where(a => a.DateEntered == null) 
                : queryable.Where(a => a.DateEntered == dateEntered);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByDateEntered(this IQueryable<Malldub.Data.Address> queryable, ComparisonOperator comparisonOperator, System.DateTime? dateEntered)
        {
            if (dateEntered == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("dateEntered", "Parameter 'dateEntered' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DateEntered > dateEntered);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DateEntered >= dateEntered);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DateEntered < dateEntered);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DateEntered <= dateEntered);
                case ComparisonOperator.NotEquals:
                    return dateEntered == null 
                        ? queryable.Where(a => a.DateEntered != null) 
                        : queryable.Where(a => a.DateEntered != dateEntered);
                default:
                    return dateEntered == null 
                        ? queryable.Where(a => a.DateEntered == null) 
                        : queryable.Where(a => a.DateEntered == dateEntered);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="dateEntered">DateEntered to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByDateEntered(this IQueryable<Malldub.Data.Address> queryable, System.DateTime? dateEntered, params System.DateTime?[] additionalValues)
        {
            var dateEnteredList = new List<System.DateTime?> { dateEntered };

            if (additionalValues != null)
                dateEnteredList.AddRange(additionalValues);
            else
                dateEnteredList.Add(null);

            if (dateEnteredList.Count == 1)
                return queryable.ByDateEntered(dateEnteredList[0]);

            return queryable.ByDateEntered(dateEnteredList);
        }

        /// <summary>
        /// Gets a query for <see cref="Malldub.Data.Address.DateEntered"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<Malldub.Data.Address> ByDateEntered(this IQueryable<Malldub.Data.Address> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Malldub.Data.Address, bool>("DateEntered", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Address> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Address.FirstOrDefault(a => a.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<Malldub.Data.MalldubDataContext, System.Int32, Malldub.Data.Address> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (Malldub.Data.MalldubDataContext db, System.Int32 identification) =>
                        db.Address.FirstOrDefault(a => a.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
